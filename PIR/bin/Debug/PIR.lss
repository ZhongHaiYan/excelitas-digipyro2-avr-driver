
bin\Debug\PIR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000080  00800100  000023cc  00002480  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000023cc  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800180  00800180  00002500  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  00002500  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      0000005c  00000000  00000000  00002503  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002560  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000058  00000000  00000000  000025a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000132a  00000000  00000000  000025f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000091a  00000000  00000000  00003922  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000095b  00000000  00000000  0000423c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000100  00000000  00000000  00004b98  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000003fd  00000000  00000000  00004c98  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000001d6  00000000  00000000  00005095  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ec ec       	ldi	r30, 0xCC	; 204
      7c:	f3 e2       	ldi	r31, 0x23	; 35
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a0 38       	cpi	r26, 0x80	; 128
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	21 e0       	ldi	r18, 0x01	; 1
      8c:	a0 e8       	ldi	r26, 0x80	; 128
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	ac 38       	cpi	r26, 0x8C	; 140
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 bb 0b 	call	0x1776	; 0x1776 <main>
      9e:	0c 94 e4 11 	jmp	0x23c8	; 0x23c8 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <writeregval>:

int PIRval = 0; // PIR signal
unsigned long statcfg = 0; // status and configuration register


void writeregval(unsigned long regval){
      a6:	0f 93       	push	r16
      a8:	1f 93       	push	r17
      aa:	cf 93       	push	r28
      ac:	df 93       	push	r29
      ae:	cd b7       	in	r28, 0x3d	; 61
      b0:	de b7       	in	r29, 0x3e	; 62
      b2:	cc 54       	subi	r28, 0x4C	; 76
      b4:	d1 09       	sbc	r29, r1
      b6:	0f b6       	in	r0, 0x3f	; 63
      b8:	f8 94       	cli
      ba:	de bf       	out	0x3e, r29	; 62
      bc:	0f be       	out	0x3f, r0	; 63
      be:	cd bf       	out	0x3d, r28	; 61
      c0:	9e 01       	movw	r18, r28
      c2:	27 5b       	subi	r18, 0xB7	; 183
      c4:	3f 4f       	sbci	r19, 0xFF	; 255
      c6:	f9 01       	movw	r30, r18
      c8:	60 83       	st	Z, r22
      ca:	71 83       	std	Z+1, r23	; 0x01
      cc:	82 83       	std	Z+2, r24	; 0x02
      ce:	93 83       	std	Z+3, r25	; 0x03
    int i;
    unsigned char nextbit;
    unsigned long regmask = 0x1000000;
      d0:	80 e0       	ldi	r24, 0x00	; 0
      d2:	90 e0       	ldi	r25, 0x00	; 0
      d4:	a0 e0       	ldi	r26, 0x00	; 0
      d6:	b1 e0       	ldi	r27, 0x01	; 1
      d8:	8b 83       	std	Y+3, r24	; 0x03
      da:	9c 83       	std	Y+4, r25	; 0x04
      dc:	ad 83       	std	Y+5, r26	; 0x05
      de:	be 83       	std	Y+6, r27	; 0x06

    DDRD = (1<<3);
      e0:	8a e2       	ldi	r24, 0x2A	; 42
      e2:	90 e0       	ldi	r25, 0x00	; 0
      e4:	28 e0       	ldi	r18, 0x08	; 8
      e6:	fc 01       	movw	r30, r24
      e8:	20 83       	st	Z, r18
    PORTD = (0<<3);
      ea:	8b e2       	ldi	r24, 0x2B	; 43
      ec:	90 e0       	ldi	r25, 0x00	; 0
      ee:	fc 01       	movw	r30, r24
      f0:	10 82       	st	Z, r1
    for(i=0;i < 25;i++){
      f2:	1a 82       	std	Y+2, r1	; 0x02
      f4:	19 82       	std	Y+1, r1	; 0x01
      f6:	2c c1       	rjmp	.+600    	; 0x350 <writeregval+0x2aa>
        nextbit = (regval&regmask)!=0;
      f8:	ce 01       	movw	r24, r28
      fa:	87 5b       	subi	r24, 0xB7	; 183
      fc:	9f 4f       	sbci	r25, 0xFF	; 255
      fe:	fc 01       	movw	r30, r24
     100:	20 81       	ld	r18, Z
     102:	31 81       	ldd	r19, Z+1	; 0x01
     104:	42 81       	ldd	r20, Z+2	; 0x02
     106:	53 81       	ldd	r21, Z+3	; 0x03
     108:	8b 81       	ldd	r24, Y+3	; 0x03
     10a:	9c 81       	ldd	r25, Y+4	; 0x04
     10c:	ad 81       	ldd	r26, Y+5	; 0x05
     10e:	be 81       	ldd	r27, Y+6	; 0x06
     110:	82 23       	and	r24, r18
     112:	93 23       	and	r25, r19
     114:	a4 23       	and	r26, r20
     116:	b5 23       	and	r27, r21
     118:	21 e0       	ldi	r18, 0x01	; 1
     11a:	89 2b       	or	r24, r25
     11c:	8a 2b       	or	r24, r26
     11e:	8b 2b       	or	r24, r27
     120:	09 f4       	brne	.+2      	; 0x124 <writeregval+0x7e>
     122:	20 e0       	ldi	r18, 0x00	; 0
     124:	2f 83       	std	Y+7, r18	; 0x07
        regmask >>= 1;
     126:	8b 81       	ldd	r24, Y+3	; 0x03
     128:	9c 81       	ldd	r25, Y+4	; 0x04
     12a:	ad 81       	ldd	r26, Y+5	; 0x05
     12c:	be 81       	ldd	r27, Y+6	; 0x06
     12e:	b6 95       	lsr	r27
     130:	a7 95       	ror	r26
     132:	97 95       	ror	r25
     134:	87 95       	ror	r24
     136:	8b 83       	std	Y+3, r24	; 0x03
     138:	9c 83       	std	Y+4, r25	; 0x04
     13a:	ad 83       	std	Y+5, r26	; 0x05
     13c:	be 83       	std	Y+6, r27	; 0x06
        //_delay_ms(100);
        PORTD = (0<<3);
     13e:	8b e2       	ldi	r24, 0x2B	; 43
     140:	90 e0       	ldi	r25, 0x00	; 0
     142:	fc 01       	movw	r30, r24
     144:	10 82       	st	Z, r1
        //_delay_ms(100);
        PORTD = (1<<3);
     146:	8b e2       	ldi	r24, 0x2B	; 43
     148:	90 e0       	ldi	r25, 0x00	; 0
     14a:	28 e0       	ldi	r18, 0x08	; 8
     14c:	fc 01       	movw	r30, r24
     14e:	20 83       	st	Z, r18
        //_delay_ms(100);
        PORTD = (nextbit<<3);
     150:	8b e2       	ldi	r24, 0x2B	; 43
     152:	90 e0       	ldi	r25, 0x00	; 0
     154:	2f 81       	ldd	r18, Y+7	; 0x07
     156:	22 0f       	add	r18, r18
     158:	22 0f       	add	r18, r18
     15a:	22 0f       	add	r18, r18
     15c:	fc 01       	movw	r30, r24
     15e:	20 83       	st	Z, r18
     160:	80 e0       	ldi	r24, 0x00	; 0
     162:	90 e0       	ldi	r25, 0x00	; 0
     164:	a8 ec       	ldi	r26, 0xC8	; 200
     166:	b2 e4       	ldi	r27, 0x42	; 66
     168:	88 87       	std	Y+8, r24	; 0x08
     16a:	99 87       	std	Y+9, r25	; 0x09
     16c:	aa 87       	std	Y+10, r26	; 0x0a
     16e:	bb 87       	std	Y+11, r27	; 0x0b
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
     170:	2b ea       	ldi	r18, 0xAB	; 171
     172:	3a ea       	ldi	r19, 0xAA	; 170
     174:	4a ea       	ldi	r20, 0xAA	; 170
     176:	50 e4       	ldi	r21, 0x40	; 64
     178:	68 85       	ldd	r22, Y+8	; 0x08
     17a:	79 85       	ldd	r23, Y+9	; 0x09
     17c:	8a 85       	ldd	r24, Y+10	; 0x0a
     17e:	9b 85       	ldd	r25, Y+11	; 0x0b
     180:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <__mulsf3>
     184:	dc 01       	movw	r26, r24
     186:	cb 01       	movw	r24, r22
     188:	8c 87       	std	Y+12, r24	; 0x0c
     18a:	9d 87       	std	Y+13, r25	; 0x0d
     18c:	ae 87       	std	Y+14, r26	; 0x0e
     18e:	bf 87       	std	Y+15, r27	; 0x0f
	__tmp2 = ((F_CPU) / 4e6) * __us;
     190:	20 e0       	ldi	r18, 0x00	; 0
     192:	30 e0       	ldi	r19, 0x00	; 0
     194:	40 e8       	ldi	r20, 0x80	; 128
     196:	50 e4       	ldi	r21, 0x40	; 64
     198:	68 85       	ldd	r22, Y+8	; 0x08
     19a:	79 85       	ldd	r23, Y+9	; 0x09
     19c:	8a 85       	ldd	r24, Y+10	; 0x0a
     19e:	9b 85       	ldd	r25, Y+11	; 0x0b
     1a0:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <__mulsf3>
     1a4:	dc 01       	movw	r26, r24
     1a6:	cb 01       	movw	r24, r22
     1a8:	88 8b       	std	Y+16, r24	; 0x10
     1aa:	99 8b       	std	Y+17, r25	; 0x11
     1ac:	aa 8b       	std	Y+18, r26	; 0x12
     1ae:	bb 8b       	std	Y+19, r27	; 0x13
	if (__tmp < 1.0)
     1b0:	20 e0       	ldi	r18, 0x00	; 0
     1b2:	30 e0       	ldi	r19, 0x00	; 0
     1b4:	40 e8       	ldi	r20, 0x80	; 128
     1b6:	5f e3       	ldi	r21, 0x3F	; 63
     1b8:	6c 85       	ldd	r22, Y+12	; 0x0c
     1ba:	7d 85       	ldd	r23, Y+13	; 0x0d
     1bc:	8e 85       	ldd	r24, Y+14	; 0x0e
     1be:	9f 85       	ldd	r25, Y+15	; 0x0f
     1c0:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <__cmpsf2>
     1c4:	88 23       	and	r24, r24
     1c6:	1c f4       	brge	.+6      	; 0x1ce <writeregval+0x128>
		__ticks = 1;
     1c8:	81 e0       	ldi	r24, 0x01	; 1
     1ca:	8c 8b       	std	Y+20, r24	; 0x14
     1cc:	b6 c0       	rjmp	.+364    	; 0x33a <writeregval+0x294>
	else if (__tmp2 > 65535)
     1ce:	20 e0       	ldi	r18, 0x00	; 0
     1d0:	3f ef       	ldi	r19, 0xFF	; 255
     1d2:	4f e7       	ldi	r20, 0x7F	; 127
     1d4:	57 e4       	ldi	r21, 0x47	; 71
     1d6:	68 89       	ldd	r22, Y+16	; 0x10
     1d8:	79 89       	ldd	r23, Y+17	; 0x11
     1da:	8a 89       	ldd	r24, Y+18	; 0x12
     1dc:	9b 89       	ldd	r25, Y+19	; 0x13
     1de:	0e 94 77 0e 	call	0x1cee	; 0x1cee <__gesf2>
     1e2:	18 16       	cp	r1, r24
     1e4:	0c f0       	brlt	.+2      	; 0x1e8 <writeregval+0x142>
     1e6:	7f c0       	rjmp	.+254    	; 0x2e6 <writeregval+0x240>
	{
		_delay_ms(__us / 1000.0);
     1e8:	20 e0       	ldi	r18, 0x00	; 0
     1ea:	30 e0       	ldi	r19, 0x00	; 0
     1ec:	4a e7       	ldi	r20, 0x7A	; 122
     1ee:	54 e4       	ldi	r21, 0x44	; 68
     1f0:	68 85       	ldd	r22, Y+8	; 0x08
     1f2:	79 85       	ldd	r23, Y+9	; 0x09
     1f4:	8a 85       	ldd	r24, Y+10	; 0x0a
     1f6:	9b 85       	ldd	r25, Y+11	; 0x0b
     1f8:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <__divsf3>
     1fc:	dc 01       	movw	r26, r24
     1fe:	cb 01       	movw	r24, r22
     200:	8d 8b       	std	Y+21, r24	; 0x15
     202:	9e 8b       	std	Y+22, r25	; 0x16
     204:	af 8b       	std	Y+23, r26	; 0x17
     206:	b8 8f       	std	Y+24, r27	; 0x18

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     208:	20 e0       	ldi	r18, 0x00	; 0
     20a:	30 e0       	ldi	r19, 0x00	; 0
     20c:	4a e7       	ldi	r20, 0x7A	; 122
     20e:	55 e4       	ldi	r21, 0x45	; 69
     210:	6d 89       	ldd	r22, Y+21	; 0x15
     212:	7e 89       	ldd	r23, Y+22	; 0x16
     214:	8f 89       	ldd	r24, Y+23	; 0x17
     216:	98 8d       	ldd	r25, Y+24	; 0x18
     218:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <__mulsf3>
     21c:	dc 01       	movw	r26, r24
     21e:	cb 01       	movw	r24, r22
     220:	89 8f       	std	Y+25, r24	; 0x19
     222:	9a 8f       	std	Y+26, r25	; 0x1a
     224:	ab 8f       	std	Y+27, r26	; 0x1b
     226:	bc 8f       	std	Y+28, r27	; 0x1c
	if (__tmp < 1.0)
     228:	20 e0       	ldi	r18, 0x00	; 0
     22a:	30 e0       	ldi	r19, 0x00	; 0
     22c:	40 e8       	ldi	r20, 0x80	; 128
     22e:	5f e3       	ldi	r21, 0x3F	; 63
     230:	69 8d       	ldd	r22, Y+25	; 0x19
     232:	7a 8d       	ldd	r23, Y+26	; 0x1a
     234:	8b 8d       	ldd	r24, Y+27	; 0x1b
     236:	9c 8d       	ldd	r25, Y+28	; 0x1c
     238:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <__cmpsf2>
     23c:	88 23       	and	r24, r24
     23e:	2c f4       	brge	.+10     	; 0x24a <writeregval+0x1a4>
		__ticks = 1;
     240:	81 e0       	ldi	r24, 0x01	; 1
     242:	90 e0       	ldi	r25, 0x00	; 0
     244:	9e 8f       	std	Y+30, r25	; 0x1e
     246:	8d 8f       	std	Y+29, r24	; 0x1d
     248:	41 c0       	rjmp	.+130    	; 0x2cc <writeregval+0x226>
	else if (__tmp > 65535)
     24a:	20 e0       	ldi	r18, 0x00	; 0
     24c:	3f ef       	ldi	r19, 0xFF	; 255
     24e:	4f e7       	ldi	r20, 0x7F	; 127
     250:	57 e4       	ldi	r21, 0x47	; 71
     252:	69 8d       	ldd	r22, Y+25	; 0x19
     254:	7a 8d       	ldd	r23, Y+26	; 0x1a
     256:	8b 8d       	ldd	r24, Y+27	; 0x1b
     258:	9c 8d       	ldd	r25, Y+28	; 0x1c
     25a:	0e 94 77 0e 	call	0x1cee	; 0x1cee <__gesf2>
     25e:	18 16       	cp	r1, r24
     260:	5c f5       	brge	.+86     	; 0x2b8 <writeregval+0x212>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     262:	20 e0       	ldi	r18, 0x00	; 0
     264:	30 e0       	ldi	r19, 0x00	; 0
     266:	40 e2       	ldi	r20, 0x20	; 32
     268:	51 e4       	ldi	r21, 0x41	; 65
     26a:	6d 89       	ldd	r22, Y+21	; 0x15
     26c:	7e 89       	ldd	r23, Y+22	; 0x16
     26e:	8f 89       	ldd	r24, Y+23	; 0x17
     270:	98 8d       	ldd	r25, Y+24	; 0x18
     272:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <__mulsf3>
     276:	dc 01       	movw	r26, r24
     278:	cb 01       	movw	r24, r22
     27a:	bc 01       	movw	r22, r24
     27c:	cd 01       	movw	r24, r26
     27e:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <__fixunssfsi>
     282:	dc 01       	movw	r26, r24
     284:	cb 01       	movw	r24, r22
     286:	9e 8f       	std	Y+30, r25	; 0x1e
     288:	8d 8f       	std	Y+29, r24	; 0x1d
     28a:	0f c0       	rjmp	.+30     	; 0x2aa <writeregval+0x204>
     28c:	80 e9       	ldi	r24, 0x90	; 144
     28e:	91 e0       	ldi	r25, 0x01	; 1
     290:	98 a3       	std	Y+32, r25	; 0x20
     292:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     294:	8f 8d       	ldd	r24, Y+31	; 0x1f
     296:	98 a1       	ldd	r25, Y+32	; 0x20
     298:	01 97       	sbiw	r24, 0x01	; 1
     29a:	f1 f7       	brne	.-4      	; 0x298 <writeregval+0x1f2>
     29c:	98 a3       	std	Y+32, r25	; 0x20
     29e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     2a0:	8d 8d       	ldd	r24, Y+29	; 0x1d
     2a2:	9e 8d       	ldd	r25, Y+30	; 0x1e
     2a4:	01 97       	sbiw	r24, 0x01	; 1
     2a6:	9e 8f       	std	Y+30, r25	; 0x1e
     2a8:	8d 8f       	std	Y+29, r24	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     2aa:	8d 8d       	ldd	r24, Y+29	; 0x1d
     2ac:	9e 8d       	ldd	r25, Y+30	; 0x1e
     2ae:	89 2b       	or	r24, r25
     2b0:	69 f7       	brne	.-38     	; 0x28c <writeregval+0x1e6>
     2b2:	88 a5       	ldd	r24, Y+40	; 0x28
     2b4:	8c 8b       	std	Y+20, r24	; 0x14
     2b6:	41 c0       	rjmp	.+130    	; 0x33a <writeregval+0x294>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     2b8:	69 8d       	ldd	r22, Y+25	; 0x19
     2ba:	7a 8d       	ldd	r23, Y+26	; 0x1a
     2bc:	8b 8d       	ldd	r24, Y+27	; 0x1b
     2be:	9c 8d       	ldd	r25, Y+28	; 0x1c
     2c0:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <__fixunssfsi>
     2c4:	dc 01       	movw	r26, r24
     2c6:	cb 01       	movw	r24, r22
     2c8:	9e 8f       	std	Y+30, r25	; 0x1e
     2ca:	8d 8f       	std	Y+29, r24	; 0x1d
     2cc:	8d 8d       	ldd	r24, Y+29	; 0x1d
     2ce:	9e 8d       	ldd	r25, Y+30	; 0x1e
     2d0:	9a a3       	std	Y+34, r25	; 0x22
     2d2:	89 a3       	std	Y+33, r24	; 0x21
     2d4:	89 a1       	ldd	r24, Y+33	; 0x21
     2d6:	9a a1       	ldd	r25, Y+34	; 0x22
     2d8:	01 97       	sbiw	r24, 0x01	; 1
     2da:	f1 f7       	brne	.-4      	; 0x2d8 <writeregval+0x232>
     2dc:	9a a3       	std	Y+34, r25	; 0x22
     2de:	89 a3       	std	Y+33, r24	; 0x21
     2e0:	88 a5       	ldd	r24, Y+40	; 0x28
     2e2:	8c 8b       	std	Y+20, r24	; 0x14
     2e4:	2a c0       	rjmp	.+84     	; 0x33a <writeregval+0x294>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     2e6:	20 e0       	ldi	r18, 0x00	; 0
     2e8:	30 e0       	ldi	r19, 0x00	; 0
     2ea:	4f e7       	ldi	r20, 0x7F	; 127
     2ec:	53 e4       	ldi	r21, 0x43	; 67
     2ee:	6c 85       	ldd	r22, Y+12	; 0x0c
     2f0:	7d 85       	ldd	r23, Y+13	; 0x0d
     2f2:	8e 85       	ldd	r24, Y+14	; 0x0e
     2f4:	9f 85       	ldd	r25, Y+15	; 0x0f
     2f6:	0e 94 77 0e 	call	0x1cee	; 0x1cee <__gesf2>
     2fa:	18 16       	cp	r1, r24
     2fc:	ac f4       	brge	.+42     	; 0x328 <writeregval+0x282>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     2fe:	68 89       	ldd	r22, Y+16	; 0x10
     300:	79 89       	ldd	r23, Y+17	; 0x11
     302:	8a 89       	ldd	r24, Y+18	; 0x12
     304:	9b 89       	ldd	r25, Y+19	; 0x13
     306:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <__fixunssfsi>
     30a:	dc 01       	movw	r26, r24
     30c:	cb 01       	movw	r24, r22
     30e:	9c a3       	std	Y+36, r25	; 0x24
     310:	8b a3       	std	Y+35, r24	; 0x23
     312:	8b a1       	ldd	r24, Y+35	; 0x23
     314:	9c a1       	ldd	r25, Y+36	; 0x24
     316:	9e a3       	std	Y+38, r25	; 0x26
     318:	8d a3       	std	Y+37, r24	; 0x25
     31a:	8d a1       	ldd	r24, Y+37	; 0x25
     31c:	9e a1       	ldd	r25, Y+38	; 0x26
     31e:	01 97       	sbiw	r24, 0x01	; 1
     320:	f1 f7       	brne	.-4      	; 0x31e <writeregval+0x278>
     322:	9e a3       	std	Y+38, r25	; 0x26
     324:	8d a3       	std	Y+37, r24	; 0x25
     326:	0f c0       	rjmp	.+30     	; 0x346 <writeregval+0x2a0>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     328:	6c 85       	ldd	r22, Y+12	; 0x0c
     32a:	7d 85       	ldd	r23, Y+13	; 0x0d
     32c:	8e 85       	ldd	r24, Y+14	; 0x0e
     32e:	9f 85       	ldd	r25, Y+15	; 0x0f
     330:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <__fixunssfsi>
     334:	dc 01       	movw	r26, r24
     336:	cb 01       	movw	r24, r22
     338:	8c 8b       	std	Y+20, r24	; 0x14
     33a:	8c 89       	ldd	r24, Y+20	; 0x14
     33c:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     33e:	8f a1       	ldd	r24, Y+39	; 0x27
     340:	8a 95       	dec	r24
     342:	f1 f7       	brne	.-4      	; 0x340 <writeregval+0x29a>
     344:	8f a3       	std	Y+39, r24	; 0x27
    unsigned char nextbit;
    unsigned long regmask = 0x1000000;

    DDRD = (1<<3);
    PORTD = (0<<3);
    for(i=0;i < 25;i++){
     346:	89 81       	ldd	r24, Y+1	; 0x01
     348:	9a 81       	ldd	r25, Y+2	; 0x02
     34a:	01 96       	adiw	r24, 0x01	; 1
     34c:	9a 83       	std	Y+2, r25	; 0x02
     34e:	89 83       	std	Y+1, r24	; 0x01
     350:	89 81       	ldd	r24, Y+1	; 0x01
     352:	9a 81       	ldd	r25, Y+2	; 0x02
     354:	49 97       	sbiw	r24, 0x19	; 25
     356:	0c f4       	brge	.+2      	; 0x35a <writeregval+0x2b4>
     358:	cf ce       	rjmp	.-610    	; 0xf8 <writeregval+0x52>
        //_delay_ms(100);
        PORTD = (nextbit<<3);

        _delay_us(100);
    }
    PORTD = (0<<3);
     35a:	8b e2       	ldi	r24, 0x2B	; 43
     35c:	90 e0       	ldi	r25, 0x00	; 0
     35e:	fc 01       	movw	r30, r24
     360:	10 82       	st	Z, r1
     362:	80 e0       	ldi	r24, 0x00	; 0
     364:	90 e0       	ldi	r25, 0x00	; 0
     366:	a6 e1       	ldi	r26, 0x16	; 22
     368:	b4 e4       	ldi	r27, 0x44	; 68
     36a:	89 a7       	std	Y+41, r24	; 0x29
     36c:	9a a7       	std	Y+42, r25	; 0x2a
     36e:	ab a7       	std	Y+43, r26	; 0x2b
     370:	bc a7       	std	Y+44, r27	; 0x2c
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
     372:	2b ea       	ldi	r18, 0xAB	; 171
     374:	3a ea       	ldi	r19, 0xAA	; 170
     376:	4a ea       	ldi	r20, 0xAA	; 170
     378:	50 e4       	ldi	r21, 0x40	; 64
     37a:	69 a5       	ldd	r22, Y+41	; 0x29
     37c:	7a a5       	ldd	r23, Y+42	; 0x2a
     37e:	8b a5       	ldd	r24, Y+43	; 0x2b
     380:	9c a5       	ldd	r25, Y+44	; 0x2c
     382:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <__mulsf3>
     386:	dc 01       	movw	r26, r24
     388:	cb 01       	movw	r24, r22
     38a:	8d a7       	std	Y+45, r24	; 0x2d
     38c:	9e a7       	std	Y+46, r25	; 0x2e
     38e:	af a7       	std	Y+47, r26	; 0x2f
     390:	b8 ab       	std	Y+48, r27	; 0x30
	__tmp2 = ((F_CPU) / 4e6) * __us;
     392:	20 e0       	ldi	r18, 0x00	; 0
     394:	30 e0       	ldi	r19, 0x00	; 0
     396:	40 e8       	ldi	r20, 0x80	; 128
     398:	50 e4       	ldi	r21, 0x40	; 64
     39a:	69 a5       	ldd	r22, Y+41	; 0x29
     39c:	7a a5       	ldd	r23, Y+42	; 0x2a
     39e:	8b a5       	ldd	r24, Y+43	; 0x2b
     3a0:	9c a5       	ldd	r25, Y+44	; 0x2c
     3a2:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <__mulsf3>
     3a6:	dc 01       	movw	r26, r24
     3a8:	cb 01       	movw	r24, r22
     3aa:	89 ab       	std	Y+49, r24	; 0x31
     3ac:	9a ab       	std	Y+50, r25	; 0x32
     3ae:	ab ab       	std	Y+51, r26	; 0x33
     3b0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     3b2:	20 e0       	ldi	r18, 0x00	; 0
     3b4:	30 e0       	ldi	r19, 0x00	; 0
     3b6:	40 e8       	ldi	r20, 0x80	; 128
     3b8:	5f e3       	ldi	r21, 0x3F	; 63
     3ba:	6d a5       	ldd	r22, Y+45	; 0x2d
     3bc:	7e a5       	ldd	r23, Y+46	; 0x2e
     3be:	8f a5       	ldd	r24, Y+47	; 0x2f
     3c0:	98 a9       	ldd	r25, Y+48	; 0x30
     3c2:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <__cmpsf2>
     3c6:	88 23       	and	r24, r24
     3c8:	1c f4       	brge	.+6      	; 0x3d0 <writeregval+0x32a>
		__ticks = 1;
     3ca:	81 e0       	ldi	r24, 0x01	; 1
     3cc:	8d ab       	std	Y+53, r24	; 0x35
     3ce:	de c0       	rjmp	.+444    	; 0x58c <__LOCK_REGION_LENGTH__+0x18c>
	else if (__tmp2 > 65535)
     3d0:	20 e0       	ldi	r18, 0x00	; 0
     3d2:	3f ef       	ldi	r19, 0xFF	; 255
     3d4:	4f e7       	ldi	r20, 0x7F	; 127
     3d6:	57 e4       	ldi	r21, 0x47	; 71
     3d8:	69 a9       	ldd	r22, Y+49	; 0x31
     3da:	7a a9       	ldd	r23, Y+50	; 0x32
     3dc:	8b a9       	ldd	r24, Y+51	; 0x33
     3de:	9c a9       	ldd	r25, Y+52	; 0x34
     3e0:	0e 94 77 0e 	call	0x1cee	; 0x1cee <__gesf2>
     3e4:	18 16       	cp	r1, r24
     3e6:	0c f0       	brlt	.+2      	; 0x3ea <writeregval+0x344>
     3e8:	93 c0       	rjmp	.+294    	; 0x510 <__LOCK_REGION_LENGTH__+0x110>
	{
		_delay_ms(__us / 1000.0);
     3ea:	20 e0       	ldi	r18, 0x00	; 0
     3ec:	30 e0       	ldi	r19, 0x00	; 0
     3ee:	4a e7       	ldi	r20, 0x7A	; 122
     3f0:	54 e4       	ldi	r21, 0x44	; 68
     3f2:	69 a5       	ldd	r22, Y+41	; 0x29
     3f4:	7a a5       	ldd	r23, Y+42	; 0x2a
     3f6:	8b a5       	ldd	r24, Y+43	; 0x2b
     3f8:	9c a5       	ldd	r25, Y+44	; 0x2c
     3fa:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <__divsf3>
     3fe:	dc 01       	movw	r26, r24
     400:	cb 01       	movw	r24, r22
     402:	8e ab       	std	Y+54, r24	; 0x36
     404:	9f ab       	std	Y+55, r25	; 0x37
     406:	a8 af       	std	Y+56, r26	; 0x38
     408:	b9 af       	std	Y+57, r27	; 0x39

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     40a:	20 e0       	ldi	r18, 0x00	; 0
     40c:	30 e0       	ldi	r19, 0x00	; 0
     40e:	4a e7       	ldi	r20, 0x7A	; 122
     410:	55 e4       	ldi	r21, 0x45	; 69
     412:	6e a9       	ldd	r22, Y+54	; 0x36
     414:	7f a9       	ldd	r23, Y+55	; 0x37
     416:	88 ad       	ldd	r24, Y+56	; 0x38
     418:	99 ad       	ldd	r25, Y+57	; 0x39
     41a:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <__mulsf3>
     41e:	dc 01       	movw	r26, r24
     420:	cb 01       	movw	r24, r22
     422:	8a af       	std	Y+58, r24	; 0x3a
     424:	9b af       	std	Y+59, r25	; 0x3b
     426:	ac af       	std	Y+60, r26	; 0x3c
     428:	bd af       	std	Y+61, r27	; 0x3d
	if (__tmp < 1.0)
     42a:	20 e0       	ldi	r18, 0x00	; 0
     42c:	30 e0       	ldi	r19, 0x00	; 0
     42e:	40 e8       	ldi	r20, 0x80	; 128
     430:	5f e3       	ldi	r21, 0x3F	; 63
     432:	6a ad       	ldd	r22, Y+58	; 0x3a
     434:	7b ad       	ldd	r23, Y+59	; 0x3b
     436:	8c ad       	ldd	r24, Y+60	; 0x3c
     438:	9d ad       	ldd	r25, Y+61	; 0x3d
     43a:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <__cmpsf2>
     43e:	88 23       	and	r24, r24
     440:	2c f4       	brge	.+10     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
		__ticks = 1;
     442:	81 e0       	ldi	r24, 0x01	; 1
     444:	90 e0       	ldi	r25, 0x00	; 0
     446:	9f af       	std	Y+63, r25	; 0x3f
     448:	8e af       	std	Y+62, r24	; 0x3e
     44a:	4b c0       	rjmp	.+150    	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
	else if (__tmp > 65535)
     44c:	20 e0       	ldi	r18, 0x00	; 0
     44e:	3f ef       	ldi	r19, 0xFF	; 255
     450:	4f e7       	ldi	r20, 0x7F	; 127
     452:	57 e4       	ldi	r21, 0x47	; 71
     454:	6a ad       	ldd	r22, Y+58	; 0x3a
     456:	7b ad       	ldd	r23, Y+59	; 0x3b
     458:	8c ad       	ldd	r24, Y+60	; 0x3c
     45a:	9d ad       	ldd	r25, Y+61	; 0x3d
     45c:	0e 94 77 0e 	call	0x1cee	; 0x1cee <__gesf2>
     460:	18 16       	cp	r1, r24
     462:	ac f5       	brge	.+106    	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     464:	20 e0       	ldi	r18, 0x00	; 0
     466:	30 e0       	ldi	r19, 0x00	; 0
     468:	40 e2       	ldi	r20, 0x20	; 32
     46a:	51 e4       	ldi	r21, 0x41	; 65
     46c:	6e a9       	ldd	r22, Y+54	; 0x36
     46e:	7f a9       	ldd	r23, Y+55	; 0x37
     470:	88 ad       	ldd	r24, Y+56	; 0x38
     472:	99 ad       	ldd	r25, Y+57	; 0x39
     474:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <__mulsf3>
     478:	dc 01       	movw	r26, r24
     47a:	cb 01       	movw	r24, r22
     47c:	bc 01       	movw	r22, r24
     47e:	cd 01       	movw	r24, r26
     480:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <__fixunssfsi>
     484:	dc 01       	movw	r26, r24
     486:	cb 01       	movw	r24, r22
     488:	9f af       	std	Y+63, r25	; 0x3f
     48a:	8e af       	std	Y+62, r24	; 0x3e
     48c:	1b c0       	rjmp	.+54     	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
     48e:	ce 01       	movw	r24, r28
     490:	80 5c       	subi	r24, 0xC0	; 192
     492:	9f 4f       	sbci	r25, 0xFF	; 255
     494:	20 e9       	ldi	r18, 0x90	; 144
     496:	31 e0       	ldi	r19, 0x01	; 1
     498:	fc 01       	movw	r30, r24
     49a:	31 83       	std	Z+1, r19	; 0x01
     49c:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     49e:	ce 01       	movw	r24, r28
     4a0:	80 5c       	subi	r24, 0xC0	; 192
     4a2:	9f 4f       	sbci	r25, 0xFF	; 255
     4a4:	fc 01       	movw	r30, r24
     4a6:	80 81       	ld	r24, Z
     4a8:	91 81       	ldd	r25, Z+1	; 0x01
     4aa:	01 97       	sbiw	r24, 0x01	; 1
     4ac:	f1 f7       	brne	.-4      	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
     4ae:	9e 01       	movw	r18, r28
     4b0:	20 5c       	subi	r18, 0xC0	; 192
     4b2:	3f 4f       	sbci	r19, 0xFF	; 255
     4b4:	f9 01       	movw	r30, r18
     4b6:	91 83       	std	Z+1, r25	; 0x01
     4b8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     4ba:	8e ad       	ldd	r24, Y+62	; 0x3e
     4bc:	9f ad       	ldd	r25, Y+63	; 0x3f
     4be:	01 97       	sbiw	r24, 0x01	; 1
     4c0:	9f af       	std	Y+63, r25	; 0x3f
     4c2:	8e af       	std	Y+62, r24	; 0x3e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     4c4:	8e ad       	ldd	r24, Y+62	; 0x3e
     4c6:	9f ad       	ldd	r25, Y+63	; 0x3f
     4c8:	89 2b       	or	r24, r25
     4ca:	09 f7       	brne	.-62     	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
     4cc:	5f c0       	rjmp	.+190    	; 0x58c <__LOCK_REGION_LENGTH__+0x18c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     4ce:	6a ad       	ldd	r22, Y+58	; 0x3a
     4d0:	7b ad       	ldd	r23, Y+59	; 0x3b
     4d2:	8c ad       	ldd	r24, Y+60	; 0x3c
     4d4:	9d ad       	ldd	r25, Y+61	; 0x3d
     4d6:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <__fixunssfsi>
     4da:	dc 01       	movw	r26, r24
     4dc:	cb 01       	movw	r24, r22
     4de:	9f af       	std	Y+63, r25	; 0x3f
     4e0:	8e af       	std	Y+62, r24	; 0x3e
     4e2:	ce 01       	movw	r24, r28
     4e4:	8e 5b       	subi	r24, 0xBE	; 190
     4e6:	9f 4f       	sbci	r25, 0xFF	; 255
     4e8:	2e ad       	ldd	r18, Y+62	; 0x3e
     4ea:	3f ad       	ldd	r19, Y+63	; 0x3f
     4ec:	fc 01       	movw	r30, r24
     4ee:	31 83       	std	Z+1, r19	; 0x01
     4f0:	20 83       	st	Z, r18
     4f2:	ce 01       	movw	r24, r28
     4f4:	8e 5b       	subi	r24, 0xBE	; 190
     4f6:	9f 4f       	sbci	r25, 0xFF	; 255
     4f8:	fc 01       	movw	r30, r24
     4fa:	80 81       	ld	r24, Z
     4fc:	91 81       	ldd	r25, Z+1	; 0x01
     4fe:	01 97       	sbiw	r24, 0x01	; 1
     500:	f1 f7       	brne	.-4      	; 0x4fe <__LOCK_REGION_LENGTH__+0xfe>
     502:	9e 01       	movw	r18, r28
     504:	2e 5b       	subi	r18, 0xBE	; 190
     506:	3f 4f       	sbci	r19, 0xFF	; 255
     508:	f9 01       	movw	r30, r18
     50a:	91 83       	std	Z+1, r25	; 0x01
     50c:	80 83       	st	Z, r24
     50e:	3e c0       	rjmp	.+124    	; 0x58c <__LOCK_REGION_LENGTH__+0x18c>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     510:	20 e0       	ldi	r18, 0x00	; 0
     512:	30 e0       	ldi	r19, 0x00	; 0
     514:	4f e7       	ldi	r20, 0x7F	; 127
     516:	53 e4       	ldi	r21, 0x43	; 67
     518:	6d a5       	ldd	r22, Y+45	; 0x2d
     51a:	7e a5       	ldd	r23, Y+46	; 0x2e
     51c:	8f a5       	ldd	r24, Y+47	; 0x2f
     51e:	98 a9       	ldd	r25, Y+48	; 0x30
     520:	0e 94 77 0e 	call	0x1cee	; 0x1cee <__gesf2>
     524:	18 16       	cp	r1, r24
     526:	4c f5       	brge	.+82     	; 0x57a <__LOCK_REGION_LENGTH__+0x17a>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     528:	8e 01       	movw	r16, r28
     52a:	0c 5b       	subi	r16, 0xBC	; 188
     52c:	1f 4f       	sbci	r17, 0xFF	; 255
     52e:	69 a9       	ldd	r22, Y+49	; 0x31
     530:	7a a9       	ldd	r23, Y+50	; 0x32
     532:	8b a9       	ldd	r24, Y+51	; 0x33
     534:	9c a9       	ldd	r25, Y+52	; 0x34
     536:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <__fixunssfsi>
     53a:	dc 01       	movw	r26, r24
     53c:	cb 01       	movw	r24, r22
     53e:	f8 01       	movw	r30, r16
     540:	91 83       	std	Z+1, r25	; 0x01
     542:	80 83       	st	Z, r24
     544:	ce 01       	movw	r24, r28
     546:	8a 5b       	subi	r24, 0xBA	; 186
     548:	9f 4f       	sbci	r25, 0xFF	; 255
     54a:	9e 01       	movw	r18, r28
     54c:	2c 5b       	subi	r18, 0xBC	; 188
     54e:	3f 4f       	sbci	r19, 0xFF	; 255
     550:	f9 01       	movw	r30, r18
     552:	20 81       	ld	r18, Z
     554:	31 81       	ldd	r19, Z+1	; 0x01
     556:	fc 01       	movw	r30, r24
     558:	31 83       	std	Z+1, r19	; 0x01
     55a:	20 83       	st	Z, r18
     55c:	ce 01       	movw	r24, r28
     55e:	8a 5b       	subi	r24, 0xBA	; 186
     560:	9f 4f       	sbci	r25, 0xFF	; 255
     562:	fc 01       	movw	r30, r24
     564:	80 81       	ld	r24, Z
     566:	91 81       	ldd	r25, Z+1	; 0x01
     568:	01 97       	sbiw	r24, 0x01	; 1
     56a:	f1 f7       	brne	.-4      	; 0x568 <__LOCK_REGION_LENGTH__+0x168>
     56c:	9e 01       	movw	r18, r28
     56e:	2a 5b       	subi	r18, 0xBA	; 186
     570:	3f 4f       	sbci	r19, 0xFF	; 255
     572:	f9 01       	movw	r30, r18
     574:	91 83       	std	Z+1, r25	; 0x01
     576:	80 83       	st	Z, r24
     578:	1c c0       	rjmp	.+56     	; 0x5b2 <__LOCK_REGION_LENGTH__+0x1b2>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     57a:	6d a5       	ldd	r22, Y+45	; 0x2d
     57c:	7e a5       	ldd	r23, Y+46	; 0x2e
     57e:	8f a5       	ldd	r24, Y+47	; 0x2f
     580:	98 a9       	ldd	r25, Y+48	; 0x30
     582:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <__fixunssfsi>
     586:	dc 01       	movw	r26, r24
     588:	cb 01       	movw	r24, r22
     58a:	8d ab       	std	Y+53, r24	; 0x35
     58c:	ce 01       	movw	r24, r28
     58e:	88 5b       	subi	r24, 0xB8	; 184
     590:	9f 4f       	sbci	r25, 0xFF	; 255
     592:	2d a9       	ldd	r18, Y+53	; 0x35
     594:	fc 01       	movw	r30, r24
     596:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     598:	ce 01       	movw	r24, r28
     59a:	88 5b       	subi	r24, 0xB8	; 184
     59c:	9f 4f       	sbci	r25, 0xFF	; 255
     59e:	fc 01       	movw	r30, r24
     5a0:	80 81       	ld	r24, Z
     5a2:	28 2f       	mov	r18, r24
     5a4:	2a 95       	dec	r18
     5a6:	f1 f7       	brne	.-4      	; 0x5a4 <__LOCK_REGION_LENGTH__+0x1a4>
     5a8:	ce 01       	movw	r24, r28
     5aa:	88 5b       	subi	r24, 0xB8	; 184
     5ac:	9f 4f       	sbci	r25, 0xFF	; 255
     5ae:	fc 01       	movw	r30, r24
     5b0:	20 83       	st	Z, r18
    _delay_us(600);
    puts("writed!");
     5b2:	8c e1       	ldi	r24, 0x1C	; 28
     5b4:	91 e0       	ldi	r25, 0x01	; 1
     5b6:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <puts>
}
     5ba:	c4 5b       	subi	r28, 0xB4	; 180
     5bc:	df 4f       	sbci	r29, 0xFF	; 255
     5be:	0f b6       	in	r0, 0x3f	; 63
     5c0:	f8 94       	cli
     5c2:	de bf       	out	0x3e, r29	; 62
     5c4:	0f be       	out	0x3f, r0	; 63
     5c6:	cd bf       	out	0x3d, r28	; 61
     5c8:	df 91       	pop	r29
     5ca:	cf 91       	pop	r28
     5cc:	1f 91       	pop	r17
     5ce:	0f 91       	pop	r16
     5d0:	08 95       	ret

000005d2 <readlowpowerpyro>:


void readlowpowerpyro(void) {
     5d2:	0f 93       	push	r16
     5d4:	1f 93       	push	r17
     5d6:	cf 93       	push	r28
     5d8:	df 93       	push	r29
     5da:	cd b7       	in	r28, 0x3d	; 61
     5dc:	de b7       	in	r29, 0x3e	; 62
     5de:	c0 5b       	subi	r28, 0xB0	; 176
     5e0:	d1 09       	sbc	r29, r1
     5e2:	0f b6       	in	r0, 0x3f	; 63
     5e4:	f8 94       	cli
     5e6:	de bf       	out	0x3e, r29	; 62
     5e8:	0f be       	out	0x3f, r0	; 63
     5ea:	cd bf       	out	0x3d, r28	; 61
    int i;
    unsigned int uibitmask;
    unsigned long ulbitmask;
    PORTD = (1<<2); // Set DL = High, to force fast uC controlled DL read out
     5ec:	8b e2       	ldi	r24, 0x2B	; 43
     5ee:	90 e0       	ldi	r25, 0x00	; 0
     5f0:	24 e0       	ldi	r18, 0x04	; 4
     5f2:	fc 01       	movw	r30, r24
     5f4:	20 83       	st	Z, r18
    DDRD = (1<<2); // Configure PORT DL as Output
     5f6:	8a e2       	ldi	r24, 0x2A	; 42
     5f8:	90 e0       	ldi	r25, 0x00	; 0
     5fa:	24 e0       	ldi	r18, 0x04	; 4
     5fc:	fc 01       	movw	r30, r24
     5fe:	20 83       	st	Z, r18
     600:	80 e0       	ldi	r24, 0x00	; 0
     602:	90 e0       	ldi	r25, 0x00	; 0
     604:	a6 e1       	ldi	r26, 0x16	; 22
     606:	b3 e4       	ldi	r27, 0x43	; 67
     608:	89 87       	std	Y+9, r24	; 0x09
     60a:	9a 87       	std	Y+10, r25	; 0x0a
     60c:	ab 87       	std	Y+11, r26	; 0x0b
     60e:	bc 87       	std	Y+12, r27	; 0x0c
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
     610:	2b ea       	ldi	r18, 0xAB	; 171
     612:	3a ea       	ldi	r19, 0xAA	; 170
     614:	4a ea       	ldi	r20, 0xAA	; 170
     616:	50 e4       	ldi	r21, 0x40	; 64
     618:	69 85       	ldd	r22, Y+9	; 0x09
     61a:	7a 85       	ldd	r23, Y+10	; 0x0a
     61c:	8b 85       	ldd	r24, Y+11	; 0x0b
     61e:	9c 85       	ldd	r25, Y+12	; 0x0c
     620:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <__mulsf3>
     624:	dc 01       	movw	r26, r24
     626:	cb 01       	movw	r24, r22
     628:	8d 87       	std	Y+13, r24	; 0x0d
     62a:	9e 87       	std	Y+14, r25	; 0x0e
     62c:	af 87       	std	Y+15, r26	; 0x0f
     62e:	b8 8b       	std	Y+16, r27	; 0x10
	__tmp2 = ((F_CPU) / 4e6) * __us;
     630:	20 e0       	ldi	r18, 0x00	; 0
     632:	30 e0       	ldi	r19, 0x00	; 0
     634:	40 e8       	ldi	r20, 0x80	; 128
     636:	50 e4       	ldi	r21, 0x40	; 64
     638:	69 85       	ldd	r22, Y+9	; 0x09
     63a:	7a 85       	ldd	r23, Y+10	; 0x0a
     63c:	8b 85       	ldd	r24, Y+11	; 0x0b
     63e:	9c 85       	ldd	r25, Y+12	; 0x0c
     640:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <__mulsf3>
     644:	dc 01       	movw	r26, r24
     646:	cb 01       	movw	r24, r22
     648:	89 8b       	std	Y+17, r24	; 0x11
     64a:	9a 8b       	std	Y+18, r25	; 0x12
     64c:	ab 8b       	std	Y+19, r26	; 0x13
     64e:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
     650:	20 e0       	ldi	r18, 0x00	; 0
     652:	30 e0       	ldi	r19, 0x00	; 0
     654:	40 e8       	ldi	r20, 0x80	; 128
     656:	5f e3       	ldi	r21, 0x3F	; 63
     658:	6d 85       	ldd	r22, Y+13	; 0x0d
     65a:	7e 85       	ldd	r23, Y+14	; 0x0e
     65c:	8f 85       	ldd	r24, Y+15	; 0x0f
     65e:	98 89       	ldd	r25, Y+16	; 0x10
     660:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <__cmpsf2>
     664:	88 23       	and	r24, r24
     666:	1c f4       	brge	.+6      	; 0x66e <readlowpowerpyro+0x9c>
		__ticks = 1;
     668:	81 e0       	ldi	r24, 0x01	; 1
     66a:	8d 8b       	std	Y+21, r24	; 0x15
     66c:	b2 c0       	rjmp	.+356    	; 0x7d2 <readlowpowerpyro+0x200>
	else if (__tmp2 > 65535)
     66e:	20 e0       	ldi	r18, 0x00	; 0
     670:	3f ef       	ldi	r19, 0xFF	; 255
     672:	4f e7       	ldi	r20, 0x7F	; 127
     674:	57 e4       	ldi	r21, 0x47	; 71
     676:	69 89       	ldd	r22, Y+17	; 0x11
     678:	7a 89       	ldd	r23, Y+18	; 0x12
     67a:	8b 89       	ldd	r24, Y+19	; 0x13
     67c:	9c 89       	ldd	r25, Y+20	; 0x14
     67e:	0e 94 77 0e 	call	0x1cee	; 0x1cee <__gesf2>
     682:	18 16       	cp	r1, r24
     684:	0c f0       	brlt	.+2      	; 0x688 <readlowpowerpyro+0xb6>
     686:	7b c0       	rjmp	.+246    	; 0x77e <readlowpowerpyro+0x1ac>
	{
		_delay_ms(__us / 1000.0);
     688:	20 e0       	ldi	r18, 0x00	; 0
     68a:	30 e0       	ldi	r19, 0x00	; 0
     68c:	4a e7       	ldi	r20, 0x7A	; 122
     68e:	54 e4       	ldi	r21, 0x44	; 68
     690:	69 85       	ldd	r22, Y+9	; 0x09
     692:	7a 85       	ldd	r23, Y+10	; 0x0a
     694:	8b 85       	ldd	r24, Y+11	; 0x0b
     696:	9c 85       	ldd	r25, Y+12	; 0x0c
     698:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <__divsf3>
     69c:	dc 01       	movw	r26, r24
     69e:	cb 01       	movw	r24, r22
     6a0:	8e 8b       	std	Y+22, r24	; 0x16
     6a2:	9f 8b       	std	Y+23, r25	; 0x17
     6a4:	a8 8f       	std	Y+24, r26	; 0x18
     6a6:	b9 8f       	std	Y+25, r27	; 0x19

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     6a8:	20 e0       	ldi	r18, 0x00	; 0
     6aa:	30 e0       	ldi	r19, 0x00	; 0
     6ac:	4a e7       	ldi	r20, 0x7A	; 122
     6ae:	55 e4       	ldi	r21, 0x45	; 69
     6b0:	6e 89       	ldd	r22, Y+22	; 0x16
     6b2:	7f 89       	ldd	r23, Y+23	; 0x17
     6b4:	88 8d       	ldd	r24, Y+24	; 0x18
     6b6:	99 8d       	ldd	r25, Y+25	; 0x19
     6b8:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <__mulsf3>
     6bc:	dc 01       	movw	r26, r24
     6be:	cb 01       	movw	r24, r22
     6c0:	8a 8f       	std	Y+26, r24	; 0x1a
     6c2:	9b 8f       	std	Y+27, r25	; 0x1b
     6c4:	ac 8f       	std	Y+28, r26	; 0x1c
     6c6:	bd 8f       	std	Y+29, r27	; 0x1d
	if (__tmp < 1.0)
     6c8:	20 e0       	ldi	r18, 0x00	; 0
     6ca:	30 e0       	ldi	r19, 0x00	; 0
     6cc:	40 e8       	ldi	r20, 0x80	; 128
     6ce:	5f e3       	ldi	r21, 0x3F	; 63
     6d0:	6a 8d       	ldd	r22, Y+26	; 0x1a
     6d2:	7b 8d       	ldd	r23, Y+27	; 0x1b
     6d4:	8c 8d       	ldd	r24, Y+28	; 0x1c
     6d6:	9d 8d       	ldd	r25, Y+29	; 0x1d
     6d8:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <__cmpsf2>
     6dc:	88 23       	and	r24, r24
     6de:	2c f4       	brge	.+10     	; 0x6ea <readlowpowerpyro+0x118>
		__ticks = 1;
     6e0:	81 e0       	ldi	r24, 0x01	; 1
     6e2:	90 e0       	ldi	r25, 0x00	; 0
     6e4:	9f 8f       	std	Y+31, r25	; 0x1f
     6e6:	8e 8f       	std	Y+30, r24	; 0x1e
     6e8:	3f c0       	rjmp	.+126    	; 0x768 <readlowpowerpyro+0x196>
	else if (__tmp > 65535)
     6ea:	20 e0       	ldi	r18, 0x00	; 0
     6ec:	3f ef       	ldi	r19, 0xFF	; 255
     6ee:	4f e7       	ldi	r20, 0x7F	; 127
     6f0:	57 e4       	ldi	r21, 0x47	; 71
     6f2:	6a 8d       	ldd	r22, Y+26	; 0x1a
     6f4:	7b 8d       	ldd	r23, Y+27	; 0x1b
     6f6:	8c 8d       	ldd	r24, Y+28	; 0x1c
     6f8:	9d 8d       	ldd	r25, Y+29	; 0x1d
     6fa:	0e 94 77 0e 	call	0x1cee	; 0x1cee <__gesf2>
     6fe:	18 16       	cp	r1, r24
     700:	4c f5       	brge	.+82     	; 0x754 <readlowpowerpyro+0x182>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     702:	20 e0       	ldi	r18, 0x00	; 0
     704:	30 e0       	ldi	r19, 0x00	; 0
     706:	40 e2       	ldi	r20, 0x20	; 32
     708:	51 e4       	ldi	r21, 0x41	; 65
     70a:	6e 89       	ldd	r22, Y+22	; 0x16
     70c:	7f 89       	ldd	r23, Y+23	; 0x17
     70e:	88 8d       	ldd	r24, Y+24	; 0x18
     710:	99 8d       	ldd	r25, Y+25	; 0x19
     712:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <__mulsf3>
     716:	dc 01       	movw	r26, r24
     718:	cb 01       	movw	r24, r22
     71a:	bc 01       	movw	r22, r24
     71c:	cd 01       	movw	r24, r26
     71e:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <__fixunssfsi>
     722:	dc 01       	movw	r26, r24
     724:	cb 01       	movw	r24, r22
     726:	9f 8f       	std	Y+31, r25	; 0x1f
     728:	8e 8f       	std	Y+30, r24	; 0x1e
     72a:	0f c0       	rjmp	.+30     	; 0x74a <readlowpowerpyro+0x178>
     72c:	80 e9       	ldi	r24, 0x90	; 144
     72e:	91 e0       	ldi	r25, 0x01	; 1
     730:	99 a3       	std	Y+33, r25	; 0x21
     732:	88 a3       	std	Y+32, r24	; 0x20
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     734:	88 a1       	ldd	r24, Y+32	; 0x20
     736:	99 a1       	ldd	r25, Y+33	; 0x21
     738:	01 97       	sbiw	r24, 0x01	; 1
     73a:	f1 f7       	brne	.-4      	; 0x738 <readlowpowerpyro+0x166>
     73c:	99 a3       	std	Y+33, r25	; 0x21
     73e:	88 a3       	std	Y+32, r24	; 0x20
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     740:	8e 8d       	ldd	r24, Y+30	; 0x1e
     742:	9f 8d       	ldd	r25, Y+31	; 0x1f
     744:	01 97       	sbiw	r24, 0x01	; 1
     746:	9f 8f       	std	Y+31, r25	; 0x1f
     748:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     74a:	8e 8d       	ldd	r24, Y+30	; 0x1e
     74c:	9f 8d       	ldd	r25, Y+31	; 0x1f
     74e:	89 2b       	or	r24, r25
     750:	69 f7       	brne	.-38     	; 0x72c <readlowpowerpyro+0x15a>
     752:	3f c0       	rjmp	.+126    	; 0x7d2 <readlowpowerpyro+0x200>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     754:	6a 8d       	ldd	r22, Y+26	; 0x1a
     756:	7b 8d       	ldd	r23, Y+27	; 0x1b
     758:	8c 8d       	ldd	r24, Y+28	; 0x1c
     75a:	9d 8d       	ldd	r25, Y+29	; 0x1d
     75c:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <__fixunssfsi>
     760:	dc 01       	movw	r26, r24
     762:	cb 01       	movw	r24, r22
     764:	9f 8f       	std	Y+31, r25	; 0x1f
     766:	8e 8f       	std	Y+30, r24	; 0x1e
     768:	8e 8d       	ldd	r24, Y+30	; 0x1e
     76a:	9f 8d       	ldd	r25, Y+31	; 0x1f
     76c:	9b a3       	std	Y+35, r25	; 0x23
     76e:	8a a3       	std	Y+34, r24	; 0x22
     770:	8a a1       	ldd	r24, Y+34	; 0x22
     772:	9b a1       	ldd	r25, Y+35	; 0x23
     774:	01 97       	sbiw	r24, 0x01	; 1
     776:	f1 f7       	brne	.-4      	; 0x774 <readlowpowerpyro+0x1a2>
     778:	9b a3       	std	Y+35, r25	; 0x23
     77a:	8a a3       	std	Y+34, r24	; 0x22
     77c:	2a c0       	rjmp	.+84     	; 0x7d2 <readlowpowerpyro+0x200>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     77e:	20 e0       	ldi	r18, 0x00	; 0
     780:	30 e0       	ldi	r19, 0x00	; 0
     782:	4f e7       	ldi	r20, 0x7F	; 127
     784:	53 e4       	ldi	r21, 0x43	; 67
     786:	6d 85       	ldd	r22, Y+13	; 0x0d
     788:	7e 85       	ldd	r23, Y+14	; 0x0e
     78a:	8f 85       	ldd	r24, Y+15	; 0x0f
     78c:	98 89       	ldd	r25, Y+16	; 0x10
     78e:	0e 94 77 0e 	call	0x1cee	; 0x1cee <__gesf2>
     792:	18 16       	cp	r1, r24
     794:	ac f4       	brge	.+42     	; 0x7c0 <readlowpowerpyro+0x1ee>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     796:	69 89       	ldd	r22, Y+17	; 0x11
     798:	7a 89       	ldd	r23, Y+18	; 0x12
     79a:	8b 89       	ldd	r24, Y+19	; 0x13
     79c:	9c 89       	ldd	r25, Y+20	; 0x14
     79e:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <__fixunssfsi>
     7a2:	dc 01       	movw	r26, r24
     7a4:	cb 01       	movw	r24, r22
     7a6:	9d a3       	std	Y+37, r25	; 0x25
     7a8:	8c a3       	std	Y+36, r24	; 0x24
     7aa:	8c a1       	ldd	r24, Y+36	; 0x24
     7ac:	9d a1       	ldd	r25, Y+37	; 0x25
     7ae:	9f a3       	std	Y+39, r25	; 0x27
     7b0:	8e a3       	std	Y+38, r24	; 0x26
     7b2:	8e a1       	ldd	r24, Y+38	; 0x26
     7b4:	9f a1       	ldd	r25, Y+39	; 0x27
     7b6:	01 97       	sbiw	r24, 0x01	; 1
     7b8:	f1 f7       	brne	.-4      	; 0x7b6 <readlowpowerpyro+0x1e4>
     7ba:	9f a3       	std	Y+39, r25	; 0x27
     7bc:	8e a3       	std	Y+38, r24	; 0x26
     7be:	0f c0       	rjmp	.+30     	; 0x7de <readlowpowerpyro+0x20c>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     7c0:	6d 85       	ldd	r22, Y+13	; 0x0d
     7c2:	7e 85       	ldd	r23, Y+14	; 0x0e
     7c4:	8f 85       	ldd	r24, Y+15	; 0x0f
     7c6:	98 89       	ldd	r25, Y+16	; 0x10
     7c8:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <__fixunssfsi>
     7cc:	dc 01       	movw	r26, r24
     7ce:	cb 01       	movw	r24, r22
     7d0:	8d 8b       	std	Y+21, r24	; 0x15
     7d2:	8d 89       	ldd	r24, Y+21	; 0x15
     7d4:	88 a7       	std	Y+40, r24	; 0x28
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     7d6:	88 a5       	ldd	r24, Y+40	; 0x28
     7d8:	8a 95       	dec	r24
     7da:	f1 f7       	brne	.-4      	; 0x7d8 <readlowpowerpyro+0x206>
     7dc:	88 a7       	std	Y+40, r24	; 0x28
    _delay_us(150);
    // get first 15bit out-off-range and ADC value
    uibitmask = 0x4000; // Set BitPos
     7de:	80 e0       	ldi	r24, 0x00	; 0
     7e0:	90 e4       	ldi	r25, 0x40	; 64
     7e2:	9c 83       	std	Y+4, r25	; 0x04
     7e4:	8b 83       	std	Y+3, r24	; 0x03
    PIRval = 0;
     7e6:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <__data_end+0x1>
     7ea:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <__data_end>
    for (i=0; i < 15; i++){
     7ee:	1a 82       	std	Y+2, r1	; 0x02
     7f0:	19 82       	std	Y+1, r1	; 0x01
     7f2:	f9 c2       	rjmp	.+1522   	; 0xde6 <__stack+0x4e7>
        // create low to high transition
        PORTD = (0<<2); // Set DL = Low, duration must be > 200 ns (tL)
     7f4:	8b e2       	ldi	r24, 0x2B	; 43
     7f6:	90 e0       	ldi	r25, 0x00	; 0
     7f8:	fc 01       	movw	r30, r24
     7fa:	10 82       	st	Z, r1
        DDRD = (1<<2); // Configure DL as Output
     7fc:	8a e2       	ldi	r24, 0x2A	; 42
     7fe:	90 e0       	ldi	r25, 0x00	; 0
     800:	24 e0       	ldi	r18, 0x04	; 4
     802:	fc 01       	movw	r30, r24
     804:	20 83       	st	Z, r18
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a8 e4       	ldi	r26, 0x48	; 72
     80c:	b3 e4       	ldi	r27, 0x43	; 67
     80e:	89 a7       	std	Y+41, r24	; 0x29
     810:	9a a7       	std	Y+42, r25	; 0x2a
     812:	ab a7       	std	Y+43, r26	; 0x2b
     814:	bc a7       	std	Y+44, r27	; 0x2c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     816:	20 e0       	ldi	r18, 0x00	; 0
     818:	30 e0       	ldi	r19, 0x00	; 0
     81a:	4a e7       	ldi	r20, 0x7A	; 122
     81c:	55 e4       	ldi	r21, 0x45	; 69
     81e:	69 a5       	ldd	r22, Y+41	; 0x29
     820:	7a a5       	ldd	r23, Y+42	; 0x2a
     822:	8b a5       	ldd	r24, Y+43	; 0x2b
     824:	9c a5       	ldd	r25, Y+44	; 0x2c
     826:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <__mulsf3>
     82a:	dc 01       	movw	r26, r24
     82c:	cb 01       	movw	r24, r22
     82e:	8d a7       	std	Y+45, r24	; 0x2d
     830:	9e a7       	std	Y+46, r25	; 0x2e
     832:	af a7       	std	Y+47, r26	; 0x2f
     834:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
     836:	20 e0       	ldi	r18, 0x00	; 0
     838:	30 e0       	ldi	r19, 0x00	; 0
     83a:	40 e8       	ldi	r20, 0x80	; 128
     83c:	5f e3       	ldi	r21, 0x3F	; 63
     83e:	6d a5       	ldd	r22, Y+45	; 0x2d
     840:	7e a5       	ldd	r23, Y+46	; 0x2e
     842:	8f a5       	ldd	r24, Y+47	; 0x2f
     844:	98 a9       	ldd	r25, Y+48	; 0x30
     846:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <__cmpsf2>
     84a:	88 23       	and	r24, r24
     84c:	2c f4       	brge	.+10     	; 0x858 <readlowpowerpyro+0x286>
		__ticks = 1;
     84e:	81 e0       	ldi	r24, 0x01	; 1
     850:	90 e0       	ldi	r25, 0x00	; 0
     852:	9a ab       	std	Y+50, r25	; 0x32
     854:	89 ab       	std	Y+49, r24	; 0x31
     856:	3f c0       	rjmp	.+126    	; 0x8d6 <readlowpowerpyro+0x304>
	else if (__tmp > 65535)
     858:	20 e0       	ldi	r18, 0x00	; 0
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	4f e7       	ldi	r20, 0x7F	; 127
     85e:	57 e4       	ldi	r21, 0x47	; 71
     860:	6d a5       	ldd	r22, Y+45	; 0x2d
     862:	7e a5       	ldd	r23, Y+46	; 0x2e
     864:	8f a5       	ldd	r24, Y+47	; 0x2f
     866:	98 a9       	ldd	r25, Y+48	; 0x30
     868:	0e 94 77 0e 	call	0x1cee	; 0x1cee <__gesf2>
     86c:	18 16       	cp	r1, r24
     86e:	4c f5       	brge	.+82     	; 0x8c2 <readlowpowerpyro+0x2f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     870:	20 e0       	ldi	r18, 0x00	; 0
     872:	30 e0       	ldi	r19, 0x00	; 0
     874:	40 e2       	ldi	r20, 0x20	; 32
     876:	51 e4       	ldi	r21, 0x41	; 65
     878:	69 a5       	ldd	r22, Y+41	; 0x29
     87a:	7a a5       	ldd	r23, Y+42	; 0x2a
     87c:	8b a5       	ldd	r24, Y+43	; 0x2b
     87e:	9c a5       	ldd	r25, Y+44	; 0x2c
     880:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <__mulsf3>
     884:	dc 01       	movw	r26, r24
     886:	cb 01       	movw	r24, r22
     888:	bc 01       	movw	r22, r24
     88a:	cd 01       	movw	r24, r26
     88c:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <__fixunssfsi>
     890:	dc 01       	movw	r26, r24
     892:	cb 01       	movw	r24, r22
     894:	9a ab       	std	Y+50, r25	; 0x32
     896:	89 ab       	std	Y+49, r24	; 0x31
     898:	0f c0       	rjmp	.+30     	; 0x8b8 <readlowpowerpyro+0x2e6>
     89a:	80 e9       	ldi	r24, 0x90	; 144
     89c:	91 e0       	ldi	r25, 0x01	; 1
     89e:	9c ab       	std	Y+52, r25	; 0x34
     8a0:	8b ab       	std	Y+51, r24	; 0x33
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     8a2:	8b a9       	ldd	r24, Y+51	; 0x33
     8a4:	9c a9       	ldd	r25, Y+52	; 0x34
     8a6:	01 97       	sbiw	r24, 0x01	; 1
     8a8:	f1 f7       	brne	.-4      	; 0x8a6 <readlowpowerpyro+0x2d4>
     8aa:	9c ab       	std	Y+52, r25	; 0x34
     8ac:	8b ab       	std	Y+51, r24	; 0x33
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8ae:	89 a9       	ldd	r24, Y+49	; 0x31
     8b0:	9a a9       	ldd	r25, Y+50	; 0x32
     8b2:	01 97       	sbiw	r24, 0x01	; 1
     8b4:	9a ab       	std	Y+50, r25	; 0x32
     8b6:	89 ab       	std	Y+49, r24	; 0x31
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8b8:	89 a9       	ldd	r24, Y+49	; 0x31
     8ba:	9a a9       	ldd	r25, Y+50	; 0x32
     8bc:	89 2b       	or	r24, r25
     8be:	69 f7       	brne	.-38     	; 0x89a <readlowpowerpyro+0x2c8>
     8c0:	14 c0       	rjmp	.+40     	; 0x8ea <readlowpowerpyro+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     8c2:	6d a5       	ldd	r22, Y+45	; 0x2d
     8c4:	7e a5       	ldd	r23, Y+46	; 0x2e
     8c6:	8f a5       	ldd	r24, Y+47	; 0x2f
     8c8:	98 a9       	ldd	r25, Y+48	; 0x30
     8ca:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <__fixunssfsi>
     8ce:	dc 01       	movw	r26, r24
     8d0:	cb 01       	movw	r24, r22
     8d2:	9a ab       	std	Y+50, r25	; 0x32
     8d4:	89 ab       	std	Y+49, r24	; 0x31
     8d6:	89 a9       	ldd	r24, Y+49	; 0x31
     8d8:	9a a9       	ldd	r25, Y+50	; 0x32
     8da:	9e ab       	std	Y+54, r25	; 0x36
     8dc:	8d ab       	std	Y+53, r24	; 0x35
     8de:	8d a9       	ldd	r24, Y+53	; 0x35
     8e0:	9e a9       	ldd	r25, Y+54	; 0x36
     8e2:	01 97       	sbiw	r24, 0x01	; 1
     8e4:	f1 f7       	brne	.-4      	; 0x8e2 <readlowpowerpyro+0x310>
     8e6:	9e ab       	std	Y+54, r25	; 0x36
     8e8:	8d ab       	std	Y+53, r24	; 0x35
        _delay_ms(200);
        //asm("nop"); // number of nop dependant processor speed (200ns min.)
        PORTD = (1<<2); // Set DL = High, duration must be > 200 ns (tH)
     8ea:	8b e2       	ldi	r24, 0x2B	; 43
     8ec:	90 e0       	ldi	r25, 0x00	; 0
     8ee:	24 e0       	ldi	r18, 0x04	; 4
     8f0:	fc 01       	movw	r30, r24
     8f2:	20 83       	st	Z, r18
     8f4:	80 e0       	ldi	r24, 0x00	; 0
     8f6:	90 e0       	ldi	r25, 0x00	; 0
     8f8:	a8 e4       	ldi	r26, 0x48	; 72
     8fa:	b3 e4       	ldi	r27, 0x43	; 67
     8fc:	8f ab       	std	Y+55, r24	; 0x37
     8fe:	98 af       	std	Y+56, r25	; 0x38
     900:	a9 af       	std	Y+57, r26	; 0x39
     902:	ba af       	std	Y+58, r27	; 0x3a

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     904:	20 e0       	ldi	r18, 0x00	; 0
     906:	30 e0       	ldi	r19, 0x00	; 0
     908:	4a e7       	ldi	r20, 0x7A	; 122
     90a:	55 e4       	ldi	r21, 0x45	; 69
     90c:	6f a9       	ldd	r22, Y+55	; 0x37
     90e:	78 ad       	ldd	r23, Y+56	; 0x38
     910:	89 ad       	ldd	r24, Y+57	; 0x39
     912:	9a ad       	ldd	r25, Y+58	; 0x3a
     914:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <__mulsf3>
     918:	dc 01       	movw	r26, r24
     91a:	cb 01       	movw	r24, r22
     91c:	8b af       	std	Y+59, r24	; 0x3b
     91e:	9c af       	std	Y+60, r25	; 0x3c
     920:	ad af       	std	Y+61, r26	; 0x3d
     922:	be af       	std	Y+62, r27	; 0x3e
	if (__tmp < 1.0)
     924:	20 e0       	ldi	r18, 0x00	; 0
     926:	30 e0       	ldi	r19, 0x00	; 0
     928:	40 e8       	ldi	r20, 0x80	; 128
     92a:	5f e3       	ldi	r21, 0x3F	; 63
     92c:	6b ad       	ldd	r22, Y+59	; 0x3b
     92e:	7c ad       	ldd	r23, Y+60	; 0x3c
     930:	8d ad       	ldd	r24, Y+61	; 0x3d
     932:	9e ad       	ldd	r25, Y+62	; 0x3e
     934:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <__cmpsf2>
     938:	88 23       	and	r24, r24
     93a:	44 f4       	brge	.+16     	; 0x94c <__stack+0x4d>
		__ticks = 1;
     93c:	21 e0       	ldi	r18, 0x01	; 1
     93e:	30 e0       	ldi	r19, 0x00	; 0
     940:	ce 01       	movw	r24, r28
     942:	cf 96       	adiw	r24, 0x3f	; 63
     944:	fc 01       	movw	r30, r24
     946:	31 83       	std	Z+1, r19	; 0x01
     948:	20 83       	st	Z, r18
     94a:	5f c0       	rjmp	.+190    	; 0xa0a <__stack+0x10b>
	else if (__tmp > 65535)
     94c:	20 e0       	ldi	r18, 0x00	; 0
     94e:	3f ef       	ldi	r19, 0xFF	; 255
     950:	4f e7       	ldi	r20, 0x7F	; 127
     952:	57 e4       	ldi	r21, 0x47	; 71
     954:	6b ad       	ldd	r22, Y+59	; 0x3b
     956:	7c ad       	ldd	r23, Y+60	; 0x3c
     958:	8d ad       	ldd	r24, Y+61	; 0x3d
     95a:	9e ad       	ldd	r25, Y+62	; 0x3e
     95c:	0e 94 77 0e 	call	0x1cee	; 0x1cee <__gesf2>
     960:	18 16       	cp	r1, r24
     962:	0c f0       	brlt	.+2      	; 0x966 <__stack+0x67>
     964:	44 c0       	rjmp	.+136    	; 0x9ee <__stack+0xef>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     966:	20 e0       	ldi	r18, 0x00	; 0
     968:	30 e0       	ldi	r19, 0x00	; 0
     96a:	40 e2       	ldi	r20, 0x20	; 32
     96c:	51 e4       	ldi	r21, 0x41	; 65
     96e:	6f a9       	ldd	r22, Y+55	; 0x37
     970:	78 ad       	ldd	r23, Y+56	; 0x38
     972:	89 ad       	ldd	r24, Y+57	; 0x39
     974:	9a ad       	ldd	r25, Y+58	; 0x3a
     976:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <__mulsf3>
     97a:	dc 01       	movw	r26, r24
     97c:	cb 01       	movw	r24, r22
     97e:	bc 01       	movw	r22, r24
     980:	cd 01       	movw	r24, r26
     982:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <__fixunssfsi>
     986:	dc 01       	movw	r26, r24
     988:	cb 01       	movw	r24, r22
     98a:	9e 01       	movw	r18, r28
     98c:	21 5c       	subi	r18, 0xC1	; 193
     98e:	3f 4f       	sbci	r19, 0xFF	; 255
     990:	f9 01       	movw	r30, r18
     992:	91 83       	std	Z+1, r25	; 0x01
     994:	80 83       	st	Z, r24
     996:	23 c0       	rjmp	.+70     	; 0x9de <__stack+0xdf>
     998:	ce 01       	movw	r24, r28
     99a:	8f 5b       	subi	r24, 0xBF	; 191
     99c:	9f 4f       	sbci	r25, 0xFF	; 255
     99e:	20 e9       	ldi	r18, 0x90	; 144
     9a0:	31 e0       	ldi	r19, 0x01	; 1
     9a2:	fc 01       	movw	r30, r24
     9a4:	31 83       	std	Z+1, r19	; 0x01
     9a6:	20 83       	st	Z, r18
     9a8:	ce 01       	movw	r24, r28
     9aa:	8f 5b       	subi	r24, 0xBF	; 191
     9ac:	9f 4f       	sbci	r25, 0xFF	; 255
     9ae:	fc 01       	movw	r30, r24
     9b0:	80 81       	ld	r24, Z
     9b2:	91 81       	ldd	r25, Z+1	; 0x01
     9b4:	01 97       	sbiw	r24, 0x01	; 1
     9b6:	f1 f7       	brne	.-4      	; 0x9b4 <__stack+0xb5>
     9b8:	9e 01       	movw	r18, r28
     9ba:	2f 5b       	subi	r18, 0xBF	; 191
     9bc:	3f 4f       	sbci	r19, 0xFF	; 255
     9be:	f9 01       	movw	r30, r18
     9c0:	91 83       	std	Z+1, r25	; 0x01
     9c2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     9c4:	ce 01       	movw	r24, r28
     9c6:	cf 96       	adiw	r24, 0x3f	; 63
     9c8:	fc 01       	movw	r30, r24
     9ca:	80 81       	ld	r24, Z
     9cc:	91 81       	ldd	r25, Z+1	; 0x01
     9ce:	9c 01       	movw	r18, r24
     9d0:	21 50       	subi	r18, 0x01	; 1
     9d2:	31 09       	sbc	r19, r1
     9d4:	ce 01       	movw	r24, r28
     9d6:	cf 96       	adiw	r24, 0x3f	; 63
     9d8:	fc 01       	movw	r30, r24
     9da:	31 83       	std	Z+1, r19	; 0x01
     9dc:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     9de:	ce 01       	movw	r24, r28
     9e0:	cf 96       	adiw	r24, 0x3f	; 63
     9e2:	fc 01       	movw	r30, r24
     9e4:	80 81       	ld	r24, Z
     9e6:	91 81       	ldd	r25, Z+1	; 0x01
     9e8:	89 2b       	or	r24, r25
     9ea:	b1 f6       	brne	.-84     	; 0x998 <__stack+0x99>
     9ec:	28 c0       	rjmp	.+80     	; 0xa3e <__stack+0x13f>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     9ee:	6b ad       	ldd	r22, Y+59	; 0x3b
     9f0:	7c ad       	ldd	r23, Y+60	; 0x3c
     9f2:	8d ad       	ldd	r24, Y+61	; 0x3d
     9f4:	9e ad       	ldd	r25, Y+62	; 0x3e
     9f6:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <__fixunssfsi>
     9fa:	dc 01       	movw	r26, r24
     9fc:	cb 01       	movw	r24, r22
     9fe:	9e 01       	movw	r18, r28
     a00:	21 5c       	subi	r18, 0xC1	; 193
     a02:	3f 4f       	sbci	r19, 0xFF	; 255
     a04:	f9 01       	movw	r30, r18
     a06:	91 83       	std	Z+1, r25	; 0x01
     a08:	80 83       	st	Z, r24
     a0a:	ce 01       	movw	r24, r28
     a0c:	8d 5b       	subi	r24, 0xBD	; 189
     a0e:	9f 4f       	sbci	r25, 0xFF	; 255
     a10:	9e 01       	movw	r18, r28
     a12:	21 5c       	subi	r18, 0xC1	; 193
     a14:	3f 4f       	sbci	r19, 0xFF	; 255
     a16:	f9 01       	movw	r30, r18
     a18:	20 81       	ld	r18, Z
     a1a:	31 81       	ldd	r19, Z+1	; 0x01
     a1c:	fc 01       	movw	r30, r24
     a1e:	31 83       	std	Z+1, r19	; 0x01
     a20:	20 83       	st	Z, r18
     a22:	ce 01       	movw	r24, r28
     a24:	8d 5b       	subi	r24, 0xBD	; 189
     a26:	9f 4f       	sbci	r25, 0xFF	; 255
     a28:	fc 01       	movw	r30, r24
     a2a:	80 81       	ld	r24, Z
     a2c:	91 81       	ldd	r25, Z+1	; 0x01
     a2e:	01 97       	sbiw	r24, 0x01	; 1
     a30:	f1 f7       	brne	.-4      	; 0xa2e <__stack+0x12f>
     a32:	9e 01       	movw	r18, r28
     a34:	2d 5b       	subi	r18, 0xBD	; 189
     a36:	3f 4f       	sbci	r19, 0xFF	; 255
     a38:	f9 01       	movw	r30, r18
     a3a:	91 83       	std	Z+1, r25	; 0x01
     a3c:	80 83       	st	Z, r24
        _delay_ms(200);
        DDRD = (0<<2); // Configure DL as Input
     a3e:	8a e2       	ldi	r24, 0x2A	; 42
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	fc 01       	movw	r30, r24
     a44:	10 82       	st	Z, r1
     a46:	9e 01       	movw	r18, r28
     a48:	2b 5b       	subi	r18, 0xBB	; 187
     a4a:	3f 4f       	sbci	r19, 0xFF	; 255
     a4c:	80 e0       	ldi	r24, 0x00	; 0
     a4e:	90 e0       	ldi	r25, 0x00	; 0
     a50:	a0 e4       	ldi	r26, 0x40	; 64
     a52:	b0 e4       	ldi	r27, 0x40	; 64
     a54:	f9 01       	movw	r30, r18
     a56:	80 83       	st	Z, r24
     a58:	91 83       	std	Z+1, r25	; 0x01
     a5a:	a2 83       	std	Z+2, r26	; 0x02
     a5c:	b3 83       	std	Z+3, r27	; 0x03
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
     a5e:	8e 01       	movw	r16, r28
     a60:	07 5b       	subi	r16, 0xB7	; 183
     a62:	1f 4f       	sbci	r17, 0xFF	; 255
     a64:	ce 01       	movw	r24, r28
     a66:	8b 5b       	subi	r24, 0xBB	; 187
     a68:	9f 4f       	sbci	r25, 0xFF	; 255
     a6a:	2b ea       	ldi	r18, 0xAB	; 171
     a6c:	3a ea       	ldi	r19, 0xAA	; 170
     a6e:	4a ea       	ldi	r20, 0xAA	; 170
     a70:	50 e4       	ldi	r21, 0x40	; 64
     a72:	fc 01       	movw	r30, r24
     a74:	60 81       	ld	r22, Z
     a76:	71 81       	ldd	r23, Z+1	; 0x01
     a78:	82 81       	ldd	r24, Z+2	; 0x02
     a7a:	93 81       	ldd	r25, Z+3	; 0x03
     a7c:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <__mulsf3>
     a80:	dc 01       	movw	r26, r24
     a82:	cb 01       	movw	r24, r22
     a84:	f8 01       	movw	r30, r16
     a86:	80 83       	st	Z, r24
     a88:	91 83       	std	Z+1, r25	; 0x01
     a8a:	a2 83       	std	Z+2, r26	; 0x02
     a8c:	b3 83       	std	Z+3, r27	; 0x03
	__tmp2 = ((F_CPU) / 4e6) * __us;
     a8e:	8e 01       	movw	r16, r28
     a90:	03 5b       	subi	r16, 0xB3	; 179
     a92:	1f 4f       	sbci	r17, 0xFF	; 255
     a94:	ce 01       	movw	r24, r28
     a96:	8b 5b       	subi	r24, 0xBB	; 187
     a98:	9f 4f       	sbci	r25, 0xFF	; 255
     a9a:	20 e0       	ldi	r18, 0x00	; 0
     a9c:	30 e0       	ldi	r19, 0x00	; 0
     a9e:	40 e8       	ldi	r20, 0x80	; 128
     aa0:	50 e4       	ldi	r21, 0x40	; 64
     aa2:	fc 01       	movw	r30, r24
     aa4:	60 81       	ld	r22, Z
     aa6:	71 81       	ldd	r23, Z+1	; 0x01
     aa8:	82 81       	ldd	r24, Z+2	; 0x02
     aaa:	93 81       	ldd	r25, Z+3	; 0x03
     aac:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <__mulsf3>
     ab0:	dc 01       	movw	r26, r24
     ab2:	cb 01       	movw	r24, r22
     ab4:	f8 01       	movw	r30, r16
     ab6:	80 83       	st	Z, r24
     ab8:	91 83       	std	Z+1, r25	; 0x01
     aba:	a2 83       	std	Z+2, r26	; 0x02
     abc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     abe:	ce 01       	movw	r24, r28
     ac0:	87 5b       	subi	r24, 0xB7	; 183
     ac2:	9f 4f       	sbci	r25, 0xFF	; 255
     ac4:	20 e0       	ldi	r18, 0x00	; 0
     ac6:	30 e0       	ldi	r19, 0x00	; 0
     ac8:	40 e8       	ldi	r20, 0x80	; 128
     aca:	5f e3       	ldi	r21, 0x3F	; 63
     acc:	fc 01       	movw	r30, r24
     ace:	60 81       	ld	r22, Z
     ad0:	71 81       	ldd	r23, Z+1	; 0x01
     ad2:	82 81       	ldd	r24, Z+2	; 0x02
     ad4:	93 81       	ldd	r25, Z+3	; 0x03
     ad6:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <__cmpsf2>
     ada:	88 23       	and	r24, r24
     adc:	3c f4       	brge	.+14     	; 0xaec <__stack+0x1ed>
		__ticks = 1;
     ade:	ce 01       	movw	r24, r28
     ae0:	8f 5a       	subi	r24, 0xAF	; 175
     ae2:	9f 4f       	sbci	r25, 0xFF	; 255
     ae4:	21 e0       	ldi	r18, 0x01	; 1
     ae6:	fc 01       	movw	r30, r24
     ae8:	20 83       	st	Z, r18
     aea:	44 c1       	rjmp	.+648    	; 0xd74 <__stack+0x475>
	else if (__tmp2 > 65535)
     aec:	ce 01       	movw	r24, r28
     aee:	83 5b       	subi	r24, 0xB3	; 179
     af0:	9f 4f       	sbci	r25, 0xFF	; 255
     af2:	20 e0       	ldi	r18, 0x00	; 0
     af4:	3f ef       	ldi	r19, 0xFF	; 255
     af6:	4f e7       	ldi	r20, 0x7F	; 127
     af8:	57 e4       	ldi	r21, 0x47	; 71
     afa:	fc 01       	movw	r30, r24
     afc:	60 81       	ld	r22, Z
     afe:	71 81       	ldd	r23, Z+1	; 0x01
     b00:	82 81       	ldd	r24, Z+2	; 0x02
     b02:	93 81       	ldd	r25, Z+3	; 0x03
     b04:	0e 94 77 0e 	call	0x1cee	; 0x1cee <__gesf2>
     b08:	18 16       	cp	r1, r24
     b0a:	0c f0       	brlt	.+2      	; 0xb0e <__stack+0x20f>
     b0c:	e5 c0       	rjmp	.+458    	; 0xcd8 <__stack+0x3d9>
	{
		_delay_ms(__us / 1000.0);
     b0e:	ce 01       	movw	r24, r28
     b10:	8b 5b       	subi	r24, 0xBB	; 187
     b12:	9f 4f       	sbci	r25, 0xFF	; 255
     b14:	20 e0       	ldi	r18, 0x00	; 0
     b16:	30 e0       	ldi	r19, 0x00	; 0
     b18:	4a e7       	ldi	r20, 0x7A	; 122
     b1a:	54 e4       	ldi	r21, 0x44	; 68
     b1c:	fc 01       	movw	r30, r24
     b1e:	60 81       	ld	r22, Z
     b20:	71 81       	ldd	r23, Z+1	; 0x01
     b22:	82 81       	ldd	r24, Z+2	; 0x02
     b24:	93 81       	ldd	r25, Z+3	; 0x03
     b26:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <__divsf3>
     b2a:	dc 01       	movw	r26, r24
     b2c:	cb 01       	movw	r24, r22
     b2e:	9e 01       	movw	r18, r28
     b30:	2e 5a       	subi	r18, 0xAE	; 174
     b32:	3f 4f       	sbci	r19, 0xFF	; 255
     b34:	f9 01       	movw	r30, r18
     b36:	80 83       	st	Z, r24
     b38:	91 83       	std	Z+1, r25	; 0x01
     b3a:	a2 83       	std	Z+2, r26	; 0x02
     b3c:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     b3e:	8e 01       	movw	r16, r28
     b40:	0a 5a       	subi	r16, 0xAA	; 170
     b42:	1f 4f       	sbci	r17, 0xFF	; 255
     b44:	ce 01       	movw	r24, r28
     b46:	8e 5a       	subi	r24, 0xAE	; 174
     b48:	9f 4f       	sbci	r25, 0xFF	; 255
     b4a:	20 e0       	ldi	r18, 0x00	; 0
     b4c:	30 e0       	ldi	r19, 0x00	; 0
     b4e:	4a e7       	ldi	r20, 0x7A	; 122
     b50:	55 e4       	ldi	r21, 0x45	; 69
     b52:	fc 01       	movw	r30, r24
     b54:	60 81       	ld	r22, Z
     b56:	71 81       	ldd	r23, Z+1	; 0x01
     b58:	82 81       	ldd	r24, Z+2	; 0x02
     b5a:	93 81       	ldd	r25, Z+3	; 0x03
     b5c:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <__mulsf3>
     b60:	dc 01       	movw	r26, r24
     b62:	cb 01       	movw	r24, r22
     b64:	f8 01       	movw	r30, r16
     b66:	80 83       	st	Z, r24
     b68:	91 83       	std	Z+1, r25	; 0x01
     b6a:	a2 83       	std	Z+2, r26	; 0x02
     b6c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     b6e:	ce 01       	movw	r24, r28
     b70:	8a 5a       	subi	r24, 0xAA	; 170
     b72:	9f 4f       	sbci	r25, 0xFF	; 255
     b74:	20 e0       	ldi	r18, 0x00	; 0
     b76:	30 e0       	ldi	r19, 0x00	; 0
     b78:	40 e8       	ldi	r20, 0x80	; 128
     b7a:	5f e3       	ldi	r21, 0x3F	; 63
     b7c:	fc 01       	movw	r30, r24
     b7e:	60 81       	ld	r22, Z
     b80:	71 81       	ldd	r23, Z+1	; 0x01
     b82:	82 81       	ldd	r24, Z+2	; 0x02
     b84:	93 81       	ldd	r25, Z+3	; 0x03
     b86:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <__cmpsf2>
     b8a:	88 23       	and	r24, r24
     b8c:	4c f4       	brge	.+18     	; 0xba0 <__stack+0x2a1>
		__ticks = 1;
     b8e:	ce 01       	movw	r24, r28
     b90:	86 5a       	subi	r24, 0xA6	; 166
     b92:	9f 4f       	sbci	r25, 0xFF	; 255
     b94:	21 e0       	ldi	r18, 0x01	; 1
     b96:	30 e0       	ldi	r19, 0x00	; 0
     b98:	fc 01       	movw	r30, r24
     b9a:	31 83       	std	Z+1, r19	; 0x01
     b9c:	20 83       	st	Z, r18
     b9e:	77 c0       	rjmp	.+238    	; 0xc8e <__stack+0x38f>
	else if (__tmp > 65535)
     ba0:	ce 01       	movw	r24, r28
     ba2:	8a 5a       	subi	r24, 0xAA	; 170
     ba4:	9f 4f       	sbci	r25, 0xFF	; 255
     ba6:	20 e0       	ldi	r18, 0x00	; 0
     ba8:	3f ef       	ldi	r19, 0xFF	; 255
     baa:	4f e7       	ldi	r20, 0x7F	; 127
     bac:	57 e4       	ldi	r21, 0x47	; 71
     bae:	fc 01       	movw	r30, r24
     bb0:	60 81       	ld	r22, Z
     bb2:	71 81       	ldd	r23, Z+1	; 0x01
     bb4:	82 81       	ldd	r24, Z+2	; 0x02
     bb6:	93 81       	ldd	r25, Z+3	; 0x03
     bb8:	0e 94 77 0e 	call	0x1cee	; 0x1cee <__gesf2>
     bbc:	18 16       	cp	r1, r24
     bbe:	0c f0       	brlt	.+2      	; 0xbc2 <__stack+0x2c3>
     bc0:	54 c0       	rjmp	.+168    	; 0xc6a <__stack+0x36b>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bc2:	ce 01       	movw	r24, r28
     bc4:	8e 5a       	subi	r24, 0xAE	; 174
     bc6:	9f 4f       	sbci	r25, 0xFF	; 255
     bc8:	20 e0       	ldi	r18, 0x00	; 0
     bca:	30 e0       	ldi	r19, 0x00	; 0
     bcc:	40 e2       	ldi	r20, 0x20	; 32
     bce:	51 e4       	ldi	r21, 0x41	; 65
     bd0:	fc 01       	movw	r30, r24
     bd2:	60 81       	ld	r22, Z
     bd4:	71 81       	ldd	r23, Z+1	; 0x01
     bd6:	82 81       	ldd	r24, Z+2	; 0x02
     bd8:	93 81       	ldd	r25, Z+3	; 0x03
     bda:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <__mulsf3>
     bde:	dc 01       	movw	r26, r24
     be0:	cb 01       	movw	r24, r22
     be2:	8e 01       	movw	r16, r28
     be4:	06 5a       	subi	r16, 0xA6	; 166
     be6:	1f 4f       	sbci	r17, 0xFF	; 255
     be8:	bc 01       	movw	r22, r24
     bea:	cd 01       	movw	r24, r26
     bec:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <__fixunssfsi>
     bf0:	dc 01       	movw	r26, r24
     bf2:	cb 01       	movw	r24, r22
     bf4:	f8 01       	movw	r30, r16
     bf6:	91 83       	std	Z+1, r25	; 0x01
     bf8:	80 83       	st	Z, r24
     bfa:	24 c0       	rjmp	.+72     	; 0xc44 <__stack+0x345>
     bfc:	ce 01       	movw	r24, r28
     bfe:	84 5a       	subi	r24, 0xA4	; 164
     c00:	9f 4f       	sbci	r25, 0xFF	; 255
     c02:	20 e9       	ldi	r18, 0x90	; 144
     c04:	31 e0       	ldi	r19, 0x01	; 1
     c06:	fc 01       	movw	r30, r24
     c08:	31 83       	std	Z+1, r19	; 0x01
     c0a:	20 83       	st	Z, r18
     c0c:	ce 01       	movw	r24, r28
     c0e:	84 5a       	subi	r24, 0xA4	; 164
     c10:	9f 4f       	sbci	r25, 0xFF	; 255
     c12:	fc 01       	movw	r30, r24
     c14:	80 81       	ld	r24, Z
     c16:	91 81       	ldd	r25, Z+1	; 0x01
     c18:	01 97       	sbiw	r24, 0x01	; 1
     c1a:	f1 f7       	brne	.-4      	; 0xc18 <__stack+0x319>
     c1c:	9e 01       	movw	r18, r28
     c1e:	24 5a       	subi	r18, 0xA4	; 164
     c20:	3f 4f       	sbci	r19, 0xFF	; 255
     c22:	f9 01       	movw	r30, r18
     c24:	91 83       	std	Z+1, r25	; 0x01
     c26:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c28:	ce 01       	movw	r24, r28
     c2a:	86 5a       	subi	r24, 0xA6	; 166
     c2c:	9f 4f       	sbci	r25, 0xFF	; 255
     c2e:	9e 01       	movw	r18, r28
     c30:	26 5a       	subi	r18, 0xA6	; 166
     c32:	3f 4f       	sbci	r19, 0xFF	; 255
     c34:	f9 01       	movw	r30, r18
     c36:	20 81       	ld	r18, Z
     c38:	31 81       	ldd	r19, Z+1	; 0x01
     c3a:	21 50       	subi	r18, 0x01	; 1
     c3c:	31 09       	sbc	r19, r1
     c3e:	fc 01       	movw	r30, r24
     c40:	31 83       	std	Z+1, r19	; 0x01
     c42:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c44:	ce 01       	movw	r24, r28
     c46:	86 5a       	subi	r24, 0xA6	; 166
     c48:	9f 4f       	sbci	r25, 0xFF	; 255
     c4a:	fc 01       	movw	r30, r24
     c4c:	80 81       	ld	r24, Z
     c4e:	91 81       	ldd	r25, Z+1	; 0x01
     c50:	89 2b       	or	r24, r25
     c52:	a1 f6       	brne	.-88     	; 0xbfc <__stack+0x2fd>
     c54:	ce 01       	movw	r24, r28
     c56:	8f 5a       	subi	r24, 0xAF	; 175
     c58:	9f 4f       	sbci	r25, 0xFF	; 255
     c5a:	9e 01       	movw	r18, r28
     c5c:	2b 59       	subi	r18, 0x9B	; 155
     c5e:	3f 4f       	sbci	r19, 0xFF	; 255
     c60:	f9 01       	movw	r30, r18
     c62:	20 81       	ld	r18, Z
     c64:	fc 01       	movw	r30, r24
     c66:	20 83       	st	Z, r18
     c68:	85 c0       	rjmp	.+266    	; 0xd74 <__stack+0x475>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c6a:	8e 01       	movw	r16, r28
     c6c:	06 5a       	subi	r16, 0xA6	; 166
     c6e:	1f 4f       	sbci	r17, 0xFF	; 255
     c70:	ce 01       	movw	r24, r28
     c72:	8a 5a       	subi	r24, 0xAA	; 170
     c74:	9f 4f       	sbci	r25, 0xFF	; 255
     c76:	fc 01       	movw	r30, r24
     c78:	60 81       	ld	r22, Z
     c7a:	71 81       	ldd	r23, Z+1	; 0x01
     c7c:	82 81       	ldd	r24, Z+2	; 0x02
     c7e:	93 81       	ldd	r25, Z+3	; 0x03
     c80:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <__fixunssfsi>
     c84:	dc 01       	movw	r26, r24
     c86:	cb 01       	movw	r24, r22
     c88:	f8 01       	movw	r30, r16
     c8a:	91 83       	std	Z+1, r25	; 0x01
     c8c:	80 83       	st	Z, r24
     c8e:	ce 01       	movw	r24, r28
     c90:	82 5a       	subi	r24, 0xA2	; 162
     c92:	9f 4f       	sbci	r25, 0xFF	; 255
     c94:	9e 01       	movw	r18, r28
     c96:	26 5a       	subi	r18, 0xA6	; 166
     c98:	3f 4f       	sbci	r19, 0xFF	; 255
     c9a:	f9 01       	movw	r30, r18
     c9c:	20 81       	ld	r18, Z
     c9e:	31 81       	ldd	r19, Z+1	; 0x01
     ca0:	fc 01       	movw	r30, r24
     ca2:	31 83       	std	Z+1, r19	; 0x01
     ca4:	20 83       	st	Z, r18
     ca6:	ce 01       	movw	r24, r28
     ca8:	82 5a       	subi	r24, 0xA2	; 162
     caa:	9f 4f       	sbci	r25, 0xFF	; 255
     cac:	fc 01       	movw	r30, r24
     cae:	80 81       	ld	r24, Z
     cb0:	91 81       	ldd	r25, Z+1	; 0x01
     cb2:	01 97       	sbiw	r24, 0x01	; 1
     cb4:	f1 f7       	brne	.-4      	; 0xcb2 <__stack+0x3b3>
     cb6:	9e 01       	movw	r18, r28
     cb8:	22 5a       	subi	r18, 0xA2	; 162
     cba:	3f 4f       	sbci	r19, 0xFF	; 255
     cbc:	f9 01       	movw	r30, r18
     cbe:	91 83       	std	Z+1, r25	; 0x01
     cc0:	80 83       	st	Z, r24
     cc2:	ce 01       	movw	r24, r28
     cc4:	8f 5a       	subi	r24, 0xAF	; 175
     cc6:	9f 4f       	sbci	r25, 0xFF	; 255
     cc8:	9e 01       	movw	r18, r28
     cca:	2b 59       	subi	r18, 0x9B	; 155
     ccc:	3f 4f       	sbci	r19, 0xFF	; 255
     cce:	f9 01       	movw	r30, r18
     cd0:	20 81       	ld	r18, Z
     cd2:	fc 01       	movw	r30, r24
     cd4:	20 83       	st	Z, r18
     cd6:	4e c0       	rjmp	.+156    	; 0xd74 <__stack+0x475>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     cd8:	ce 01       	movw	r24, r28
     cda:	87 5b       	subi	r24, 0xB7	; 183
     cdc:	9f 4f       	sbci	r25, 0xFF	; 255
     cde:	20 e0       	ldi	r18, 0x00	; 0
     ce0:	30 e0       	ldi	r19, 0x00	; 0
     ce2:	4f e7       	ldi	r20, 0x7F	; 127
     ce4:	53 e4       	ldi	r21, 0x43	; 67
     ce6:	fc 01       	movw	r30, r24
     ce8:	60 81       	ld	r22, Z
     cea:	71 81       	ldd	r23, Z+1	; 0x01
     cec:	82 81       	ldd	r24, Z+2	; 0x02
     cee:	93 81       	ldd	r25, Z+3	; 0x03
     cf0:	0e 94 77 0e 	call	0x1cee	; 0x1cee <__gesf2>
     cf4:	18 16       	cp	r1, r24
     cf6:	6c f5       	brge	.+90     	; 0xd52 <__stack+0x453>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     cf8:	8e 01       	movw	r16, r28
     cfa:	00 5a       	subi	r16, 0xA0	; 160
     cfc:	1f 4f       	sbci	r17, 0xFF	; 255
     cfe:	ce 01       	movw	r24, r28
     d00:	83 5b       	subi	r24, 0xB3	; 179
     d02:	9f 4f       	sbci	r25, 0xFF	; 255
     d04:	fc 01       	movw	r30, r24
     d06:	60 81       	ld	r22, Z
     d08:	71 81       	ldd	r23, Z+1	; 0x01
     d0a:	82 81       	ldd	r24, Z+2	; 0x02
     d0c:	93 81       	ldd	r25, Z+3	; 0x03
     d0e:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <__fixunssfsi>
     d12:	dc 01       	movw	r26, r24
     d14:	cb 01       	movw	r24, r22
     d16:	f8 01       	movw	r30, r16
     d18:	91 83       	std	Z+1, r25	; 0x01
     d1a:	80 83       	st	Z, r24
     d1c:	ce 01       	movw	r24, r28
     d1e:	8e 59       	subi	r24, 0x9E	; 158
     d20:	9f 4f       	sbci	r25, 0xFF	; 255
     d22:	9e 01       	movw	r18, r28
     d24:	20 5a       	subi	r18, 0xA0	; 160
     d26:	3f 4f       	sbci	r19, 0xFF	; 255
     d28:	f9 01       	movw	r30, r18
     d2a:	20 81       	ld	r18, Z
     d2c:	31 81       	ldd	r19, Z+1	; 0x01
     d2e:	fc 01       	movw	r30, r24
     d30:	31 83       	std	Z+1, r19	; 0x01
     d32:	20 83       	st	Z, r18
     d34:	ce 01       	movw	r24, r28
     d36:	8e 59       	subi	r24, 0x9E	; 158
     d38:	9f 4f       	sbci	r25, 0xFF	; 255
     d3a:	fc 01       	movw	r30, r24
     d3c:	80 81       	ld	r24, Z
     d3e:	91 81       	ldd	r25, Z+1	; 0x01
     d40:	01 97       	sbiw	r24, 0x01	; 1
     d42:	f1 f7       	brne	.-4      	; 0xd40 <__stack+0x441>
     d44:	9e 01       	movw	r18, r28
     d46:	2e 59       	subi	r18, 0x9E	; 158
     d48:	3f 4f       	sbci	r19, 0xFF	; 255
     d4a:	f9 01       	movw	r30, r18
     d4c:	91 83       	std	Z+1, r25	; 0x01
     d4e:	80 83       	st	Z, r24
     d50:	28 c0       	rjmp	.+80     	; 0xda2 <__stack+0x4a3>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     d52:	8e 01       	movw	r16, r28
     d54:	0f 5a       	subi	r16, 0xAF	; 175
     d56:	1f 4f       	sbci	r17, 0xFF	; 255
     d58:	ce 01       	movw	r24, r28
     d5a:	87 5b       	subi	r24, 0xB7	; 183
     d5c:	9f 4f       	sbci	r25, 0xFF	; 255
     d5e:	fc 01       	movw	r30, r24
     d60:	60 81       	ld	r22, Z
     d62:	71 81       	ldd	r23, Z+1	; 0x01
     d64:	82 81       	ldd	r24, Z+2	; 0x02
     d66:	93 81       	ldd	r25, Z+3	; 0x03
     d68:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <__fixunssfsi>
     d6c:	dc 01       	movw	r26, r24
     d6e:	cb 01       	movw	r24, r22
     d70:	f8 01       	movw	r30, r16
     d72:	80 83       	st	Z, r24
     d74:	ce 01       	movw	r24, r28
     d76:	8c 59       	subi	r24, 0x9C	; 156
     d78:	9f 4f       	sbci	r25, 0xFF	; 255
     d7a:	9e 01       	movw	r18, r28
     d7c:	2f 5a       	subi	r18, 0xAF	; 175
     d7e:	3f 4f       	sbci	r19, 0xFF	; 255
     d80:	f9 01       	movw	r30, r18
     d82:	20 81       	ld	r18, Z
     d84:	fc 01       	movw	r30, r24
     d86:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     d88:	ce 01       	movw	r24, r28
     d8a:	8c 59       	subi	r24, 0x9C	; 156
     d8c:	9f 4f       	sbci	r25, 0xFF	; 255
     d8e:	fc 01       	movw	r30, r24
     d90:	80 81       	ld	r24, Z
     d92:	28 2f       	mov	r18, r24
     d94:	2a 95       	dec	r18
     d96:	f1 f7       	brne	.-4      	; 0xd94 <__stack+0x495>
     d98:	ce 01       	movw	r24, r28
     d9a:	8c 59       	subi	r24, 0x9C	; 156
     d9c:	9f 4f       	sbci	r25, 0xFF	; 255
     d9e:	fc 01       	movw	r30, r24
     da0:	20 83       	st	Z, r18
        _delay_us(3); // Wait for stable low signal
        // If DL High set masked bit in PIRVal
        if (PIND & 0x02) PIRval |= uibitmask;
     da2:	89 e2       	ldi	r24, 0x29	; 41
     da4:	90 e0       	ldi	r25, 0x00	; 0
     da6:	fc 01       	movw	r30, r24
     da8:	80 81       	ld	r24, Z
     daa:	88 2f       	mov	r24, r24
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	82 70       	andi	r24, 0x02	; 2
     db0:	99 27       	eor	r25, r25
     db2:	89 2b       	or	r24, r25
     db4:	69 f0       	breq	.+26     	; 0xdd0 <__stack+0x4d1>
     db6:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <__data_end>
     dba:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <__data_end+0x1>
     dbe:	9c 01       	movw	r18, r24
     dc0:	8b 81       	ldd	r24, Y+3	; 0x03
     dc2:	9c 81       	ldd	r25, Y+4	; 0x04
     dc4:	82 2b       	or	r24, r18
     dc6:	93 2b       	or	r25, r19
     dc8:	90 93 81 01 	sts	0x0181, r25	; 0x800181 <__data_end+0x1>
     dcc:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <__data_end>
            uibitmask>>=1;
     dd0:	8b 81       	ldd	r24, Y+3	; 0x03
     dd2:	9c 81       	ldd	r25, Y+4	; 0x04
     dd4:	96 95       	lsr	r25
     dd6:	87 95       	ror	r24
     dd8:	9c 83       	std	Y+4, r25	; 0x04
     dda:	8b 83       	std	Y+3, r24	; 0x03
    DDRD = (1<<2); // Configure PORT DL as Output
    _delay_us(150);
    // get first 15bit out-off-range and ADC value
    uibitmask = 0x4000; // Set BitPos
    PIRval = 0;
    for (i=0; i < 15; i++){
     ddc:	89 81       	ldd	r24, Y+1	; 0x01
     dde:	9a 81       	ldd	r25, Y+2	; 0x02
     de0:	01 96       	adiw	r24, 0x01	; 1
     de2:	9a 83       	std	Y+2, r25	; 0x02
     de4:	89 83       	std	Y+1, r24	; 0x01
     de6:	89 81       	ldd	r24, Y+1	; 0x01
     de8:	9a 81       	ldd	r25, Y+2	; 0x02
     dea:	0f 97       	sbiw	r24, 0x0f	; 15
     dec:	0c f4       	brge	.+2      	; 0xdf0 <__stack+0x4f1>
     dee:	02 cd       	rjmp	.-1532   	; 0x7f4 <readlowpowerpyro+0x222>
        // If DL High set masked bit in PIRVal
        if (PIND & 0x02) PIRval |= uibitmask;
            uibitmask>>=1;
    }
    // get 25bit status and config
    ulbitmask = 0x1000000; // Set BitPos
     df0:	80 e0       	ldi	r24, 0x00	; 0
     df2:	90 e0       	ldi	r25, 0x00	; 0
     df4:	a0 e0       	ldi	r26, 0x00	; 0
     df6:	b1 e0       	ldi	r27, 0x01	; 1
     df8:	8d 83       	std	Y+5, r24	; 0x05
     dfa:	9e 83       	std	Y+6, r25	; 0x06
     dfc:	af 83       	std	Y+7, r26	; 0x07
     dfe:	b8 87       	std	Y+8, r27	; 0x08
    statcfg = 0;
     e00:	10 92 82 01 	sts	0x0182, r1	; 0x800182 <statcfg>
     e04:	10 92 83 01 	sts	0x0183, r1	; 0x800183 <statcfg+0x1>
     e08:	10 92 84 01 	sts	0x0184, r1	; 0x800184 <statcfg+0x2>
     e0c:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <statcfg+0x3>
    for (i=0; i < 25; i++){
     e10:	1a 82       	std	Y+2, r1	; 0x02
     e12:	19 82       	std	Y+1, r1	; 0x01
     e14:	7b c3       	rjmp	.+1782   	; 0x150c <__stack+0xc0d>
        PORTD = (0<<2); // Set DL = Low, duration must be > 200 ns (tL)
     e16:	8b e2       	ldi	r24, 0x2B	; 43
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	fc 01       	movw	r30, r24
     e1c:	10 82       	st	Z, r1
        DDRD = (1<<2); // Configure DL as Output
     e1e:	8a e2       	ldi	r24, 0x2A	; 42
     e20:	90 e0       	ldi	r25, 0x00	; 0
     e22:	24 e0       	ldi	r18, 0x04	; 4
     e24:	fc 01       	movw	r30, r24
     e26:	20 83       	st	Z, r18
     e28:	9e 01       	movw	r18, r28
     e2a:	2a 59       	subi	r18, 0x9A	; 154
     e2c:	3f 4f       	sbci	r19, 0xFF	; 255
     e2e:	80 e0       	ldi	r24, 0x00	; 0
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	a8 e4       	ldi	r26, 0x48	; 72
     e34:	b3 e4       	ldi	r27, 0x43	; 67
     e36:	f9 01       	movw	r30, r18
     e38:	80 83       	st	Z, r24
     e3a:	91 83       	std	Z+1, r25	; 0x01
     e3c:	a2 83       	std	Z+2, r26	; 0x02
     e3e:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     e40:	8e 01       	movw	r16, r28
     e42:	06 59       	subi	r16, 0x96	; 150
     e44:	1f 4f       	sbci	r17, 0xFF	; 255
     e46:	ce 01       	movw	r24, r28
     e48:	8a 59       	subi	r24, 0x9A	; 154
     e4a:	9f 4f       	sbci	r25, 0xFF	; 255
     e4c:	20 e0       	ldi	r18, 0x00	; 0
     e4e:	30 e0       	ldi	r19, 0x00	; 0
     e50:	4a e7       	ldi	r20, 0x7A	; 122
     e52:	55 e4       	ldi	r21, 0x45	; 69
     e54:	fc 01       	movw	r30, r24
     e56:	60 81       	ld	r22, Z
     e58:	71 81       	ldd	r23, Z+1	; 0x01
     e5a:	82 81       	ldd	r24, Z+2	; 0x02
     e5c:	93 81       	ldd	r25, Z+3	; 0x03
     e5e:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <__mulsf3>
     e62:	dc 01       	movw	r26, r24
     e64:	cb 01       	movw	r24, r22
     e66:	f8 01       	movw	r30, r16
     e68:	80 83       	st	Z, r24
     e6a:	91 83       	std	Z+1, r25	; 0x01
     e6c:	a2 83       	std	Z+2, r26	; 0x02
     e6e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     e70:	ce 01       	movw	r24, r28
     e72:	86 59       	subi	r24, 0x96	; 150
     e74:	9f 4f       	sbci	r25, 0xFF	; 255
     e76:	20 e0       	ldi	r18, 0x00	; 0
     e78:	30 e0       	ldi	r19, 0x00	; 0
     e7a:	40 e8       	ldi	r20, 0x80	; 128
     e7c:	5f e3       	ldi	r21, 0x3F	; 63
     e7e:	fc 01       	movw	r30, r24
     e80:	60 81       	ld	r22, Z
     e82:	71 81       	ldd	r23, Z+1	; 0x01
     e84:	82 81       	ldd	r24, Z+2	; 0x02
     e86:	93 81       	ldd	r25, Z+3	; 0x03
     e88:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <__cmpsf2>
     e8c:	88 23       	and	r24, r24
     e8e:	4c f4       	brge	.+18     	; 0xea2 <__stack+0x5a3>
		__ticks = 1;
     e90:	ce 01       	movw	r24, r28
     e92:	82 59       	subi	r24, 0x92	; 146
     e94:	9f 4f       	sbci	r25, 0xFF	; 255
     e96:	21 e0       	ldi	r18, 0x01	; 1
     e98:	30 e0       	ldi	r19, 0x00	; 0
     e9a:	fc 01       	movw	r30, r24
     e9c:	31 83       	std	Z+1, r19	; 0x01
     e9e:	20 83       	st	Z, r18
     ea0:	6d c0       	rjmp	.+218    	; 0xf7c <__stack+0x67d>
	else if (__tmp > 65535)
     ea2:	ce 01       	movw	r24, r28
     ea4:	86 59       	subi	r24, 0x96	; 150
     ea6:	9f 4f       	sbci	r25, 0xFF	; 255
     ea8:	20 e0       	ldi	r18, 0x00	; 0
     eaa:	3f ef       	ldi	r19, 0xFF	; 255
     eac:	4f e7       	ldi	r20, 0x7F	; 127
     eae:	57 e4       	ldi	r21, 0x47	; 71
     eb0:	fc 01       	movw	r30, r24
     eb2:	60 81       	ld	r22, Z
     eb4:	71 81       	ldd	r23, Z+1	; 0x01
     eb6:	82 81       	ldd	r24, Z+2	; 0x02
     eb8:	93 81       	ldd	r25, Z+3	; 0x03
     eba:	0e 94 77 0e 	call	0x1cee	; 0x1cee <__gesf2>
     ebe:	18 16       	cp	r1, r24
     ec0:	0c f0       	brlt	.+2      	; 0xec4 <__stack+0x5c5>
     ec2:	4a c0       	rjmp	.+148    	; 0xf58 <__stack+0x659>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ec4:	ce 01       	movw	r24, r28
     ec6:	8a 59       	subi	r24, 0x9A	; 154
     ec8:	9f 4f       	sbci	r25, 0xFF	; 255
     eca:	20 e0       	ldi	r18, 0x00	; 0
     ecc:	30 e0       	ldi	r19, 0x00	; 0
     ece:	40 e2       	ldi	r20, 0x20	; 32
     ed0:	51 e4       	ldi	r21, 0x41	; 65
     ed2:	fc 01       	movw	r30, r24
     ed4:	60 81       	ld	r22, Z
     ed6:	71 81       	ldd	r23, Z+1	; 0x01
     ed8:	82 81       	ldd	r24, Z+2	; 0x02
     eda:	93 81       	ldd	r25, Z+3	; 0x03
     edc:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <__mulsf3>
     ee0:	dc 01       	movw	r26, r24
     ee2:	cb 01       	movw	r24, r22
     ee4:	8e 01       	movw	r16, r28
     ee6:	02 59       	subi	r16, 0x92	; 146
     ee8:	1f 4f       	sbci	r17, 0xFF	; 255
     eea:	bc 01       	movw	r22, r24
     eec:	cd 01       	movw	r24, r26
     eee:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <__fixunssfsi>
     ef2:	dc 01       	movw	r26, r24
     ef4:	cb 01       	movw	r24, r22
     ef6:	f8 01       	movw	r30, r16
     ef8:	91 83       	std	Z+1, r25	; 0x01
     efa:	80 83       	st	Z, r24
     efc:	24 c0       	rjmp	.+72     	; 0xf46 <__stack+0x647>
     efe:	ce 01       	movw	r24, r28
     f00:	80 59       	subi	r24, 0x90	; 144
     f02:	9f 4f       	sbci	r25, 0xFF	; 255
     f04:	20 e9       	ldi	r18, 0x90	; 144
     f06:	31 e0       	ldi	r19, 0x01	; 1
     f08:	fc 01       	movw	r30, r24
     f0a:	31 83       	std	Z+1, r19	; 0x01
     f0c:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f0e:	ce 01       	movw	r24, r28
     f10:	80 59       	subi	r24, 0x90	; 144
     f12:	9f 4f       	sbci	r25, 0xFF	; 255
     f14:	fc 01       	movw	r30, r24
     f16:	80 81       	ld	r24, Z
     f18:	91 81       	ldd	r25, Z+1	; 0x01
     f1a:	01 97       	sbiw	r24, 0x01	; 1
     f1c:	f1 f7       	brne	.-4      	; 0xf1a <__stack+0x61b>
     f1e:	9e 01       	movw	r18, r28
     f20:	20 59       	subi	r18, 0x90	; 144
     f22:	3f 4f       	sbci	r19, 0xFF	; 255
     f24:	f9 01       	movw	r30, r18
     f26:	91 83       	std	Z+1, r25	; 0x01
     f28:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f2a:	ce 01       	movw	r24, r28
     f2c:	82 59       	subi	r24, 0x92	; 146
     f2e:	9f 4f       	sbci	r25, 0xFF	; 255
     f30:	9e 01       	movw	r18, r28
     f32:	22 59       	subi	r18, 0x92	; 146
     f34:	3f 4f       	sbci	r19, 0xFF	; 255
     f36:	f9 01       	movw	r30, r18
     f38:	20 81       	ld	r18, Z
     f3a:	31 81       	ldd	r19, Z+1	; 0x01
     f3c:	21 50       	subi	r18, 0x01	; 1
     f3e:	31 09       	sbc	r19, r1
     f40:	fc 01       	movw	r30, r24
     f42:	31 83       	std	Z+1, r19	; 0x01
     f44:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f46:	ce 01       	movw	r24, r28
     f48:	82 59       	subi	r24, 0x92	; 146
     f4a:	9f 4f       	sbci	r25, 0xFF	; 255
     f4c:	fc 01       	movw	r30, r24
     f4e:	80 81       	ld	r24, Z
     f50:	91 81       	ldd	r25, Z+1	; 0x01
     f52:	89 2b       	or	r24, r25
     f54:	a1 f6       	brne	.-88     	; 0xefe <__stack+0x5ff>
     f56:	2c c0       	rjmp	.+88     	; 0xfb0 <__stack+0x6b1>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f58:	8e 01       	movw	r16, r28
     f5a:	02 59       	subi	r16, 0x92	; 146
     f5c:	1f 4f       	sbci	r17, 0xFF	; 255
     f5e:	ce 01       	movw	r24, r28
     f60:	86 59       	subi	r24, 0x96	; 150
     f62:	9f 4f       	sbci	r25, 0xFF	; 255
     f64:	fc 01       	movw	r30, r24
     f66:	60 81       	ld	r22, Z
     f68:	71 81       	ldd	r23, Z+1	; 0x01
     f6a:	82 81       	ldd	r24, Z+2	; 0x02
     f6c:	93 81       	ldd	r25, Z+3	; 0x03
     f6e:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <__fixunssfsi>
     f72:	dc 01       	movw	r26, r24
     f74:	cb 01       	movw	r24, r22
     f76:	f8 01       	movw	r30, r16
     f78:	91 83       	std	Z+1, r25	; 0x01
     f7a:	80 83       	st	Z, r24
     f7c:	ce 01       	movw	r24, r28
     f7e:	8e 58       	subi	r24, 0x8E	; 142
     f80:	9f 4f       	sbci	r25, 0xFF	; 255
     f82:	9e 01       	movw	r18, r28
     f84:	22 59       	subi	r18, 0x92	; 146
     f86:	3f 4f       	sbci	r19, 0xFF	; 255
     f88:	f9 01       	movw	r30, r18
     f8a:	20 81       	ld	r18, Z
     f8c:	31 81       	ldd	r19, Z+1	; 0x01
     f8e:	fc 01       	movw	r30, r24
     f90:	31 83       	std	Z+1, r19	; 0x01
     f92:	20 83       	st	Z, r18
     f94:	ce 01       	movw	r24, r28
     f96:	8e 58       	subi	r24, 0x8E	; 142
     f98:	9f 4f       	sbci	r25, 0xFF	; 255
     f9a:	fc 01       	movw	r30, r24
     f9c:	80 81       	ld	r24, Z
     f9e:	91 81       	ldd	r25, Z+1	; 0x01
     fa0:	01 97       	sbiw	r24, 0x01	; 1
     fa2:	f1 f7       	brne	.-4      	; 0xfa0 <__stack+0x6a1>
     fa4:	9e 01       	movw	r18, r28
     fa6:	2e 58       	subi	r18, 0x8E	; 142
     fa8:	3f 4f       	sbci	r19, 0xFF	; 255
     faa:	f9 01       	movw	r30, r18
     fac:	91 83       	std	Z+1, r25	; 0x01
     fae:	80 83       	st	Z, r24
        _delay_ms(200);
        //asm("nop"); // number of nop dependant processor speed (200ns min.)
        PORTD = (1<<2); // Set DL = High, duration must be > 200 ns (tH)
     fb0:	8b e2       	ldi	r24, 0x2B	; 43
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	24 e0       	ldi	r18, 0x04	; 4
     fb6:	fc 01       	movw	r30, r24
     fb8:	20 83       	st	Z, r18
     fba:	9e 01       	movw	r18, r28
     fbc:	2c 58       	subi	r18, 0x8C	; 140
     fbe:	3f 4f       	sbci	r19, 0xFF	; 255
     fc0:	80 e0       	ldi	r24, 0x00	; 0
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	a8 e4       	ldi	r26, 0x48	; 72
     fc6:	b3 e4       	ldi	r27, 0x43	; 67
     fc8:	f9 01       	movw	r30, r18
     fca:	80 83       	st	Z, r24
     fcc:	91 83       	std	Z+1, r25	; 0x01
     fce:	a2 83       	std	Z+2, r26	; 0x02
     fd0:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     fd2:	8e 01       	movw	r16, r28
     fd4:	08 58       	subi	r16, 0x88	; 136
     fd6:	1f 4f       	sbci	r17, 0xFF	; 255
     fd8:	ce 01       	movw	r24, r28
     fda:	8c 58       	subi	r24, 0x8C	; 140
     fdc:	9f 4f       	sbci	r25, 0xFF	; 255
     fde:	20 e0       	ldi	r18, 0x00	; 0
     fe0:	30 e0       	ldi	r19, 0x00	; 0
     fe2:	4a e7       	ldi	r20, 0x7A	; 122
     fe4:	55 e4       	ldi	r21, 0x45	; 69
     fe6:	fc 01       	movw	r30, r24
     fe8:	60 81       	ld	r22, Z
     fea:	71 81       	ldd	r23, Z+1	; 0x01
     fec:	82 81       	ldd	r24, Z+2	; 0x02
     fee:	93 81       	ldd	r25, Z+3	; 0x03
     ff0:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <__mulsf3>
     ff4:	dc 01       	movw	r26, r24
     ff6:	cb 01       	movw	r24, r22
     ff8:	f8 01       	movw	r30, r16
     ffa:	80 83       	st	Z, r24
     ffc:	91 83       	std	Z+1, r25	; 0x01
     ffe:	a2 83       	std	Z+2, r26	; 0x02
    1000:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1002:	ce 01       	movw	r24, r28
    1004:	88 58       	subi	r24, 0x88	; 136
    1006:	9f 4f       	sbci	r25, 0xFF	; 255
    1008:	20 e0       	ldi	r18, 0x00	; 0
    100a:	30 e0       	ldi	r19, 0x00	; 0
    100c:	40 e8       	ldi	r20, 0x80	; 128
    100e:	5f e3       	ldi	r21, 0x3F	; 63
    1010:	fc 01       	movw	r30, r24
    1012:	60 81       	ld	r22, Z
    1014:	71 81       	ldd	r23, Z+1	; 0x01
    1016:	82 81       	ldd	r24, Z+2	; 0x02
    1018:	93 81       	ldd	r25, Z+3	; 0x03
    101a:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <__cmpsf2>
    101e:	88 23       	and	r24, r24
    1020:	4c f4       	brge	.+18     	; 0x1034 <__stack+0x735>
		__ticks = 1;
    1022:	ce 01       	movw	r24, r28
    1024:	84 58       	subi	r24, 0x84	; 132
    1026:	9f 4f       	sbci	r25, 0xFF	; 255
    1028:	21 e0       	ldi	r18, 0x01	; 1
    102a:	30 e0       	ldi	r19, 0x00	; 0
    102c:	fc 01       	movw	r30, r24
    102e:	31 83       	std	Z+1, r19	; 0x01
    1030:	20 83       	st	Z, r18
    1032:	6d c0       	rjmp	.+218    	; 0x110e <__stack+0x80f>
	else if (__tmp > 65535)
    1034:	ce 01       	movw	r24, r28
    1036:	88 58       	subi	r24, 0x88	; 136
    1038:	9f 4f       	sbci	r25, 0xFF	; 255
    103a:	20 e0       	ldi	r18, 0x00	; 0
    103c:	3f ef       	ldi	r19, 0xFF	; 255
    103e:	4f e7       	ldi	r20, 0x7F	; 127
    1040:	57 e4       	ldi	r21, 0x47	; 71
    1042:	fc 01       	movw	r30, r24
    1044:	60 81       	ld	r22, Z
    1046:	71 81       	ldd	r23, Z+1	; 0x01
    1048:	82 81       	ldd	r24, Z+2	; 0x02
    104a:	93 81       	ldd	r25, Z+3	; 0x03
    104c:	0e 94 77 0e 	call	0x1cee	; 0x1cee <__gesf2>
    1050:	18 16       	cp	r1, r24
    1052:	0c f0       	brlt	.+2      	; 0x1056 <__stack+0x757>
    1054:	4a c0       	rjmp	.+148    	; 0x10ea <__stack+0x7eb>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1056:	ce 01       	movw	r24, r28
    1058:	8c 58       	subi	r24, 0x8C	; 140
    105a:	9f 4f       	sbci	r25, 0xFF	; 255
    105c:	20 e0       	ldi	r18, 0x00	; 0
    105e:	30 e0       	ldi	r19, 0x00	; 0
    1060:	40 e2       	ldi	r20, 0x20	; 32
    1062:	51 e4       	ldi	r21, 0x41	; 65
    1064:	fc 01       	movw	r30, r24
    1066:	60 81       	ld	r22, Z
    1068:	71 81       	ldd	r23, Z+1	; 0x01
    106a:	82 81       	ldd	r24, Z+2	; 0x02
    106c:	93 81       	ldd	r25, Z+3	; 0x03
    106e:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <__mulsf3>
    1072:	dc 01       	movw	r26, r24
    1074:	cb 01       	movw	r24, r22
    1076:	8e 01       	movw	r16, r28
    1078:	04 58       	subi	r16, 0x84	; 132
    107a:	1f 4f       	sbci	r17, 0xFF	; 255
    107c:	bc 01       	movw	r22, r24
    107e:	cd 01       	movw	r24, r26
    1080:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <__fixunssfsi>
    1084:	dc 01       	movw	r26, r24
    1086:	cb 01       	movw	r24, r22
    1088:	f8 01       	movw	r30, r16
    108a:	91 83       	std	Z+1, r25	; 0x01
    108c:	80 83       	st	Z, r24
    108e:	24 c0       	rjmp	.+72     	; 0x10d8 <__stack+0x7d9>
    1090:	ce 01       	movw	r24, r28
    1092:	82 58       	subi	r24, 0x82	; 130
    1094:	9f 4f       	sbci	r25, 0xFF	; 255
    1096:	20 e9       	ldi	r18, 0x90	; 144
    1098:	31 e0       	ldi	r19, 0x01	; 1
    109a:	fc 01       	movw	r30, r24
    109c:	31 83       	std	Z+1, r19	; 0x01
    109e:	20 83       	st	Z, r18
    10a0:	ce 01       	movw	r24, r28
    10a2:	82 58       	subi	r24, 0x82	; 130
    10a4:	9f 4f       	sbci	r25, 0xFF	; 255
    10a6:	fc 01       	movw	r30, r24
    10a8:	80 81       	ld	r24, Z
    10aa:	91 81       	ldd	r25, Z+1	; 0x01
    10ac:	01 97       	sbiw	r24, 0x01	; 1
    10ae:	f1 f7       	brne	.-4      	; 0x10ac <__stack+0x7ad>
    10b0:	9e 01       	movw	r18, r28
    10b2:	22 58       	subi	r18, 0x82	; 130
    10b4:	3f 4f       	sbci	r19, 0xFF	; 255
    10b6:	f9 01       	movw	r30, r18
    10b8:	91 83       	std	Z+1, r25	; 0x01
    10ba:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10bc:	ce 01       	movw	r24, r28
    10be:	84 58       	subi	r24, 0x84	; 132
    10c0:	9f 4f       	sbci	r25, 0xFF	; 255
    10c2:	9e 01       	movw	r18, r28
    10c4:	24 58       	subi	r18, 0x84	; 132
    10c6:	3f 4f       	sbci	r19, 0xFF	; 255
    10c8:	f9 01       	movw	r30, r18
    10ca:	20 81       	ld	r18, Z
    10cc:	31 81       	ldd	r19, Z+1	; 0x01
    10ce:	21 50       	subi	r18, 0x01	; 1
    10d0:	31 09       	sbc	r19, r1
    10d2:	fc 01       	movw	r30, r24
    10d4:	31 83       	std	Z+1, r19	; 0x01
    10d6:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10d8:	ce 01       	movw	r24, r28
    10da:	84 58       	subi	r24, 0x84	; 132
    10dc:	9f 4f       	sbci	r25, 0xFF	; 255
    10de:	fc 01       	movw	r30, r24
    10e0:	80 81       	ld	r24, Z
    10e2:	91 81       	ldd	r25, Z+1	; 0x01
    10e4:	89 2b       	or	r24, r25
    10e6:	a1 f6       	brne	.-88     	; 0x1090 <__stack+0x791>
    10e8:	2c c0       	rjmp	.+88     	; 0x1142 <__stack+0x843>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10ea:	8e 01       	movw	r16, r28
    10ec:	04 58       	subi	r16, 0x84	; 132
    10ee:	1f 4f       	sbci	r17, 0xFF	; 255
    10f0:	ce 01       	movw	r24, r28
    10f2:	88 58       	subi	r24, 0x88	; 136
    10f4:	9f 4f       	sbci	r25, 0xFF	; 255
    10f6:	fc 01       	movw	r30, r24
    10f8:	60 81       	ld	r22, Z
    10fa:	71 81       	ldd	r23, Z+1	; 0x01
    10fc:	82 81       	ldd	r24, Z+2	; 0x02
    10fe:	93 81       	ldd	r25, Z+3	; 0x03
    1100:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <__fixunssfsi>
    1104:	dc 01       	movw	r26, r24
    1106:	cb 01       	movw	r24, r22
    1108:	f8 01       	movw	r30, r16
    110a:	91 83       	std	Z+1, r25	; 0x01
    110c:	80 83       	st	Z, r24
    110e:	ce 01       	movw	r24, r28
    1110:	80 58       	subi	r24, 0x80	; 128
    1112:	9f 4f       	sbci	r25, 0xFF	; 255
    1114:	9e 01       	movw	r18, r28
    1116:	24 58       	subi	r18, 0x84	; 132
    1118:	3f 4f       	sbci	r19, 0xFF	; 255
    111a:	f9 01       	movw	r30, r18
    111c:	20 81       	ld	r18, Z
    111e:	31 81       	ldd	r19, Z+1	; 0x01
    1120:	fc 01       	movw	r30, r24
    1122:	31 83       	std	Z+1, r19	; 0x01
    1124:	20 83       	st	Z, r18
    1126:	ce 01       	movw	r24, r28
    1128:	80 58       	subi	r24, 0x80	; 128
    112a:	9f 4f       	sbci	r25, 0xFF	; 255
    112c:	fc 01       	movw	r30, r24
    112e:	80 81       	ld	r24, Z
    1130:	91 81       	ldd	r25, Z+1	; 0x01
    1132:	01 97       	sbiw	r24, 0x01	; 1
    1134:	f1 f7       	brne	.-4      	; 0x1132 <__stack+0x833>
    1136:	9e 01       	movw	r18, r28
    1138:	20 58       	subi	r18, 0x80	; 128
    113a:	3f 4f       	sbci	r19, 0xFF	; 255
    113c:	f9 01       	movw	r30, r18
    113e:	91 83       	std	Z+1, r25	; 0x01
    1140:	80 83       	st	Z, r24
        _delay_ms(200);
        DDRD = (0<<2); // Configure DL as Input
    1142:	8a e2       	ldi	r24, 0x2A	; 42
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	fc 01       	movw	r30, r24
    1148:	10 82       	st	Z, r1
    114a:	9e 01       	movw	r18, r28
    114c:	2e 57       	subi	r18, 0x7E	; 126
    114e:	3f 4f       	sbci	r19, 0xFF	; 255
    1150:	80 e0       	ldi	r24, 0x00	; 0
    1152:	90 e0       	ldi	r25, 0x00	; 0
    1154:	a0 e4       	ldi	r26, 0x40	; 64
    1156:	b0 e4       	ldi	r27, 0x40	; 64
    1158:	f9 01       	movw	r30, r18
    115a:	80 83       	st	Z, r24
    115c:	91 83       	std	Z+1, r25	; 0x01
    115e:	a2 83       	std	Z+2, r26	; 0x02
    1160:	b3 83       	std	Z+3, r27	; 0x03
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    1162:	8e 01       	movw	r16, r28
    1164:	0a 57       	subi	r16, 0x7A	; 122
    1166:	1f 4f       	sbci	r17, 0xFF	; 255
    1168:	ce 01       	movw	r24, r28
    116a:	8e 57       	subi	r24, 0x7E	; 126
    116c:	9f 4f       	sbci	r25, 0xFF	; 255
    116e:	2b ea       	ldi	r18, 0xAB	; 171
    1170:	3a ea       	ldi	r19, 0xAA	; 170
    1172:	4a ea       	ldi	r20, 0xAA	; 170
    1174:	50 e4       	ldi	r21, 0x40	; 64
    1176:	fc 01       	movw	r30, r24
    1178:	60 81       	ld	r22, Z
    117a:	71 81       	ldd	r23, Z+1	; 0x01
    117c:	82 81       	ldd	r24, Z+2	; 0x02
    117e:	93 81       	ldd	r25, Z+3	; 0x03
    1180:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <__mulsf3>
    1184:	dc 01       	movw	r26, r24
    1186:	cb 01       	movw	r24, r22
    1188:	f8 01       	movw	r30, r16
    118a:	80 83       	st	Z, r24
    118c:	91 83       	std	Z+1, r25	; 0x01
    118e:	a2 83       	std	Z+2, r26	; 0x02
    1190:	b3 83       	std	Z+3, r27	; 0x03
	__tmp2 = ((F_CPU) / 4e6) * __us;
    1192:	8e 01       	movw	r16, r28
    1194:	06 57       	subi	r16, 0x76	; 118
    1196:	1f 4f       	sbci	r17, 0xFF	; 255
    1198:	ce 01       	movw	r24, r28
    119a:	8e 57       	subi	r24, 0x7E	; 126
    119c:	9f 4f       	sbci	r25, 0xFF	; 255
    119e:	20 e0       	ldi	r18, 0x00	; 0
    11a0:	30 e0       	ldi	r19, 0x00	; 0
    11a2:	40 e8       	ldi	r20, 0x80	; 128
    11a4:	50 e4       	ldi	r21, 0x40	; 64
    11a6:	fc 01       	movw	r30, r24
    11a8:	60 81       	ld	r22, Z
    11aa:	71 81       	ldd	r23, Z+1	; 0x01
    11ac:	82 81       	ldd	r24, Z+2	; 0x02
    11ae:	93 81       	ldd	r25, Z+3	; 0x03
    11b0:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <__mulsf3>
    11b4:	dc 01       	movw	r26, r24
    11b6:	cb 01       	movw	r24, r22
    11b8:	f8 01       	movw	r30, r16
    11ba:	80 83       	st	Z, r24
    11bc:	91 83       	std	Z+1, r25	; 0x01
    11be:	a2 83       	std	Z+2, r26	; 0x02
    11c0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    11c2:	ce 01       	movw	r24, r28
    11c4:	8a 57       	subi	r24, 0x7A	; 122
    11c6:	9f 4f       	sbci	r25, 0xFF	; 255
    11c8:	20 e0       	ldi	r18, 0x00	; 0
    11ca:	30 e0       	ldi	r19, 0x00	; 0
    11cc:	40 e8       	ldi	r20, 0x80	; 128
    11ce:	5f e3       	ldi	r21, 0x3F	; 63
    11d0:	fc 01       	movw	r30, r24
    11d2:	60 81       	ld	r22, Z
    11d4:	71 81       	ldd	r23, Z+1	; 0x01
    11d6:	82 81       	ldd	r24, Z+2	; 0x02
    11d8:	93 81       	ldd	r25, Z+3	; 0x03
    11da:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <__cmpsf2>
    11de:	88 23       	and	r24, r24
    11e0:	3c f4       	brge	.+14     	; 0x11f0 <__stack+0x8f1>
		__ticks = 1;
    11e2:	ce 01       	movw	r24, r28
    11e4:	82 57       	subi	r24, 0x72	; 114
    11e6:	9f 4f       	sbci	r25, 0xFF	; 255
    11e8:	21 e0       	ldi	r18, 0x01	; 1
    11ea:	fc 01       	movw	r30, r24
    11ec:	20 83       	st	Z, r18
    11ee:	44 c1       	rjmp	.+648    	; 0x1478 <__stack+0xb79>
	else if (__tmp2 > 65535)
    11f0:	ce 01       	movw	r24, r28
    11f2:	86 57       	subi	r24, 0x76	; 118
    11f4:	9f 4f       	sbci	r25, 0xFF	; 255
    11f6:	20 e0       	ldi	r18, 0x00	; 0
    11f8:	3f ef       	ldi	r19, 0xFF	; 255
    11fa:	4f e7       	ldi	r20, 0x7F	; 127
    11fc:	57 e4       	ldi	r21, 0x47	; 71
    11fe:	fc 01       	movw	r30, r24
    1200:	60 81       	ld	r22, Z
    1202:	71 81       	ldd	r23, Z+1	; 0x01
    1204:	82 81       	ldd	r24, Z+2	; 0x02
    1206:	93 81       	ldd	r25, Z+3	; 0x03
    1208:	0e 94 77 0e 	call	0x1cee	; 0x1cee <__gesf2>
    120c:	18 16       	cp	r1, r24
    120e:	0c f0       	brlt	.+2      	; 0x1212 <__stack+0x913>
    1210:	e5 c0       	rjmp	.+458    	; 0x13dc <__stack+0xadd>
	{
		_delay_ms(__us / 1000.0);
    1212:	ce 01       	movw	r24, r28
    1214:	8e 57       	subi	r24, 0x7E	; 126
    1216:	9f 4f       	sbci	r25, 0xFF	; 255
    1218:	20 e0       	ldi	r18, 0x00	; 0
    121a:	30 e0       	ldi	r19, 0x00	; 0
    121c:	4a e7       	ldi	r20, 0x7A	; 122
    121e:	54 e4       	ldi	r21, 0x44	; 68
    1220:	fc 01       	movw	r30, r24
    1222:	60 81       	ld	r22, Z
    1224:	71 81       	ldd	r23, Z+1	; 0x01
    1226:	82 81       	ldd	r24, Z+2	; 0x02
    1228:	93 81       	ldd	r25, Z+3	; 0x03
    122a:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <__divsf3>
    122e:	dc 01       	movw	r26, r24
    1230:	cb 01       	movw	r24, r22
    1232:	9e 01       	movw	r18, r28
    1234:	21 57       	subi	r18, 0x71	; 113
    1236:	3f 4f       	sbci	r19, 0xFF	; 255
    1238:	f9 01       	movw	r30, r18
    123a:	80 83       	st	Z, r24
    123c:	91 83       	std	Z+1, r25	; 0x01
    123e:	a2 83       	std	Z+2, r26	; 0x02
    1240:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1242:	8e 01       	movw	r16, r28
    1244:	0d 56       	subi	r16, 0x6D	; 109
    1246:	1f 4f       	sbci	r17, 0xFF	; 255
    1248:	ce 01       	movw	r24, r28
    124a:	81 57       	subi	r24, 0x71	; 113
    124c:	9f 4f       	sbci	r25, 0xFF	; 255
    124e:	20 e0       	ldi	r18, 0x00	; 0
    1250:	30 e0       	ldi	r19, 0x00	; 0
    1252:	4a e7       	ldi	r20, 0x7A	; 122
    1254:	55 e4       	ldi	r21, 0x45	; 69
    1256:	fc 01       	movw	r30, r24
    1258:	60 81       	ld	r22, Z
    125a:	71 81       	ldd	r23, Z+1	; 0x01
    125c:	82 81       	ldd	r24, Z+2	; 0x02
    125e:	93 81       	ldd	r25, Z+3	; 0x03
    1260:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <__mulsf3>
    1264:	dc 01       	movw	r26, r24
    1266:	cb 01       	movw	r24, r22
    1268:	f8 01       	movw	r30, r16
    126a:	80 83       	st	Z, r24
    126c:	91 83       	std	Z+1, r25	; 0x01
    126e:	a2 83       	std	Z+2, r26	; 0x02
    1270:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1272:	ce 01       	movw	r24, r28
    1274:	8d 56       	subi	r24, 0x6D	; 109
    1276:	9f 4f       	sbci	r25, 0xFF	; 255
    1278:	20 e0       	ldi	r18, 0x00	; 0
    127a:	30 e0       	ldi	r19, 0x00	; 0
    127c:	40 e8       	ldi	r20, 0x80	; 128
    127e:	5f e3       	ldi	r21, 0x3F	; 63
    1280:	fc 01       	movw	r30, r24
    1282:	60 81       	ld	r22, Z
    1284:	71 81       	ldd	r23, Z+1	; 0x01
    1286:	82 81       	ldd	r24, Z+2	; 0x02
    1288:	93 81       	ldd	r25, Z+3	; 0x03
    128a:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <__cmpsf2>
    128e:	88 23       	and	r24, r24
    1290:	4c f4       	brge	.+18     	; 0x12a4 <__stack+0x9a5>
		__ticks = 1;
    1292:	ce 01       	movw	r24, r28
    1294:	89 56       	subi	r24, 0x69	; 105
    1296:	9f 4f       	sbci	r25, 0xFF	; 255
    1298:	21 e0       	ldi	r18, 0x01	; 1
    129a:	30 e0       	ldi	r19, 0x00	; 0
    129c:	fc 01       	movw	r30, r24
    129e:	31 83       	std	Z+1, r19	; 0x01
    12a0:	20 83       	st	Z, r18
    12a2:	77 c0       	rjmp	.+238    	; 0x1392 <__stack+0xa93>
	else if (__tmp > 65535)
    12a4:	ce 01       	movw	r24, r28
    12a6:	8d 56       	subi	r24, 0x6D	; 109
    12a8:	9f 4f       	sbci	r25, 0xFF	; 255
    12aa:	20 e0       	ldi	r18, 0x00	; 0
    12ac:	3f ef       	ldi	r19, 0xFF	; 255
    12ae:	4f e7       	ldi	r20, 0x7F	; 127
    12b0:	57 e4       	ldi	r21, 0x47	; 71
    12b2:	fc 01       	movw	r30, r24
    12b4:	60 81       	ld	r22, Z
    12b6:	71 81       	ldd	r23, Z+1	; 0x01
    12b8:	82 81       	ldd	r24, Z+2	; 0x02
    12ba:	93 81       	ldd	r25, Z+3	; 0x03
    12bc:	0e 94 77 0e 	call	0x1cee	; 0x1cee <__gesf2>
    12c0:	18 16       	cp	r1, r24
    12c2:	0c f0       	brlt	.+2      	; 0x12c6 <__stack+0x9c7>
    12c4:	54 c0       	rjmp	.+168    	; 0x136e <__stack+0xa6f>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12c6:	ce 01       	movw	r24, r28
    12c8:	81 57       	subi	r24, 0x71	; 113
    12ca:	9f 4f       	sbci	r25, 0xFF	; 255
    12cc:	20 e0       	ldi	r18, 0x00	; 0
    12ce:	30 e0       	ldi	r19, 0x00	; 0
    12d0:	40 e2       	ldi	r20, 0x20	; 32
    12d2:	51 e4       	ldi	r21, 0x41	; 65
    12d4:	fc 01       	movw	r30, r24
    12d6:	60 81       	ld	r22, Z
    12d8:	71 81       	ldd	r23, Z+1	; 0x01
    12da:	82 81       	ldd	r24, Z+2	; 0x02
    12dc:	93 81       	ldd	r25, Z+3	; 0x03
    12de:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <__mulsf3>
    12e2:	dc 01       	movw	r26, r24
    12e4:	cb 01       	movw	r24, r22
    12e6:	8e 01       	movw	r16, r28
    12e8:	09 56       	subi	r16, 0x69	; 105
    12ea:	1f 4f       	sbci	r17, 0xFF	; 255
    12ec:	bc 01       	movw	r22, r24
    12ee:	cd 01       	movw	r24, r26
    12f0:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <__fixunssfsi>
    12f4:	dc 01       	movw	r26, r24
    12f6:	cb 01       	movw	r24, r22
    12f8:	f8 01       	movw	r30, r16
    12fa:	91 83       	std	Z+1, r25	; 0x01
    12fc:	80 83       	st	Z, r24
    12fe:	24 c0       	rjmp	.+72     	; 0x1348 <__stack+0xa49>
    1300:	ce 01       	movw	r24, r28
    1302:	87 56       	subi	r24, 0x67	; 103
    1304:	9f 4f       	sbci	r25, 0xFF	; 255
    1306:	20 e9       	ldi	r18, 0x90	; 144
    1308:	31 e0       	ldi	r19, 0x01	; 1
    130a:	fc 01       	movw	r30, r24
    130c:	31 83       	std	Z+1, r19	; 0x01
    130e:	20 83       	st	Z, r18
    1310:	ce 01       	movw	r24, r28
    1312:	87 56       	subi	r24, 0x67	; 103
    1314:	9f 4f       	sbci	r25, 0xFF	; 255
    1316:	fc 01       	movw	r30, r24
    1318:	80 81       	ld	r24, Z
    131a:	91 81       	ldd	r25, Z+1	; 0x01
    131c:	01 97       	sbiw	r24, 0x01	; 1
    131e:	f1 f7       	brne	.-4      	; 0x131c <__stack+0xa1d>
    1320:	9e 01       	movw	r18, r28
    1322:	27 56       	subi	r18, 0x67	; 103
    1324:	3f 4f       	sbci	r19, 0xFF	; 255
    1326:	f9 01       	movw	r30, r18
    1328:	91 83       	std	Z+1, r25	; 0x01
    132a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    132c:	ce 01       	movw	r24, r28
    132e:	89 56       	subi	r24, 0x69	; 105
    1330:	9f 4f       	sbci	r25, 0xFF	; 255
    1332:	9e 01       	movw	r18, r28
    1334:	29 56       	subi	r18, 0x69	; 105
    1336:	3f 4f       	sbci	r19, 0xFF	; 255
    1338:	f9 01       	movw	r30, r18
    133a:	20 81       	ld	r18, Z
    133c:	31 81       	ldd	r19, Z+1	; 0x01
    133e:	21 50       	subi	r18, 0x01	; 1
    1340:	31 09       	sbc	r19, r1
    1342:	fc 01       	movw	r30, r24
    1344:	31 83       	std	Z+1, r19	; 0x01
    1346:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1348:	ce 01       	movw	r24, r28
    134a:	89 56       	subi	r24, 0x69	; 105
    134c:	9f 4f       	sbci	r25, 0xFF	; 255
    134e:	fc 01       	movw	r30, r24
    1350:	80 81       	ld	r24, Z
    1352:	91 81       	ldd	r25, Z+1	; 0x01
    1354:	89 2b       	or	r24, r25
    1356:	a1 f6       	brne	.-88     	; 0x1300 <__stack+0xa01>
    1358:	ce 01       	movw	r24, r28
    135a:	82 57       	subi	r24, 0x72	; 114
    135c:	9f 4f       	sbci	r25, 0xFF	; 255
    135e:	9e 01       	movw	r18, r28
    1360:	2e 55       	subi	r18, 0x5E	; 94
    1362:	3f 4f       	sbci	r19, 0xFF	; 255
    1364:	f9 01       	movw	r30, r18
    1366:	20 81       	ld	r18, Z
    1368:	fc 01       	movw	r30, r24
    136a:	20 83       	st	Z, r18
    136c:	85 c0       	rjmp	.+266    	; 0x1478 <__stack+0xb79>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    136e:	8e 01       	movw	r16, r28
    1370:	09 56       	subi	r16, 0x69	; 105
    1372:	1f 4f       	sbci	r17, 0xFF	; 255
    1374:	ce 01       	movw	r24, r28
    1376:	8d 56       	subi	r24, 0x6D	; 109
    1378:	9f 4f       	sbci	r25, 0xFF	; 255
    137a:	fc 01       	movw	r30, r24
    137c:	60 81       	ld	r22, Z
    137e:	71 81       	ldd	r23, Z+1	; 0x01
    1380:	82 81       	ldd	r24, Z+2	; 0x02
    1382:	93 81       	ldd	r25, Z+3	; 0x03
    1384:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <__fixunssfsi>
    1388:	dc 01       	movw	r26, r24
    138a:	cb 01       	movw	r24, r22
    138c:	f8 01       	movw	r30, r16
    138e:	91 83       	std	Z+1, r25	; 0x01
    1390:	80 83       	st	Z, r24
    1392:	ce 01       	movw	r24, r28
    1394:	85 56       	subi	r24, 0x65	; 101
    1396:	9f 4f       	sbci	r25, 0xFF	; 255
    1398:	9e 01       	movw	r18, r28
    139a:	29 56       	subi	r18, 0x69	; 105
    139c:	3f 4f       	sbci	r19, 0xFF	; 255
    139e:	f9 01       	movw	r30, r18
    13a0:	20 81       	ld	r18, Z
    13a2:	31 81       	ldd	r19, Z+1	; 0x01
    13a4:	fc 01       	movw	r30, r24
    13a6:	31 83       	std	Z+1, r19	; 0x01
    13a8:	20 83       	st	Z, r18
    13aa:	ce 01       	movw	r24, r28
    13ac:	85 56       	subi	r24, 0x65	; 101
    13ae:	9f 4f       	sbci	r25, 0xFF	; 255
    13b0:	fc 01       	movw	r30, r24
    13b2:	80 81       	ld	r24, Z
    13b4:	91 81       	ldd	r25, Z+1	; 0x01
    13b6:	01 97       	sbiw	r24, 0x01	; 1
    13b8:	f1 f7       	brne	.-4      	; 0x13b6 <__stack+0xab7>
    13ba:	9e 01       	movw	r18, r28
    13bc:	25 56       	subi	r18, 0x65	; 101
    13be:	3f 4f       	sbci	r19, 0xFF	; 255
    13c0:	f9 01       	movw	r30, r18
    13c2:	91 83       	std	Z+1, r25	; 0x01
    13c4:	80 83       	st	Z, r24
    13c6:	ce 01       	movw	r24, r28
    13c8:	82 57       	subi	r24, 0x72	; 114
    13ca:	9f 4f       	sbci	r25, 0xFF	; 255
    13cc:	9e 01       	movw	r18, r28
    13ce:	2e 55       	subi	r18, 0x5E	; 94
    13d0:	3f 4f       	sbci	r19, 0xFF	; 255
    13d2:	f9 01       	movw	r30, r18
    13d4:	20 81       	ld	r18, Z
    13d6:	fc 01       	movw	r30, r24
    13d8:	20 83       	st	Z, r18
    13da:	4e c0       	rjmp	.+156    	; 0x1478 <__stack+0xb79>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    13dc:	ce 01       	movw	r24, r28
    13de:	8a 57       	subi	r24, 0x7A	; 122
    13e0:	9f 4f       	sbci	r25, 0xFF	; 255
    13e2:	20 e0       	ldi	r18, 0x00	; 0
    13e4:	30 e0       	ldi	r19, 0x00	; 0
    13e6:	4f e7       	ldi	r20, 0x7F	; 127
    13e8:	53 e4       	ldi	r21, 0x43	; 67
    13ea:	fc 01       	movw	r30, r24
    13ec:	60 81       	ld	r22, Z
    13ee:	71 81       	ldd	r23, Z+1	; 0x01
    13f0:	82 81       	ldd	r24, Z+2	; 0x02
    13f2:	93 81       	ldd	r25, Z+3	; 0x03
    13f4:	0e 94 77 0e 	call	0x1cee	; 0x1cee <__gesf2>
    13f8:	18 16       	cp	r1, r24
    13fa:	6c f5       	brge	.+90     	; 0x1456 <__stack+0xb57>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    13fc:	8e 01       	movw	r16, r28
    13fe:	03 56       	subi	r16, 0x63	; 99
    1400:	1f 4f       	sbci	r17, 0xFF	; 255
    1402:	ce 01       	movw	r24, r28
    1404:	86 57       	subi	r24, 0x76	; 118
    1406:	9f 4f       	sbci	r25, 0xFF	; 255
    1408:	fc 01       	movw	r30, r24
    140a:	60 81       	ld	r22, Z
    140c:	71 81       	ldd	r23, Z+1	; 0x01
    140e:	82 81       	ldd	r24, Z+2	; 0x02
    1410:	93 81       	ldd	r25, Z+3	; 0x03
    1412:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <__fixunssfsi>
    1416:	dc 01       	movw	r26, r24
    1418:	cb 01       	movw	r24, r22
    141a:	f8 01       	movw	r30, r16
    141c:	91 83       	std	Z+1, r25	; 0x01
    141e:	80 83       	st	Z, r24
    1420:	ce 01       	movw	r24, r28
    1422:	81 56       	subi	r24, 0x61	; 97
    1424:	9f 4f       	sbci	r25, 0xFF	; 255
    1426:	9e 01       	movw	r18, r28
    1428:	23 56       	subi	r18, 0x63	; 99
    142a:	3f 4f       	sbci	r19, 0xFF	; 255
    142c:	f9 01       	movw	r30, r18
    142e:	20 81       	ld	r18, Z
    1430:	31 81       	ldd	r19, Z+1	; 0x01
    1432:	fc 01       	movw	r30, r24
    1434:	31 83       	std	Z+1, r19	; 0x01
    1436:	20 83       	st	Z, r18
    1438:	ce 01       	movw	r24, r28
    143a:	81 56       	subi	r24, 0x61	; 97
    143c:	9f 4f       	sbci	r25, 0xFF	; 255
    143e:	fc 01       	movw	r30, r24
    1440:	80 81       	ld	r24, Z
    1442:	91 81       	ldd	r25, Z+1	; 0x01
    1444:	01 97       	sbiw	r24, 0x01	; 1
    1446:	f1 f7       	brne	.-4      	; 0x1444 <__stack+0xb45>
    1448:	9e 01       	movw	r18, r28
    144a:	21 56       	subi	r18, 0x61	; 97
    144c:	3f 4f       	sbci	r19, 0xFF	; 255
    144e:	f9 01       	movw	r30, r18
    1450:	91 83       	std	Z+1, r25	; 0x01
    1452:	80 83       	st	Z, r24
    1454:	28 c0       	rjmp	.+80     	; 0x14a6 <__stack+0xba7>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1456:	8e 01       	movw	r16, r28
    1458:	02 57       	subi	r16, 0x72	; 114
    145a:	1f 4f       	sbci	r17, 0xFF	; 255
    145c:	ce 01       	movw	r24, r28
    145e:	8a 57       	subi	r24, 0x7A	; 122
    1460:	9f 4f       	sbci	r25, 0xFF	; 255
    1462:	fc 01       	movw	r30, r24
    1464:	60 81       	ld	r22, Z
    1466:	71 81       	ldd	r23, Z+1	; 0x01
    1468:	82 81       	ldd	r24, Z+2	; 0x02
    146a:	93 81       	ldd	r25, Z+3	; 0x03
    146c:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <__fixunssfsi>
    1470:	dc 01       	movw	r26, r24
    1472:	cb 01       	movw	r24, r22
    1474:	f8 01       	movw	r30, r16
    1476:	80 83       	st	Z, r24
    1478:	ce 01       	movw	r24, r28
    147a:	8f 55       	subi	r24, 0x5F	; 95
    147c:	9f 4f       	sbci	r25, 0xFF	; 255
    147e:	9e 01       	movw	r18, r28
    1480:	22 57       	subi	r18, 0x72	; 114
    1482:	3f 4f       	sbci	r19, 0xFF	; 255
    1484:	f9 01       	movw	r30, r18
    1486:	20 81       	ld	r18, Z
    1488:	fc 01       	movw	r30, r24
    148a:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    148c:	ce 01       	movw	r24, r28
    148e:	8f 55       	subi	r24, 0x5F	; 95
    1490:	9f 4f       	sbci	r25, 0xFF	; 255
    1492:	fc 01       	movw	r30, r24
    1494:	80 81       	ld	r24, Z
    1496:	28 2f       	mov	r18, r24
    1498:	2a 95       	dec	r18
    149a:	f1 f7       	brne	.-4      	; 0x1498 <__stack+0xb99>
    149c:	ce 01       	movw	r24, r28
    149e:	8f 55       	subi	r24, 0x5F	; 95
    14a0:	9f 4f       	sbci	r25, 0xFF	; 255
    14a2:	fc 01       	movw	r30, r24
    14a4:	20 83       	st	Z, r18
        _delay_us(3); // Wait for stable low signal, tbd empirically using scope
        // If DL High set masked bit
        if (PIND & 0x02) statcfg |= ulbitmask;
    14a6:	89 e2       	ldi	r24, 0x29	; 41
    14a8:	90 e0       	ldi	r25, 0x00	; 0
    14aa:	fc 01       	movw	r30, r24
    14ac:	80 81       	ld	r24, Z
    14ae:	88 2f       	mov	r24, r24
    14b0:	90 e0       	ldi	r25, 0x00	; 0
    14b2:	82 70       	andi	r24, 0x02	; 2
    14b4:	99 27       	eor	r25, r25
    14b6:	89 2b       	or	r24, r25
    14b8:	c1 f0       	breq	.+48     	; 0x14ea <__stack+0xbeb>
    14ba:	20 91 82 01 	lds	r18, 0x0182	; 0x800182 <statcfg>
    14be:	30 91 83 01 	lds	r19, 0x0183	; 0x800183 <statcfg+0x1>
    14c2:	40 91 84 01 	lds	r20, 0x0184	; 0x800184 <statcfg+0x2>
    14c6:	50 91 85 01 	lds	r21, 0x0185	; 0x800185 <statcfg+0x3>
    14ca:	8d 81       	ldd	r24, Y+5	; 0x05
    14cc:	9e 81       	ldd	r25, Y+6	; 0x06
    14ce:	af 81       	ldd	r26, Y+7	; 0x07
    14d0:	b8 85       	ldd	r27, Y+8	; 0x08
    14d2:	82 2b       	or	r24, r18
    14d4:	93 2b       	or	r25, r19
    14d6:	a4 2b       	or	r26, r20
    14d8:	b5 2b       	or	r27, r21
    14da:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <statcfg>
    14de:	90 93 83 01 	sts	0x0183, r25	; 0x800183 <statcfg+0x1>
    14e2:	a0 93 84 01 	sts	0x0184, r26	; 0x800184 <statcfg+0x2>
    14e6:	b0 93 85 01 	sts	0x0185, r27	; 0x800185 <statcfg+0x3>
            ulbitmask>>=1;
    14ea:	8d 81       	ldd	r24, Y+5	; 0x05
    14ec:	9e 81       	ldd	r25, Y+6	; 0x06
    14ee:	af 81       	ldd	r26, Y+7	; 0x07
    14f0:	b8 85       	ldd	r27, Y+8	; 0x08
    14f2:	b6 95       	lsr	r27
    14f4:	a7 95       	ror	r26
    14f6:	97 95       	ror	r25
    14f8:	87 95       	ror	r24
    14fa:	8d 83       	std	Y+5, r24	; 0x05
    14fc:	9e 83       	std	Y+6, r25	; 0x06
    14fe:	af 83       	std	Y+7, r26	; 0x07
    1500:	b8 87       	std	Y+8, r27	; 0x08
            uibitmask>>=1;
    }
    // get 25bit status and config
    ulbitmask = 0x1000000; // Set BitPos
    statcfg = 0;
    for (i=0; i < 25; i++){
    1502:	89 81       	ldd	r24, Y+1	; 0x01
    1504:	9a 81       	ldd	r25, Y+2	; 0x02
    1506:	01 96       	adiw	r24, 0x01	; 1
    1508:	9a 83       	std	Y+2, r25	; 0x02
    150a:	89 83       	std	Y+1, r24	; 0x01
    150c:	89 81       	ldd	r24, Y+1	; 0x01
    150e:	9a 81       	ldd	r25, Y+2	; 0x02
    1510:	49 97       	sbiw	r24, 0x19	; 25
    1512:	0c f4       	brge	.+2      	; 0x1516 <__stack+0xc17>
    1514:	80 cc       	rjmp	.-1792   	; 0xe16 <__stack+0x517>
        _delay_us(3); // Wait for stable low signal, tbd empirically using scope
        // If DL High set masked bit
        if (PIND & 0x02) statcfg |= ulbitmask;
            ulbitmask>>=1;
    }
    PORTD = (0<<2); // Set DL = Low
    1516:	8b e2       	ldi	r24, 0x2B	; 43
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	fc 01       	movw	r30, r24
    151c:	10 82       	st	Z, r1
    DDRD = (1<<2); // Configure DL as Output
    151e:	8a e2       	ldi	r24, 0x2A	; 42
    1520:	90 e0       	ldi	r25, 0x00	; 0
    1522:	24 e0       	ldi	r18, 0x04	; 4
    1524:	fc 01       	movw	r30, r24
    1526:	20 83       	st	Z, r18
    1528:	9e 01       	movw	r18, r28
    152a:	2d 55       	subi	r18, 0x5D	; 93
    152c:	3f 4f       	sbci	r19, 0xFF	; 255
    152e:	80 e0       	ldi	r24, 0x00	; 0
    1530:	90 e0       	ldi	r25, 0x00	; 0
    1532:	a8 e4       	ldi	r26, 0x48	; 72
    1534:	b3 e4       	ldi	r27, 0x43	; 67
    1536:	f9 01       	movw	r30, r18
    1538:	80 83       	st	Z, r24
    153a:	91 83       	std	Z+1, r25	; 0x01
    153c:	a2 83       	std	Z+2, r26	; 0x02
    153e:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1540:	8e 01       	movw	r16, r28
    1542:	09 55       	subi	r16, 0x59	; 89
    1544:	1f 4f       	sbci	r17, 0xFF	; 255
    1546:	ce 01       	movw	r24, r28
    1548:	8d 55       	subi	r24, 0x5D	; 93
    154a:	9f 4f       	sbci	r25, 0xFF	; 255
    154c:	20 e0       	ldi	r18, 0x00	; 0
    154e:	30 e0       	ldi	r19, 0x00	; 0
    1550:	4a e7       	ldi	r20, 0x7A	; 122
    1552:	55 e4       	ldi	r21, 0x45	; 69
    1554:	fc 01       	movw	r30, r24
    1556:	60 81       	ld	r22, Z
    1558:	71 81       	ldd	r23, Z+1	; 0x01
    155a:	82 81       	ldd	r24, Z+2	; 0x02
    155c:	93 81       	ldd	r25, Z+3	; 0x03
    155e:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <__mulsf3>
    1562:	dc 01       	movw	r26, r24
    1564:	cb 01       	movw	r24, r22
    1566:	f8 01       	movw	r30, r16
    1568:	80 83       	st	Z, r24
    156a:	91 83       	std	Z+1, r25	; 0x01
    156c:	a2 83       	std	Z+2, r26	; 0x02
    156e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1570:	ce 01       	movw	r24, r28
    1572:	89 55       	subi	r24, 0x59	; 89
    1574:	9f 4f       	sbci	r25, 0xFF	; 255
    1576:	20 e0       	ldi	r18, 0x00	; 0
    1578:	30 e0       	ldi	r19, 0x00	; 0
    157a:	40 e8       	ldi	r20, 0x80	; 128
    157c:	5f e3       	ldi	r21, 0x3F	; 63
    157e:	fc 01       	movw	r30, r24
    1580:	60 81       	ld	r22, Z
    1582:	71 81       	ldd	r23, Z+1	; 0x01
    1584:	82 81       	ldd	r24, Z+2	; 0x02
    1586:	93 81       	ldd	r25, Z+3	; 0x03
    1588:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <__cmpsf2>
    158c:	88 23       	and	r24, r24
    158e:	4c f4       	brge	.+18     	; 0x15a2 <__stack+0xca3>
		__ticks = 1;
    1590:	ce 01       	movw	r24, r28
    1592:	85 55       	subi	r24, 0x55	; 85
    1594:	9f 4f       	sbci	r25, 0xFF	; 255
    1596:	21 e0       	ldi	r18, 0x01	; 1
    1598:	30 e0       	ldi	r19, 0x00	; 0
    159a:	fc 01       	movw	r30, r24
    159c:	31 83       	std	Z+1, r19	; 0x01
    159e:	20 83       	st	Z, r18
    15a0:	6d c0       	rjmp	.+218    	; 0x167c <__stack+0xd7d>
	else if (__tmp > 65535)
    15a2:	ce 01       	movw	r24, r28
    15a4:	89 55       	subi	r24, 0x59	; 89
    15a6:	9f 4f       	sbci	r25, 0xFF	; 255
    15a8:	20 e0       	ldi	r18, 0x00	; 0
    15aa:	3f ef       	ldi	r19, 0xFF	; 255
    15ac:	4f e7       	ldi	r20, 0x7F	; 127
    15ae:	57 e4       	ldi	r21, 0x47	; 71
    15b0:	fc 01       	movw	r30, r24
    15b2:	60 81       	ld	r22, Z
    15b4:	71 81       	ldd	r23, Z+1	; 0x01
    15b6:	82 81       	ldd	r24, Z+2	; 0x02
    15b8:	93 81       	ldd	r25, Z+3	; 0x03
    15ba:	0e 94 77 0e 	call	0x1cee	; 0x1cee <__gesf2>
    15be:	18 16       	cp	r1, r24
    15c0:	0c f0       	brlt	.+2      	; 0x15c4 <__stack+0xcc5>
    15c2:	4a c0       	rjmp	.+148    	; 0x1658 <__stack+0xd59>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15c4:	ce 01       	movw	r24, r28
    15c6:	8d 55       	subi	r24, 0x5D	; 93
    15c8:	9f 4f       	sbci	r25, 0xFF	; 255
    15ca:	20 e0       	ldi	r18, 0x00	; 0
    15cc:	30 e0       	ldi	r19, 0x00	; 0
    15ce:	40 e2       	ldi	r20, 0x20	; 32
    15d0:	51 e4       	ldi	r21, 0x41	; 65
    15d2:	fc 01       	movw	r30, r24
    15d4:	60 81       	ld	r22, Z
    15d6:	71 81       	ldd	r23, Z+1	; 0x01
    15d8:	82 81       	ldd	r24, Z+2	; 0x02
    15da:	93 81       	ldd	r25, Z+3	; 0x03
    15dc:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <__mulsf3>
    15e0:	dc 01       	movw	r26, r24
    15e2:	cb 01       	movw	r24, r22
    15e4:	8e 01       	movw	r16, r28
    15e6:	05 55       	subi	r16, 0x55	; 85
    15e8:	1f 4f       	sbci	r17, 0xFF	; 255
    15ea:	bc 01       	movw	r22, r24
    15ec:	cd 01       	movw	r24, r26
    15ee:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <__fixunssfsi>
    15f2:	dc 01       	movw	r26, r24
    15f4:	cb 01       	movw	r24, r22
    15f6:	f8 01       	movw	r30, r16
    15f8:	91 83       	std	Z+1, r25	; 0x01
    15fa:	80 83       	st	Z, r24
    15fc:	24 c0       	rjmp	.+72     	; 0x1646 <__stack+0xd47>
    15fe:	ce 01       	movw	r24, r28
    1600:	83 55       	subi	r24, 0x53	; 83
    1602:	9f 4f       	sbci	r25, 0xFF	; 255
    1604:	20 e9       	ldi	r18, 0x90	; 144
    1606:	31 e0       	ldi	r19, 0x01	; 1
    1608:	fc 01       	movw	r30, r24
    160a:	31 83       	std	Z+1, r19	; 0x01
    160c:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    160e:	ce 01       	movw	r24, r28
    1610:	83 55       	subi	r24, 0x53	; 83
    1612:	9f 4f       	sbci	r25, 0xFF	; 255
    1614:	fc 01       	movw	r30, r24
    1616:	80 81       	ld	r24, Z
    1618:	91 81       	ldd	r25, Z+1	; 0x01
    161a:	01 97       	sbiw	r24, 0x01	; 1
    161c:	f1 f7       	brne	.-4      	; 0x161a <__stack+0xd1b>
    161e:	9e 01       	movw	r18, r28
    1620:	23 55       	subi	r18, 0x53	; 83
    1622:	3f 4f       	sbci	r19, 0xFF	; 255
    1624:	f9 01       	movw	r30, r18
    1626:	91 83       	std	Z+1, r25	; 0x01
    1628:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    162a:	ce 01       	movw	r24, r28
    162c:	85 55       	subi	r24, 0x55	; 85
    162e:	9f 4f       	sbci	r25, 0xFF	; 255
    1630:	9e 01       	movw	r18, r28
    1632:	25 55       	subi	r18, 0x55	; 85
    1634:	3f 4f       	sbci	r19, 0xFF	; 255
    1636:	f9 01       	movw	r30, r18
    1638:	20 81       	ld	r18, Z
    163a:	31 81       	ldd	r19, Z+1	; 0x01
    163c:	21 50       	subi	r18, 0x01	; 1
    163e:	31 09       	sbc	r19, r1
    1640:	fc 01       	movw	r30, r24
    1642:	31 83       	std	Z+1, r19	; 0x01
    1644:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1646:	ce 01       	movw	r24, r28
    1648:	85 55       	subi	r24, 0x55	; 85
    164a:	9f 4f       	sbci	r25, 0xFF	; 255
    164c:	fc 01       	movw	r30, r24
    164e:	80 81       	ld	r24, Z
    1650:	91 81       	ldd	r25, Z+1	; 0x01
    1652:	89 2b       	or	r24, r25
    1654:	a1 f6       	brne	.-88     	; 0x15fe <__stack+0xcff>
    1656:	2c c0       	rjmp	.+88     	; 0x16b0 <__stack+0xdb1>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1658:	8e 01       	movw	r16, r28
    165a:	05 55       	subi	r16, 0x55	; 85
    165c:	1f 4f       	sbci	r17, 0xFF	; 255
    165e:	ce 01       	movw	r24, r28
    1660:	89 55       	subi	r24, 0x59	; 89
    1662:	9f 4f       	sbci	r25, 0xFF	; 255
    1664:	fc 01       	movw	r30, r24
    1666:	60 81       	ld	r22, Z
    1668:	71 81       	ldd	r23, Z+1	; 0x01
    166a:	82 81       	ldd	r24, Z+2	; 0x02
    166c:	93 81       	ldd	r25, Z+3	; 0x03
    166e:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <__fixunssfsi>
    1672:	dc 01       	movw	r26, r24
    1674:	cb 01       	movw	r24, r22
    1676:	f8 01       	movw	r30, r16
    1678:	91 83       	std	Z+1, r25	; 0x01
    167a:	80 83       	st	Z, r24
    167c:	ce 01       	movw	r24, r28
    167e:	81 55       	subi	r24, 0x51	; 81
    1680:	9f 4f       	sbci	r25, 0xFF	; 255
    1682:	9e 01       	movw	r18, r28
    1684:	25 55       	subi	r18, 0x55	; 85
    1686:	3f 4f       	sbci	r19, 0xFF	; 255
    1688:	f9 01       	movw	r30, r18
    168a:	20 81       	ld	r18, Z
    168c:	31 81       	ldd	r19, Z+1	; 0x01
    168e:	fc 01       	movw	r30, r24
    1690:	31 83       	std	Z+1, r19	; 0x01
    1692:	20 83       	st	Z, r18
    1694:	ce 01       	movw	r24, r28
    1696:	81 55       	subi	r24, 0x51	; 81
    1698:	9f 4f       	sbci	r25, 0xFF	; 255
    169a:	fc 01       	movw	r30, r24
    169c:	80 81       	ld	r24, Z
    169e:	91 81       	ldd	r25, Z+1	; 0x01
    16a0:	01 97       	sbiw	r24, 0x01	; 1
    16a2:	f1 f7       	brne	.-4      	; 0x16a0 <__stack+0xda1>
    16a4:	9e 01       	movw	r18, r28
    16a6:	21 55       	subi	r18, 0x51	; 81
    16a8:	3f 4f       	sbci	r19, 0xFF	; 255
    16aa:	f9 01       	movw	r30, r18
    16ac:	91 83       	std	Z+1, r25	; 0x01
    16ae:	80 83       	st	Z, r24
    _delay_ms(200);
    DDRD = (0<<2); // Configure DL as Input
    16b0:	8a e2       	ldi	r24, 0x2A	; 42
    16b2:	90 e0       	ldi	r25, 0x00	; 0
    16b4:	fc 01       	movw	r30, r24
    16b6:	10 82       	st	Z, r1
    PIRval &= 0x3FFF; // clear unused bit
    16b8:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <__data_end>
    16bc:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <__data_end+0x1>
    16c0:	9f 73       	andi	r25, 0x3F	; 63
    16c2:	90 93 81 01 	sts	0x0181, r25	; 0x800181 <__data_end+0x1>
    16c6:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <__data_end>
    if (!(statcfg & 0x60)){
    16ca:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <statcfg>
    16ce:	90 91 83 01 	lds	r25, 0x0183	; 0x800183 <statcfg+0x1>
    16d2:	a0 91 84 01 	lds	r26, 0x0184	; 0x800184 <statcfg+0x2>
    16d6:	b0 91 85 01 	lds	r27, 0x0185	; 0x800185 <statcfg+0x3>
    16da:	80 76       	andi	r24, 0x60	; 96
    16dc:	99 27       	eor	r25, r25
    16de:	aa 27       	eor	r26, r26
    16e0:	bb 27       	eor	r27, r27
    16e2:	89 2b       	or	r24, r25
    16e4:	8a 2b       	or	r24, r26
    16e6:	8b 2b       	or	r24, r27
    16e8:	89 f4       	brne	.+34     	; 0x170c <__stack+0xe0d>
        // ADC source to PIR band pass
        // number in 14bit two's complement
        if(PIRval & 0x2000) PIRval -= 0x4000;
    16ea:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <__data_end>
    16ee:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <__data_end+0x1>
    16f2:	88 27       	eor	r24, r24
    16f4:	90 72       	andi	r25, 0x20	; 32
    16f6:	89 2b       	or	r24, r25
    16f8:	49 f0       	breq	.+18     	; 0x170c <__stack+0xe0d>
    16fa:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <__data_end>
    16fe:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <__data_end+0x1>
    1702:	90 54       	subi	r25, 0x40	; 64
    1704:	90 93 81 01 	sts	0x0181, r25	; 0x800181 <__data_end+0x1>
    1708:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <__data_end>
    }
    //puts("readed!!!!");
    //puts("readed 3 : %d",3)
    //printf("hello world %d",3);
    printf("PIRVal: %d\tstatcfg: %ul\n",PIRval,statcfg);
    170c:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <statcfg>
    1710:	90 91 83 01 	lds	r25, 0x0183	; 0x800183 <statcfg+0x1>
    1714:	a0 91 84 01 	lds	r26, 0x0184	; 0x800184 <statcfg+0x2>
    1718:	b0 91 85 01 	lds	r27, 0x0185	; 0x800185 <statcfg+0x3>
    171c:	20 91 80 01 	lds	r18, 0x0180	; 0x800180 <__data_end>
    1720:	30 91 81 01 	lds	r19, 0x0181	; 0x800181 <__data_end+0x1>
    1724:	4b 2f       	mov	r20, r27
    1726:	4f 93       	push	r20
    1728:	4a 2f       	mov	r20, r26
    172a:	4f 93       	push	r20
    172c:	49 2f       	mov	r20, r25
    172e:	4f 93       	push	r20
    1730:	8f 93       	push	r24
    1732:	83 2f       	mov	r24, r19
    1734:	8f 93       	push	r24
    1736:	82 2f       	mov	r24, r18
    1738:	8f 93       	push	r24
    173a:	84 e2       	ldi	r24, 0x24	; 36
    173c:	91 e0       	ldi	r25, 0x01	; 1
    173e:	89 2f       	mov	r24, r25
    1740:	8f 93       	push	r24
    1742:	84 e2       	ldi	r24, 0x24	; 36
    1744:	91 e0       	ldi	r25, 0x01	; 1
    1746:	8f 93       	push	r24
    1748:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <printf>
    174c:	8d b7       	in	r24, 0x3d	; 61
    174e:	9e b7       	in	r25, 0x3e	; 62
    1750:	08 96       	adiw	r24, 0x08	; 8
    1752:	0f b6       	in	r0, 0x3f	; 63
    1754:	f8 94       	cli
    1756:	de bf       	out	0x3e, r29	; 62
    1758:	0f be       	out	0x3f, r0	; 63
    175a:	cd bf       	out	0x3d, r28	; 61
    return;
    175c:	00 00       	nop


}
    175e:	c0 55       	subi	r28, 0x50	; 80
    1760:	df 4f       	sbci	r29, 0xFF	; 255
    1762:	0f b6       	in	r0, 0x3f	; 63
    1764:	f8 94       	cli
    1766:	de bf       	out	0x3e, r29	; 62
    1768:	0f be       	out	0x3f, r0	; 63
    176a:	cd bf       	out	0x3d, r28	; 61
    176c:	df 91       	pop	r29
    176e:	cf 91       	pop	r28
    1770:	1f 91       	pop	r17
    1772:	0f 91       	pop	r16
    1774:	08 95       	ret

00001776 <main>:
int main(void){
    1776:	cf 93       	push	r28
    1778:	df 93       	push	r29
    177a:	cd b7       	in	r28, 0x3d	; 61
    177c:	de b7       	in	r29, 0x3e	; 62
    177e:	6e 97       	sbiw	r28, 0x1e	; 30
    1780:	0f b6       	in	r0, 0x3f	; 63
    1782:	f8 94       	cli
    1784:	de bf       	out	0x3e, r29	; 62
    1786:	0f be       	out	0x3f, r0	; 63
    1788:	cd bf       	out	0x3d, r28	; 61
    int i=1;
    178a:	81 e0       	ldi	r24, 0x01	; 1
    178c:	90 e0       	ldi	r25, 0x00	; 0
    178e:	9a 83       	std	Y+2, r25	; 0x02
    1790:	89 83       	std	Y+1, r24	; 0x01
    uart_init();
    1792:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <uart_init>
    stdout = &uart_output;
    1796:	80 e0       	ldi	r24, 0x00	; 0
    1798:	91 e0       	ldi	r25, 0x01	; 1
    179a:	90 93 89 01 	sts	0x0189, r25	; 0x800189 <__iob+0x3>
    179e:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <__iob+0x2>
    stdin  = &uart_input;
    17a2:	8e e0       	ldi	r24, 0x0E	; 14
    17a4:	91 e0       	ldi	r25, 0x01	; 1
    17a6:	90 93 87 01 	sts	0x0187, r25	; 0x800187 <__iob+0x1>
    17aa:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <__iob>
    DDRB = 0x10;
    17ae:	84 e2       	ldi	r24, 0x24	; 36
    17b0:	90 e0       	ldi	r25, 0x00	; 0
    17b2:	20 e1       	ldi	r18, 0x10	; 16
    17b4:	fc 01       	movw	r30, r24
    17b6:	20 83       	st	Z, r18
    //DDRD |= (0<<2);
    //PORTD |= (1<<2);
    while(1){

        if(i){
    17b8:	89 81       	ldd	r24, Y+1	; 0x01
    17ba:	9a 81       	ldd	r25, Y+2	; 0x02
    17bc:	89 2b       	or	r24, r25
    17be:	09 f4       	brne	.+2      	; 0x17c2 <main+0x4c>
    17c0:	7e c0       	rjmp	.+252    	; 0x18be <main+0x148>
            puts("Writing to register");
    17c2:	8d e3       	ldi	r24, 0x3D	; 61
    17c4:	91 e0       	ldi	r25, 0x01	; 1
    17c6:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <puts>
    17ca:	80 e0       	ldi	r24, 0x00	; 0
    17cc:	90 e0       	ldi	r25, 0x00	; 0
    17ce:	aa e7       	ldi	r26, 0x7A	; 122
    17d0:	b4 e4       	ldi	r27, 0x44	; 68
    17d2:	8b 83       	std	Y+3, r24	; 0x03
    17d4:	9c 83       	std	Y+4, r25	; 0x04
    17d6:	ad 83       	std	Y+5, r26	; 0x05
    17d8:	be 83       	std	Y+6, r27	; 0x06

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    17da:	20 e0       	ldi	r18, 0x00	; 0
    17dc:	30 e0       	ldi	r19, 0x00	; 0
    17de:	4a e7       	ldi	r20, 0x7A	; 122
    17e0:	55 e4       	ldi	r21, 0x45	; 69
    17e2:	6b 81       	ldd	r22, Y+3	; 0x03
    17e4:	7c 81       	ldd	r23, Y+4	; 0x04
    17e6:	8d 81       	ldd	r24, Y+5	; 0x05
    17e8:	9e 81       	ldd	r25, Y+6	; 0x06
    17ea:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <__mulsf3>
    17ee:	dc 01       	movw	r26, r24
    17f0:	cb 01       	movw	r24, r22
    17f2:	8f 83       	std	Y+7, r24	; 0x07
    17f4:	98 87       	std	Y+8, r25	; 0x08
    17f6:	a9 87       	std	Y+9, r26	; 0x09
    17f8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    17fa:	20 e0       	ldi	r18, 0x00	; 0
    17fc:	30 e0       	ldi	r19, 0x00	; 0
    17fe:	40 e8       	ldi	r20, 0x80	; 128
    1800:	5f e3       	ldi	r21, 0x3F	; 63
    1802:	6f 81       	ldd	r22, Y+7	; 0x07
    1804:	78 85       	ldd	r23, Y+8	; 0x08
    1806:	89 85       	ldd	r24, Y+9	; 0x09
    1808:	9a 85       	ldd	r25, Y+10	; 0x0a
    180a:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <__cmpsf2>
    180e:	88 23       	and	r24, r24
    1810:	2c f4       	brge	.+10     	; 0x181c <main+0xa6>
		__ticks = 1;
    1812:	81 e0       	ldi	r24, 0x01	; 1
    1814:	90 e0       	ldi	r25, 0x00	; 0
    1816:	9c 87       	std	Y+12, r25	; 0x0c
    1818:	8b 87       	std	Y+11, r24	; 0x0b
    181a:	3f c0       	rjmp	.+126    	; 0x189a <main+0x124>
	else if (__tmp > 65535)
    181c:	20 e0       	ldi	r18, 0x00	; 0
    181e:	3f ef       	ldi	r19, 0xFF	; 255
    1820:	4f e7       	ldi	r20, 0x7F	; 127
    1822:	57 e4       	ldi	r21, 0x47	; 71
    1824:	6f 81       	ldd	r22, Y+7	; 0x07
    1826:	78 85       	ldd	r23, Y+8	; 0x08
    1828:	89 85       	ldd	r24, Y+9	; 0x09
    182a:	9a 85       	ldd	r25, Y+10	; 0x0a
    182c:	0e 94 77 0e 	call	0x1cee	; 0x1cee <__gesf2>
    1830:	18 16       	cp	r1, r24
    1832:	4c f5       	brge	.+82     	; 0x1886 <main+0x110>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1834:	20 e0       	ldi	r18, 0x00	; 0
    1836:	30 e0       	ldi	r19, 0x00	; 0
    1838:	40 e2       	ldi	r20, 0x20	; 32
    183a:	51 e4       	ldi	r21, 0x41	; 65
    183c:	6b 81       	ldd	r22, Y+3	; 0x03
    183e:	7c 81       	ldd	r23, Y+4	; 0x04
    1840:	8d 81       	ldd	r24, Y+5	; 0x05
    1842:	9e 81       	ldd	r25, Y+6	; 0x06
    1844:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <__mulsf3>
    1848:	dc 01       	movw	r26, r24
    184a:	cb 01       	movw	r24, r22
    184c:	bc 01       	movw	r22, r24
    184e:	cd 01       	movw	r24, r26
    1850:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <__fixunssfsi>
    1854:	dc 01       	movw	r26, r24
    1856:	cb 01       	movw	r24, r22
    1858:	9c 87       	std	Y+12, r25	; 0x0c
    185a:	8b 87       	std	Y+11, r24	; 0x0b
    185c:	0f c0       	rjmp	.+30     	; 0x187c <main+0x106>
    185e:	80 e9       	ldi	r24, 0x90	; 144
    1860:	91 e0       	ldi	r25, 0x01	; 1
    1862:	9e 87       	std	Y+14, r25	; 0x0e
    1864:	8d 87       	std	Y+13, r24	; 0x0d
    1866:	8d 85       	ldd	r24, Y+13	; 0x0d
    1868:	9e 85       	ldd	r25, Y+14	; 0x0e
    186a:	01 97       	sbiw	r24, 0x01	; 1
    186c:	f1 f7       	brne	.-4      	; 0x186a <main+0xf4>
    186e:	9e 87       	std	Y+14, r25	; 0x0e
    1870:	8d 87       	std	Y+13, r24	; 0x0d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1872:	8b 85       	ldd	r24, Y+11	; 0x0b
    1874:	9c 85       	ldd	r25, Y+12	; 0x0c
    1876:	01 97       	sbiw	r24, 0x01	; 1
    1878:	9c 87       	std	Y+12, r25	; 0x0c
    187a:	8b 87       	std	Y+11, r24	; 0x0b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    187c:	8b 85       	ldd	r24, Y+11	; 0x0b
    187e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1880:	89 2b       	or	r24, r25
    1882:	69 f7       	brne	.-38     	; 0x185e <main+0xe8>
    1884:	14 c0       	rjmp	.+40     	; 0x18ae <main+0x138>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1886:	6f 81       	ldd	r22, Y+7	; 0x07
    1888:	78 85       	ldd	r23, Y+8	; 0x08
    188a:	89 85       	ldd	r24, Y+9	; 0x09
    188c:	9a 85       	ldd	r25, Y+10	; 0x0a
    188e:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <__fixunssfsi>
    1892:	dc 01       	movw	r26, r24
    1894:	cb 01       	movw	r24, r22
    1896:	9c 87       	std	Y+12, r25	; 0x0c
    1898:	8b 87       	std	Y+11, r24	; 0x0b
    189a:	8b 85       	ldd	r24, Y+11	; 0x0b
    189c:	9c 85       	ldd	r25, Y+12	; 0x0c
    189e:	98 8b       	std	Y+16, r25	; 0x10
    18a0:	8f 87       	std	Y+15, r24	; 0x0f
    18a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    18a4:	98 89       	ldd	r25, Y+16	; 0x10
    18a6:	01 97       	sbiw	r24, 0x01	; 1
    18a8:	f1 f7       	brne	.-4      	; 0x18a6 <main+0x130>
    18aa:	98 8b       	std	Y+16, r25	; 0x10
    18ac:	8f 87       	std	Y+15, r24	; 0x0f
            _delay_ms(1000);
            writeregval(0x00C01710);
    18ae:	60 e1       	ldi	r22, 0x10	; 16
    18b0:	77 e1       	ldi	r23, 0x17	; 23
    18b2:	80 ec       	ldi	r24, 0xC0	; 192
    18b4:	90 e0       	ldi	r25, 0x00	; 0
    18b6:	0e 94 53 00 	call	0xa6	; 0xa6 <writeregval>
            i=0;
    18ba:	1a 82       	std	Y+2, r1	; 0x02
    18bc:	19 82       	std	Y+1, r1	; 0x01
        //    puts("hareket");
        //}
        //puts("Reading from register");
        //_delay_ms(3000);
        //readlowpowerpyro();
        if(PINB & 0x20){
    18be:	83 e2       	ldi	r24, 0x23	; 35
    18c0:	90 e0       	ldi	r25, 0x00	; 0
    18c2:	fc 01       	movw	r30, r24
    18c4:	80 81       	ld	r24, Z
    18c6:	88 2f       	mov	r24, r24
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	80 72       	andi	r24, 0x20	; 32
    18cc:	99 27       	eor	r25, r25
    18ce:	89 2b       	or	r24, r25
    18d0:	09 f4       	brne	.+2      	; 0x18d4 <main+0x15e>
    18d2:	91 c0       	rjmp	.+290    	; 0x19f6 <main+0x280>

            puts("Movement!!!\n");
    18d4:	81 e5       	ldi	r24, 0x51	; 81
    18d6:	91 e0       	ldi	r25, 0x01	; 1
    18d8:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <puts>
            DDRB = 0x30;
    18dc:	84 e2       	ldi	r24, 0x24	; 36
    18de:	90 e0       	ldi	r25, 0x00	; 0
    18e0:	20 e3       	ldi	r18, 0x30	; 48
    18e2:	fc 01       	movw	r30, r24
    18e4:	20 83       	st	Z, r18
            PORTB = 0x10;
    18e6:	85 e2       	ldi	r24, 0x25	; 37
    18e8:	90 e0       	ldi	r25, 0x00	; 0
    18ea:	20 e1       	ldi	r18, 0x10	; 16
    18ec:	fc 01       	movw	r30, r24
    18ee:	20 83       	st	Z, r18
            puts("Waiting for 2 Sec\n");
    18f0:	8e e5       	ldi	r24, 0x5E	; 94
    18f2:	91 e0       	ldi	r25, 0x01	; 1
    18f4:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <puts>
    18f8:	80 e0       	ldi	r24, 0x00	; 0
    18fa:	90 e0       	ldi	r25, 0x00	; 0
    18fc:	aa ef       	ldi	r26, 0xFA	; 250
    18fe:	b4 e4       	ldi	r27, 0x44	; 68
    1900:	89 8b       	std	Y+17, r24	; 0x11
    1902:	9a 8b       	std	Y+18, r25	; 0x12
    1904:	ab 8b       	std	Y+19, r26	; 0x13
    1906:	bc 8b       	std	Y+20, r27	; 0x14

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1908:	20 e0       	ldi	r18, 0x00	; 0
    190a:	30 e0       	ldi	r19, 0x00	; 0
    190c:	4a e7       	ldi	r20, 0x7A	; 122
    190e:	55 e4       	ldi	r21, 0x45	; 69
    1910:	69 89       	ldd	r22, Y+17	; 0x11
    1912:	7a 89       	ldd	r23, Y+18	; 0x12
    1914:	8b 89       	ldd	r24, Y+19	; 0x13
    1916:	9c 89       	ldd	r25, Y+20	; 0x14
    1918:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <__mulsf3>
    191c:	dc 01       	movw	r26, r24
    191e:	cb 01       	movw	r24, r22
    1920:	8d 8b       	std	Y+21, r24	; 0x15
    1922:	9e 8b       	std	Y+22, r25	; 0x16
    1924:	af 8b       	std	Y+23, r26	; 0x17
    1926:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1928:	20 e0       	ldi	r18, 0x00	; 0
    192a:	30 e0       	ldi	r19, 0x00	; 0
    192c:	40 e8       	ldi	r20, 0x80	; 128
    192e:	5f e3       	ldi	r21, 0x3F	; 63
    1930:	6d 89       	ldd	r22, Y+21	; 0x15
    1932:	7e 89       	ldd	r23, Y+22	; 0x16
    1934:	8f 89       	ldd	r24, Y+23	; 0x17
    1936:	98 8d       	ldd	r25, Y+24	; 0x18
    1938:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <__cmpsf2>
    193c:	88 23       	and	r24, r24
    193e:	2c f4       	brge	.+10     	; 0x194a <main+0x1d4>
		__ticks = 1;
    1940:	81 e0       	ldi	r24, 0x01	; 1
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	9a 8f       	std	Y+26, r25	; 0x1a
    1946:	89 8f       	std	Y+25, r24	; 0x19
    1948:	3f c0       	rjmp	.+126    	; 0x19c8 <main+0x252>
	else if (__tmp > 65535)
    194a:	20 e0       	ldi	r18, 0x00	; 0
    194c:	3f ef       	ldi	r19, 0xFF	; 255
    194e:	4f e7       	ldi	r20, 0x7F	; 127
    1950:	57 e4       	ldi	r21, 0x47	; 71
    1952:	6d 89       	ldd	r22, Y+21	; 0x15
    1954:	7e 89       	ldd	r23, Y+22	; 0x16
    1956:	8f 89       	ldd	r24, Y+23	; 0x17
    1958:	98 8d       	ldd	r25, Y+24	; 0x18
    195a:	0e 94 77 0e 	call	0x1cee	; 0x1cee <__gesf2>
    195e:	18 16       	cp	r1, r24
    1960:	4c f5       	brge	.+82     	; 0x19b4 <main+0x23e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1962:	20 e0       	ldi	r18, 0x00	; 0
    1964:	30 e0       	ldi	r19, 0x00	; 0
    1966:	40 e2       	ldi	r20, 0x20	; 32
    1968:	51 e4       	ldi	r21, 0x41	; 65
    196a:	69 89       	ldd	r22, Y+17	; 0x11
    196c:	7a 89       	ldd	r23, Y+18	; 0x12
    196e:	8b 89       	ldd	r24, Y+19	; 0x13
    1970:	9c 89       	ldd	r25, Y+20	; 0x14
    1972:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <__mulsf3>
    1976:	dc 01       	movw	r26, r24
    1978:	cb 01       	movw	r24, r22
    197a:	bc 01       	movw	r22, r24
    197c:	cd 01       	movw	r24, r26
    197e:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <__fixunssfsi>
    1982:	dc 01       	movw	r26, r24
    1984:	cb 01       	movw	r24, r22
    1986:	9a 8f       	std	Y+26, r25	; 0x1a
    1988:	89 8f       	std	Y+25, r24	; 0x19
    198a:	0f c0       	rjmp	.+30     	; 0x19aa <main+0x234>
    198c:	80 e9       	ldi	r24, 0x90	; 144
    198e:	91 e0       	ldi	r25, 0x01	; 1
    1990:	9c 8f       	std	Y+28, r25	; 0x1c
    1992:	8b 8f       	std	Y+27, r24	; 0x1b
    1994:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1996:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1998:	01 97       	sbiw	r24, 0x01	; 1
    199a:	f1 f7       	brne	.-4      	; 0x1998 <main+0x222>
    199c:	9c 8f       	std	Y+28, r25	; 0x1c
    199e:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19a0:	89 8d       	ldd	r24, Y+25	; 0x19
    19a2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    19a4:	01 97       	sbiw	r24, 0x01	; 1
    19a6:	9a 8f       	std	Y+26, r25	; 0x1a
    19a8:	89 8f       	std	Y+25, r24	; 0x19
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19aa:	89 8d       	ldd	r24, Y+25	; 0x19
    19ac:	9a 8d       	ldd	r25, Y+26	; 0x1a
    19ae:	89 2b       	or	r24, r25
    19b0:	69 f7       	brne	.-38     	; 0x198c <main+0x216>
    19b2:	14 c0       	rjmp	.+40     	; 0x19dc <main+0x266>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19b4:	6d 89       	ldd	r22, Y+21	; 0x15
    19b6:	7e 89       	ldd	r23, Y+22	; 0x16
    19b8:	8f 89       	ldd	r24, Y+23	; 0x17
    19ba:	98 8d       	ldd	r25, Y+24	; 0x18
    19bc:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <__fixunssfsi>
    19c0:	dc 01       	movw	r26, r24
    19c2:	cb 01       	movw	r24, r22
    19c4:	9a 8f       	std	Y+26, r25	; 0x1a
    19c6:	89 8f       	std	Y+25, r24	; 0x19
    19c8:	89 8d       	ldd	r24, Y+25	; 0x19
    19ca:	9a 8d       	ldd	r25, Y+26	; 0x1a
    19cc:	9e 8f       	std	Y+30, r25	; 0x1e
    19ce:	8d 8f       	std	Y+29, r24	; 0x1d
    19d0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    19d2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    19d4:	01 97       	sbiw	r24, 0x01	; 1
    19d6:	f1 f7       	brne	.-4      	; 0x19d4 <main+0x25e>
    19d8:	9e 8f       	std	Y+30, r25	; 0x1e
    19da:	8d 8f       	std	Y+29, r24	; 0x1d
            _delay_ms(2000);
            puts("Waiting done\n");
    19dc:	81 e7       	ldi	r24, 0x71	; 113
    19de:	91 e0       	ldi	r25, 0x01	; 1
    19e0:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <puts>
            PORTB = 0x00;
    19e4:	85 e2       	ldi	r24, 0x25	; 37
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	fc 01       	movw	r30, r24
    19ea:	10 82       	st	Z, r1
            DDRB = 0x10;
    19ec:	84 e2       	ldi	r24, 0x24	; 36
    19ee:	90 e0       	ldi	r25, 0x00	; 0
    19f0:	20 e1       	ldi	r18, 0x10	; 16
    19f2:	fc 01       	movw	r30, r24
    19f4:	20 83       	st	Z, r18
        }

    }
    19f6:	e0 ce       	rjmp	.-576    	; 0x17b8 <main+0x42>

000019f8 <uart_init>:
#endif
#include <util/setbaud.h>

/* http://www.cs.mun.ca/~rod/Winter2007/4723/notes/serial/serial.html */

void uart_init(void) {
    19f8:	cf 93       	push	r28
    19fa:	df 93       	push	r29
    19fc:	cd b7       	in	r28, 0x3d	; 61
    19fe:	de b7       	in	r29, 0x3e	; 62
    UBRR0H = UBRRH_VALUE;
    1a00:	85 ec       	ldi	r24, 0xC5	; 197
    1a02:	90 e0       	ldi	r25, 0x00	; 0
    1a04:	fc 01       	movw	r30, r24
    1a06:	10 82       	st	Z, r1
    UBRR0L = UBRRL_VALUE;
    1a08:	84 ec       	ldi	r24, 0xC4	; 196
    1a0a:	90 e0       	ldi	r25, 0x00	; 0
    1a0c:	27 e6       	ldi	r18, 0x67	; 103
    1a0e:	fc 01       	movw	r30, r24
    1a10:	20 83       	st	Z, r18

#if USE_2X
    UCSR0A |= _BV(U2X0);
#else
    UCSR0A &= ~(_BV(U2X0));
    1a12:	80 ec       	ldi	r24, 0xC0	; 192
    1a14:	90 e0       	ldi	r25, 0x00	; 0
    1a16:	20 ec       	ldi	r18, 0xC0	; 192
    1a18:	30 e0       	ldi	r19, 0x00	; 0
    1a1a:	f9 01       	movw	r30, r18
    1a1c:	20 81       	ld	r18, Z
    1a1e:	2d 7f       	andi	r18, 0xFD	; 253
    1a20:	fc 01       	movw	r30, r24
    1a22:	20 83       	st	Z, r18
#endif

    UCSR0C = _BV(UCSZ01) | _BV(UCSZ00); /* 8-bit data */
    1a24:	82 ec       	ldi	r24, 0xC2	; 194
    1a26:	90 e0       	ldi	r25, 0x00	; 0
    1a28:	26 e0       	ldi	r18, 0x06	; 6
    1a2a:	fc 01       	movw	r30, r24
    1a2c:	20 83       	st	Z, r18
    UCSR0B = _BV(RXEN0) | _BV(TXEN0);   /* Enable RX and TX */
    1a2e:	81 ec       	ldi	r24, 0xC1	; 193
    1a30:	90 e0       	ldi	r25, 0x00	; 0
    1a32:	28 e1       	ldi	r18, 0x18	; 24
    1a34:	fc 01       	movw	r30, r24
    1a36:	20 83       	st	Z, r18
}
    1a38:	df 91       	pop	r29
    1a3a:	cf 91       	pop	r28
    1a3c:	08 95       	ret

00001a3e <uart_putchar>:

void uart_putchar(char c, FILE *stream) {
    1a3e:	cf 93       	push	r28
    1a40:	df 93       	push	r29
    1a42:	00 d0       	rcall	.+0      	; 0x1a44 <uart_putchar+0x6>
    1a44:	1f 92       	push	r1
    1a46:	cd b7       	in	r28, 0x3d	; 61
    1a48:	de b7       	in	r29, 0x3e	; 62
    1a4a:	89 83       	std	Y+1, r24	; 0x01
    1a4c:	7b 83       	std	Y+3, r23	; 0x03
    1a4e:	6a 83       	std	Y+2, r22	; 0x02
    if (c == '\n') {
    1a50:	89 81       	ldd	r24, Y+1	; 0x01
    1a52:	8a 30       	cpi	r24, 0x0A	; 10
    1a54:	31 f4       	brne	.+12     	; 0x1a62 <uart_putchar+0x24>
        uart_putchar('\r', stream);
    1a56:	8a 81       	ldd	r24, Y+2	; 0x02
    1a58:	9b 81       	ldd	r25, Y+3	; 0x03
    1a5a:	bc 01       	movw	r22, r24
    1a5c:	8d e0       	ldi	r24, 0x0D	; 13
    1a5e:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <uart_putchar>
    }
    loop_until_bit_is_set(UCSR0A, UDRE0);
    1a62:	80 ec       	ldi	r24, 0xC0	; 192
    1a64:	90 e0       	ldi	r25, 0x00	; 0
    1a66:	fc 01       	movw	r30, r24
    1a68:	80 81       	ld	r24, Z
    1a6a:	88 2f       	mov	r24, r24
    1a6c:	90 e0       	ldi	r25, 0x00	; 0
    1a6e:	80 72       	andi	r24, 0x20	; 32
    1a70:	99 27       	eor	r25, r25
    1a72:	89 2b       	or	r24, r25
    1a74:	b1 f3       	breq	.-20     	; 0x1a62 <uart_putchar+0x24>
    UDR0 = c;
    1a76:	86 ec       	ldi	r24, 0xC6	; 198
    1a78:	90 e0       	ldi	r25, 0x00	; 0
    1a7a:	29 81       	ldd	r18, Y+1	; 0x01
    1a7c:	fc 01       	movw	r30, r24
    1a7e:	20 83       	st	Z, r18
}
    1a80:	0f 90       	pop	r0
    1a82:	0f 90       	pop	r0
    1a84:	0f 90       	pop	r0
    1a86:	df 91       	pop	r29
    1a88:	cf 91       	pop	r28
    1a8a:	08 95       	ret

00001a8c <uart_getchar>:

char uart_getchar(FILE *stream) {
    1a8c:	cf 93       	push	r28
    1a8e:	df 93       	push	r29
    1a90:	00 d0       	rcall	.+0      	; 0x1a92 <uart_getchar+0x6>
    1a92:	cd b7       	in	r28, 0x3d	; 61
    1a94:	de b7       	in	r29, 0x3e	; 62
    1a96:	9a 83       	std	Y+2, r25	; 0x02
    1a98:	89 83       	std	Y+1, r24	; 0x01
    loop_until_bit_is_set(UCSR0A, RXC0);
    1a9a:	80 ec       	ldi	r24, 0xC0	; 192
    1a9c:	90 e0       	ldi	r25, 0x00	; 0
    1a9e:	fc 01       	movw	r30, r24
    1aa0:	80 81       	ld	r24, Z
    1aa2:	88 23       	and	r24, r24
    1aa4:	d4 f7       	brge	.-12     	; 0x1a9a <uart_getchar+0xe>
    return UDR0;
    1aa6:	86 ec       	ldi	r24, 0xC6	; 198
    1aa8:	90 e0       	ldi	r25, 0x00	; 0
    1aaa:	fc 01       	movw	r30, r24
    1aac:	80 81       	ld	r24, Z
}
    1aae:	0f 90       	pop	r0
    1ab0:	0f 90       	pop	r0
    1ab2:	df 91       	pop	r29
    1ab4:	cf 91       	pop	r28
    1ab6:	08 95       	ret

00001ab8 <__cmpsf2>:
    1ab8:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <__fp_cmp>
    1abc:	08 f4       	brcc	.+2      	; 0x1ac0 <__cmpsf2+0x8>
    1abe:	81 e0       	ldi	r24, 0x01	; 1
    1ac0:	08 95       	ret

00001ac2 <__divsf3>:
    1ac2:	0e 94 75 0d 	call	0x1aea	; 0x1aea <__divsf3x>
    1ac6:	0c 94 3d 0e 	jmp	0x1c7a	; 0x1c7a <__fp_round>
    1aca:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <__fp_pscB>
    1ace:	58 f0       	brcs	.+22     	; 0x1ae6 <__divsf3+0x24>
    1ad0:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <__fp_pscA>
    1ad4:	40 f0       	brcs	.+16     	; 0x1ae6 <__divsf3+0x24>
    1ad6:	29 f4       	brne	.+10     	; 0x1ae2 <__divsf3+0x20>
    1ad8:	5f 3f       	cpi	r21, 0xFF	; 255
    1ada:	29 f0       	breq	.+10     	; 0x1ae6 <__divsf3+0x24>
    1adc:	0c 94 26 0e 	jmp	0x1c4c	; 0x1c4c <__fp_inf>
    1ae0:	51 11       	cpse	r21, r1
    1ae2:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__fp_szero>
    1ae6:	0c 94 2c 0e 	jmp	0x1c58	; 0x1c58 <__fp_nan>

00001aea <__divsf3x>:
    1aea:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <__fp_split3>
    1aee:	68 f3       	brcs	.-38     	; 0x1aca <__divsf3+0x8>

00001af0 <__divsf3_pse>:
    1af0:	99 23       	and	r25, r25
    1af2:	b1 f3       	breq	.-20     	; 0x1ae0 <__divsf3+0x1e>
    1af4:	55 23       	and	r21, r21
    1af6:	91 f3       	breq	.-28     	; 0x1adc <__divsf3+0x1a>
    1af8:	95 1b       	sub	r25, r21
    1afa:	55 0b       	sbc	r21, r21
    1afc:	bb 27       	eor	r27, r27
    1afe:	aa 27       	eor	r26, r26
    1b00:	62 17       	cp	r22, r18
    1b02:	73 07       	cpc	r23, r19
    1b04:	84 07       	cpc	r24, r20
    1b06:	38 f0       	brcs	.+14     	; 0x1b16 <__divsf3_pse+0x26>
    1b08:	9f 5f       	subi	r25, 0xFF	; 255
    1b0a:	5f 4f       	sbci	r21, 0xFF	; 255
    1b0c:	22 0f       	add	r18, r18
    1b0e:	33 1f       	adc	r19, r19
    1b10:	44 1f       	adc	r20, r20
    1b12:	aa 1f       	adc	r26, r26
    1b14:	a9 f3       	breq	.-22     	; 0x1b00 <__divsf3_pse+0x10>
    1b16:	35 d0       	rcall	.+106    	; 0x1b82 <__divsf3_pse+0x92>
    1b18:	0e 2e       	mov	r0, r30
    1b1a:	3a f0       	brmi	.+14     	; 0x1b2a <__divsf3_pse+0x3a>
    1b1c:	e0 e8       	ldi	r30, 0x80	; 128
    1b1e:	32 d0       	rcall	.+100    	; 0x1b84 <__divsf3_pse+0x94>
    1b20:	91 50       	subi	r25, 0x01	; 1
    1b22:	50 40       	sbci	r21, 0x00	; 0
    1b24:	e6 95       	lsr	r30
    1b26:	00 1c       	adc	r0, r0
    1b28:	ca f7       	brpl	.-14     	; 0x1b1c <__divsf3_pse+0x2c>
    1b2a:	2b d0       	rcall	.+86     	; 0x1b82 <__divsf3_pse+0x92>
    1b2c:	fe 2f       	mov	r31, r30
    1b2e:	29 d0       	rcall	.+82     	; 0x1b82 <__divsf3_pse+0x92>
    1b30:	66 0f       	add	r22, r22
    1b32:	77 1f       	adc	r23, r23
    1b34:	88 1f       	adc	r24, r24
    1b36:	bb 1f       	adc	r27, r27
    1b38:	26 17       	cp	r18, r22
    1b3a:	37 07       	cpc	r19, r23
    1b3c:	48 07       	cpc	r20, r24
    1b3e:	ab 07       	cpc	r26, r27
    1b40:	b0 e8       	ldi	r27, 0x80	; 128
    1b42:	09 f0       	breq	.+2      	; 0x1b46 <__divsf3_pse+0x56>
    1b44:	bb 0b       	sbc	r27, r27
    1b46:	80 2d       	mov	r24, r0
    1b48:	bf 01       	movw	r22, r30
    1b4a:	ff 27       	eor	r31, r31
    1b4c:	93 58       	subi	r25, 0x83	; 131
    1b4e:	5f 4f       	sbci	r21, 0xFF	; 255
    1b50:	3a f0       	brmi	.+14     	; 0x1b60 <__divsf3_pse+0x70>
    1b52:	9e 3f       	cpi	r25, 0xFE	; 254
    1b54:	51 05       	cpc	r21, r1
    1b56:	78 f0       	brcs	.+30     	; 0x1b76 <__divsf3_pse+0x86>
    1b58:	0c 94 26 0e 	jmp	0x1c4c	; 0x1c4c <__fp_inf>
    1b5c:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__fp_szero>
    1b60:	5f 3f       	cpi	r21, 0xFF	; 255
    1b62:	e4 f3       	brlt	.-8      	; 0x1b5c <__divsf3_pse+0x6c>
    1b64:	98 3e       	cpi	r25, 0xE8	; 232
    1b66:	d4 f3       	brlt	.-12     	; 0x1b5c <__divsf3_pse+0x6c>
    1b68:	86 95       	lsr	r24
    1b6a:	77 95       	ror	r23
    1b6c:	67 95       	ror	r22
    1b6e:	b7 95       	ror	r27
    1b70:	f7 95       	ror	r31
    1b72:	9f 5f       	subi	r25, 0xFF	; 255
    1b74:	c9 f7       	brne	.-14     	; 0x1b68 <__divsf3_pse+0x78>
    1b76:	88 0f       	add	r24, r24
    1b78:	91 1d       	adc	r25, r1
    1b7a:	96 95       	lsr	r25
    1b7c:	87 95       	ror	r24
    1b7e:	97 f9       	bld	r25, 7
    1b80:	08 95       	ret
    1b82:	e1 e0       	ldi	r30, 0x01	; 1
    1b84:	66 0f       	add	r22, r22
    1b86:	77 1f       	adc	r23, r23
    1b88:	88 1f       	adc	r24, r24
    1b8a:	bb 1f       	adc	r27, r27
    1b8c:	62 17       	cp	r22, r18
    1b8e:	73 07       	cpc	r23, r19
    1b90:	84 07       	cpc	r24, r20
    1b92:	ba 07       	cpc	r27, r26
    1b94:	20 f0       	brcs	.+8      	; 0x1b9e <__divsf3_pse+0xae>
    1b96:	62 1b       	sub	r22, r18
    1b98:	73 0b       	sbc	r23, r19
    1b9a:	84 0b       	sbc	r24, r20
    1b9c:	ba 0b       	sbc	r27, r26
    1b9e:	ee 1f       	adc	r30, r30
    1ba0:	88 f7       	brcc	.-30     	; 0x1b84 <__divsf3_pse+0x94>
    1ba2:	e0 95       	com	r30
    1ba4:	08 95       	ret

00001ba6 <__fixunssfsi>:
    1ba6:	0e 94 56 0e 	call	0x1cac	; 0x1cac <__fp_splitA>
    1baa:	88 f0       	brcs	.+34     	; 0x1bce <__fixunssfsi+0x28>
    1bac:	9f 57       	subi	r25, 0x7F	; 127
    1bae:	98 f0       	brcs	.+38     	; 0x1bd6 <__fixunssfsi+0x30>
    1bb0:	b9 2f       	mov	r27, r25
    1bb2:	99 27       	eor	r25, r25
    1bb4:	b7 51       	subi	r27, 0x17	; 23
    1bb6:	b0 f0       	brcs	.+44     	; 0x1be4 <__fixunssfsi+0x3e>
    1bb8:	e1 f0       	breq	.+56     	; 0x1bf2 <__fixunssfsi+0x4c>
    1bba:	66 0f       	add	r22, r22
    1bbc:	77 1f       	adc	r23, r23
    1bbe:	88 1f       	adc	r24, r24
    1bc0:	99 1f       	adc	r25, r25
    1bc2:	1a f0       	brmi	.+6      	; 0x1bca <__fixunssfsi+0x24>
    1bc4:	ba 95       	dec	r27
    1bc6:	c9 f7       	brne	.-14     	; 0x1bba <__fixunssfsi+0x14>
    1bc8:	14 c0       	rjmp	.+40     	; 0x1bf2 <__fixunssfsi+0x4c>
    1bca:	b1 30       	cpi	r27, 0x01	; 1
    1bcc:	91 f0       	breq	.+36     	; 0x1bf2 <__fixunssfsi+0x4c>
    1bce:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <__fp_zero>
    1bd2:	b1 e0       	ldi	r27, 0x01	; 1
    1bd4:	08 95       	ret
    1bd6:	0c 94 70 0e 	jmp	0x1ce0	; 0x1ce0 <__fp_zero>
    1bda:	67 2f       	mov	r22, r23
    1bdc:	78 2f       	mov	r23, r24
    1bde:	88 27       	eor	r24, r24
    1be0:	b8 5f       	subi	r27, 0xF8	; 248
    1be2:	39 f0       	breq	.+14     	; 0x1bf2 <__fixunssfsi+0x4c>
    1be4:	b9 3f       	cpi	r27, 0xF9	; 249
    1be6:	cc f3       	brlt	.-14     	; 0x1bda <__fixunssfsi+0x34>
    1be8:	86 95       	lsr	r24
    1bea:	77 95       	ror	r23
    1bec:	67 95       	ror	r22
    1bee:	b3 95       	inc	r27
    1bf0:	d9 f7       	brne	.-10     	; 0x1be8 <__fixunssfsi+0x42>
    1bf2:	3e f4       	brtc	.+14     	; 0x1c02 <__fixunssfsi+0x5c>
    1bf4:	90 95       	com	r25
    1bf6:	80 95       	com	r24
    1bf8:	70 95       	com	r23
    1bfa:	61 95       	neg	r22
    1bfc:	7f 4f       	sbci	r23, 0xFF	; 255
    1bfe:	8f 4f       	sbci	r24, 0xFF	; 255
    1c00:	9f 4f       	sbci	r25, 0xFF	; 255
    1c02:	08 95       	ret

00001c04 <__fp_cmp>:
    1c04:	99 0f       	add	r25, r25
    1c06:	00 08       	sbc	r0, r0
    1c08:	55 0f       	add	r21, r21
    1c0a:	aa 0b       	sbc	r26, r26
    1c0c:	e0 e8       	ldi	r30, 0x80	; 128
    1c0e:	fe ef       	ldi	r31, 0xFE	; 254
    1c10:	16 16       	cp	r1, r22
    1c12:	17 06       	cpc	r1, r23
    1c14:	e8 07       	cpc	r30, r24
    1c16:	f9 07       	cpc	r31, r25
    1c18:	c0 f0       	brcs	.+48     	; 0x1c4a <__fp_cmp+0x46>
    1c1a:	12 16       	cp	r1, r18
    1c1c:	13 06       	cpc	r1, r19
    1c1e:	e4 07       	cpc	r30, r20
    1c20:	f5 07       	cpc	r31, r21
    1c22:	98 f0       	brcs	.+38     	; 0x1c4a <__fp_cmp+0x46>
    1c24:	62 1b       	sub	r22, r18
    1c26:	73 0b       	sbc	r23, r19
    1c28:	84 0b       	sbc	r24, r20
    1c2a:	95 0b       	sbc	r25, r21
    1c2c:	39 f4       	brne	.+14     	; 0x1c3c <__fp_cmp+0x38>
    1c2e:	0a 26       	eor	r0, r26
    1c30:	61 f0       	breq	.+24     	; 0x1c4a <__fp_cmp+0x46>
    1c32:	23 2b       	or	r18, r19
    1c34:	24 2b       	or	r18, r20
    1c36:	25 2b       	or	r18, r21
    1c38:	21 f4       	brne	.+8      	; 0x1c42 <__fp_cmp+0x3e>
    1c3a:	08 95       	ret
    1c3c:	0a 26       	eor	r0, r26
    1c3e:	09 f4       	brne	.+2      	; 0x1c42 <__fp_cmp+0x3e>
    1c40:	a1 40       	sbci	r26, 0x01	; 1
    1c42:	a6 95       	lsr	r26
    1c44:	8f ef       	ldi	r24, 0xFF	; 255
    1c46:	81 1d       	adc	r24, r1
    1c48:	81 1d       	adc	r24, r1
    1c4a:	08 95       	ret

00001c4c <__fp_inf>:
    1c4c:	97 f9       	bld	r25, 7
    1c4e:	9f 67       	ori	r25, 0x7F	; 127
    1c50:	80 e8       	ldi	r24, 0x80	; 128
    1c52:	70 e0       	ldi	r23, 0x00	; 0
    1c54:	60 e0       	ldi	r22, 0x00	; 0
    1c56:	08 95       	ret

00001c58 <__fp_nan>:
    1c58:	9f ef       	ldi	r25, 0xFF	; 255
    1c5a:	80 ec       	ldi	r24, 0xC0	; 192
    1c5c:	08 95       	ret

00001c5e <__fp_pscA>:
    1c5e:	00 24       	eor	r0, r0
    1c60:	0a 94       	dec	r0
    1c62:	16 16       	cp	r1, r22
    1c64:	17 06       	cpc	r1, r23
    1c66:	18 06       	cpc	r1, r24
    1c68:	09 06       	cpc	r0, r25
    1c6a:	08 95       	ret

00001c6c <__fp_pscB>:
    1c6c:	00 24       	eor	r0, r0
    1c6e:	0a 94       	dec	r0
    1c70:	12 16       	cp	r1, r18
    1c72:	13 06       	cpc	r1, r19
    1c74:	14 06       	cpc	r1, r20
    1c76:	05 06       	cpc	r0, r21
    1c78:	08 95       	ret

00001c7a <__fp_round>:
    1c7a:	09 2e       	mov	r0, r25
    1c7c:	03 94       	inc	r0
    1c7e:	00 0c       	add	r0, r0
    1c80:	11 f4       	brne	.+4      	; 0x1c86 <__fp_round+0xc>
    1c82:	88 23       	and	r24, r24
    1c84:	52 f0       	brmi	.+20     	; 0x1c9a <__fp_round+0x20>
    1c86:	bb 0f       	add	r27, r27
    1c88:	40 f4       	brcc	.+16     	; 0x1c9a <__fp_round+0x20>
    1c8a:	bf 2b       	or	r27, r31
    1c8c:	11 f4       	brne	.+4      	; 0x1c92 <__fp_round+0x18>
    1c8e:	60 ff       	sbrs	r22, 0
    1c90:	04 c0       	rjmp	.+8      	; 0x1c9a <__fp_round+0x20>
    1c92:	6f 5f       	subi	r22, 0xFF	; 255
    1c94:	7f 4f       	sbci	r23, 0xFF	; 255
    1c96:	8f 4f       	sbci	r24, 0xFF	; 255
    1c98:	9f 4f       	sbci	r25, 0xFF	; 255
    1c9a:	08 95       	ret

00001c9c <__fp_split3>:
    1c9c:	57 fd       	sbrc	r21, 7
    1c9e:	90 58       	subi	r25, 0x80	; 128
    1ca0:	44 0f       	add	r20, r20
    1ca2:	55 1f       	adc	r21, r21
    1ca4:	59 f0       	breq	.+22     	; 0x1cbc <__fp_splitA+0x10>
    1ca6:	5f 3f       	cpi	r21, 0xFF	; 255
    1ca8:	71 f0       	breq	.+28     	; 0x1cc6 <__fp_splitA+0x1a>
    1caa:	47 95       	ror	r20

00001cac <__fp_splitA>:
    1cac:	88 0f       	add	r24, r24
    1cae:	97 fb       	bst	r25, 7
    1cb0:	99 1f       	adc	r25, r25
    1cb2:	61 f0       	breq	.+24     	; 0x1ccc <__fp_splitA+0x20>
    1cb4:	9f 3f       	cpi	r25, 0xFF	; 255
    1cb6:	79 f0       	breq	.+30     	; 0x1cd6 <__fp_splitA+0x2a>
    1cb8:	87 95       	ror	r24
    1cba:	08 95       	ret
    1cbc:	12 16       	cp	r1, r18
    1cbe:	13 06       	cpc	r1, r19
    1cc0:	14 06       	cpc	r1, r20
    1cc2:	55 1f       	adc	r21, r21
    1cc4:	f2 cf       	rjmp	.-28     	; 0x1caa <__fp_split3+0xe>
    1cc6:	46 95       	lsr	r20
    1cc8:	f1 df       	rcall	.-30     	; 0x1cac <__fp_splitA>
    1cca:	08 c0       	rjmp	.+16     	; 0x1cdc <__fp_splitA+0x30>
    1ccc:	16 16       	cp	r1, r22
    1cce:	17 06       	cpc	r1, r23
    1cd0:	18 06       	cpc	r1, r24
    1cd2:	99 1f       	adc	r25, r25
    1cd4:	f1 cf       	rjmp	.-30     	; 0x1cb8 <__fp_splitA+0xc>
    1cd6:	86 95       	lsr	r24
    1cd8:	71 05       	cpc	r23, r1
    1cda:	61 05       	cpc	r22, r1
    1cdc:	08 94       	sec
    1cde:	08 95       	ret

00001ce0 <__fp_zero>:
    1ce0:	e8 94       	clt

00001ce2 <__fp_szero>:
    1ce2:	bb 27       	eor	r27, r27
    1ce4:	66 27       	eor	r22, r22
    1ce6:	77 27       	eor	r23, r23
    1ce8:	cb 01       	movw	r24, r22
    1cea:	97 f9       	bld	r25, 7
    1cec:	08 95       	ret

00001cee <__gesf2>:
    1cee:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <__fp_cmp>
    1cf2:	08 f4       	brcc	.+2      	; 0x1cf6 <__gesf2+0x8>
    1cf4:	8f ef       	ldi	r24, 0xFF	; 255
    1cf6:	08 95       	ret

00001cf8 <__mulsf3>:
    1cf8:	0e 94 8f 0e 	call	0x1d1e	; 0x1d1e <__mulsf3x>
    1cfc:	0c 94 3d 0e 	jmp	0x1c7a	; 0x1c7a <__fp_round>
    1d00:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <__fp_pscA>
    1d04:	38 f0       	brcs	.+14     	; 0x1d14 <__mulsf3+0x1c>
    1d06:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <__fp_pscB>
    1d0a:	20 f0       	brcs	.+8      	; 0x1d14 <__mulsf3+0x1c>
    1d0c:	95 23       	and	r25, r21
    1d0e:	11 f0       	breq	.+4      	; 0x1d14 <__mulsf3+0x1c>
    1d10:	0c 94 26 0e 	jmp	0x1c4c	; 0x1c4c <__fp_inf>
    1d14:	0c 94 2c 0e 	jmp	0x1c58	; 0x1c58 <__fp_nan>
    1d18:	11 24       	eor	r1, r1
    1d1a:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__fp_szero>

00001d1e <__mulsf3x>:
    1d1e:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <__fp_split3>
    1d22:	70 f3       	brcs	.-36     	; 0x1d00 <__mulsf3+0x8>

00001d24 <__mulsf3_pse>:
    1d24:	95 9f       	mul	r25, r21
    1d26:	c1 f3       	breq	.-16     	; 0x1d18 <__mulsf3+0x20>
    1d28:	95 0f       	add	r25, r21
    1d2a:	50 e0       	ldi	r21, 0x00	; 0
    1d2c:	55 1f       	adc	r21, r21
    1d2e:	62 9f       	mul	r22, r18
    1d30:	f0 01       	movw	r30, r0
    1d32:	72 9f       	mul	r23, r18
    1d34:	bb 27       	eor	r27, r27
    1d36:	f0 0d       	add	r31, r0
    1d38:	b1 1d       	adc	r27, r1
    1d3a:	63 9f       	mul	r22, r19
    1d3c:	aa 27       	eor	r26, r26
    1d3e:	f0 0d       	add	r31, r0
    1d40:	b1 1d       	adc	r27, r1
    1d42:	aa 1f       	adc	r26, r26
    1d44:	64 9f       	mul	r22, r20
    1d46:	66 27       	eor	r22, r22
    1d48:	b0 0d       	add	r27, r0
    1d4a:	a1 1d       	adc	r26, r1
    1d4c:	66 1f       	adc	r22, r22
    1d4e:	82 9f       	mul	r24, r18
    1d50:	22 27       	eor	r18, r18
    1d52:	b0 0d       	add	r27, r0
    1d54:	a1 1d       	adc	r26, r1
    1d56:	62 1f       	adc	r22, r18
    1d58:	73 9f       	mul	r23, r19
    1d5a:	b0 0d       	add	r27, r0
    1d5c:	a1 1d       	adc	r26, r1
    1d5e:	62 1f       	adc	r22, r18
    1d60:	83 9f       	mul	r24, r19
    1d62:	a0 0d       	add	r26, r0
    1d64:	61 1d       	adc	r22, r1
    1d66:	22 1f       	adc	r18, r18
    1d68:	74 9f       	mul	r23, r20
    1d6a:	33 27       	eor	r19, r19
    1d6c:	a0 0d       	add	r26, r0
    1d6e:	61 1d       	adc	r22, r1
    1d70:	23 1f       	adc	r18, r19
    1d72:	84 9f       	mul	r24, r20
    1d74:	60 0d       	add	r22, r0
    1d76:	21 1d       	adc	r18, r1
    1d78:	82 2f       	mov	r24, r18
    1d7a:	76 2f       	mov	r23, r22
    1d7c:	6a 2f       	mov	r22, r26
    1d7e:	11 24       	eor	r1, r1
    1d80:	9f 57       	subi	r25, 0x7F	; 127
    1d82:	50 40       	sbci	r21, 0x00	; 0
    1d84:	9a f0       	brmi	.+38     	; 0x1dac <__mulsf3_pse+0x88>
    1d86:	f1 f0       	breq	.+60     	; 0x1dc4 <__mulsf3_pse+0xa0>
    1d88:	88 23       	and	r24, r24
    1d8a:	4a f0       	brmi	.+18     	; 0x1d9e <__mulsf3_pse+0x7a>
    1d8c:	ee 0f       	add	r30, r30
    1d8e:	ff 1f       	adc	r31, r31
    1d90:	bb 1f       	adc	r27, r27
    1d92:	66 1f       	adc	r22, r22
    1d94:	77 1f       	adc	r23, r23
    1d96:	88 1f       	adc	r24, r24
    1d98:	91 50       	subi	r25, 0x01	; 1
    1d9a:	50 40       	sbci	r21, 0x00	; 0
    1d9c:	a9 f7       	brne	.-22     	; 0x1d88 <__mulsf3_pse+0x64>
    1d9e:	9e 3f       	cpi	r25, 0xFE	; 254
    1da0:	51 05       	cpc	r21, r1
    1da2:	80 f0       	brcs	.+32     	; 0x1dc4 <__mulsf3_pse+0xa0>
    1da4:	0c 94 26 0e 	jmp	0x1c4c	; 0x1c4c <__fp_inf>
    1da8:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__fp_szero>
    1dac:	5f 3f       	cpi	r21, 0xFF	; 255
    1dae:	e4 f3       	brlt	.-8      	; 0x1da8 <__mulsf3_pse+0x84>
    1db0:	98 3e       	cpi	r25, 0xE8	; 232
    1db2:	d4 f3       	brlt	.-12     	; 0x1da8 <__mulsf3_pse+0x84>
    1db4:	86 95       	lsr	r24
    1db6:	77 95       	ror	r23
    1db8:	67 95       	ror	r22
    1dba:	b7 95       	ror	r27
    1dbc:	f7 95       	ror	r31
    1dbe:	e7 95       	ror	r30
    1dc0:	9f 5f       	subi	r25, 0xFF	; 255
    1dc2:	c1 f7       	brne	.-16     	; 0x1db4 <__mulsf3_pse+0x90>
    1dc4:	fe 2b       	or	r31, r30
    1dc6:	88 0f       	add	r24, r24
    1dc8:	91 1d       	adc	r25, r1
    1dca:	96 95       	lsr	r25
    1dcc:	87 95       	ror	r24
    1dce:	97 f9       	bld	r25, 7
    1dd0:	08 95       	ret

00001dd2 <printf>:
    1dd2:	a0 e0       	ldi	r26, 0x00	; 0
    1dd4:	b0 e0       	ldi	r27, 0x00	; 0
    1dd6:	ef ee       	ldi	r30, 0xEF	; 239
    1dd8:	fe e0       	ldi	r31, 0x0E	; 14
    1dda:	0c 94 bd 11 	jmp	0x237a	; 0x237a <__prologue_saves__+0x20>
    1dde:	ae 01       	movw	r20, r28
    1de0:	4b 5f       	subi	r20, 0xFB	; 251
    1de2:	5f 4f       	sbci	r21, 0xFF	; 255
    1de4:	fa 01       	movw	r30, r20
    1de6:	61 91       	ld	r22, Z+
    1de8:	71 91       	ld	r23, Z+
    1dea:	af 01       	movw	r20, r30
    1dec:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <__iob+0x2>
    1df0:	90 91 89 01 	lds	r25, 0x0189	; 0x800189 <__iob+0x3>
    1df4:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <vfprintf>
    1df8:	e2 e0       	ldi	r30, 0x02	; 2
    1dfa:	0c 94 d9 11 	jmp	0x23b2	; 0x23b2 <__epilogue_restores__+0x20>

00001dfe <puts>:
    1dfe:	0f 93       	push	r16
    1e00:	1f 93       	push	r17
    1e02:	cf 93       	push	r28
    1e04:	df 93       	push	r29
    1e06:	e0 91 88 01 	lds	r30, 0x0188	; 0x800188 <__iob+0x2>
    1e0a:	f0 91 89 01 	lds	r31, 0x0189	; 0x800189 <__iob+0x3>
    1e0e:	23 81       	ldd	r18, Z+3	; 0x03
    1e10:	21 ff       	sbrs	r18, 1
    1e12:	1b c0       	rjmp	.+54     	; 0x1e4a <puts+0x4c>
    1e14:	8c 01       	movw	r16, r24
    1e16:	d0 e0       	ldi	r29, 0x00	; 0
    1e18:	c0 e0       	ldi	r28, 0x00	; 0
    1e1a:	f8 01       	movw	r30, r16
    1e1c:	81 91       	ld	r24, Z+
    1e1e:	8f 01       	movw	r16, r30
    1e20:	60 91 88 01 	lds	r22, 0x0188	; 0x800188 <__iob+0x2>
    1e24:	70 91 89 01 	lds	r23, 0x0189	; 0x800189 <__iob+0x3>
    1e28:	db 01       	movw	r26, r22
    1e2a:	18 96       	adiw	r26, 0x08	; 8
    1e2c:	ed 91       	ld	r30, X+
    1e2e:	fc 91       	ld	r31, X
    1e30:	19 97       	sbiw	r26, 0x09	; 9
    1e32:	88 23       	and	r24, r24
    1e34:	31 f0       	breq	.+12     	; 0x1e42 <puts+0x44>
    1e36:	09 95       	icall
    1e38:	89 2b       	or	r24, r25
    1e3a:	79 f3       	breq	.-34     	; 0x1e1a <puts+0x1c>
    1e3c:	df ef       	ldi	r29, 0xFF	; 255
    1e3e:	cf ef       	ldi	r28, 0xFF	; 255
    1e40:	ec cf       	rjmp	.-40     	; 0x1e1a <puts+0x1c>
    1e42:	8a e0       	ldi	r24, 0x0A	; 10
    1e44:	09 95       	icall
    1e46:	89 2b       	or	r24, r25
    1e48:	19 f0       	breq	.+6      	; 0x1e50 <puts+0x52>
    1e4a:	8f ef       	ldi	r24, 0xFF	; 255
    1e4c:	9f ef       	ldi	r25, 0xFF	; 255
    1e4e:	02 c0       	rjmp	.+4      	; 0x1e54 <puts+0x56>
    1e50:	8d 2f       	mov	r24, r29
    1e52:	9c 2f       	mov	r25, r28
    1e54:	df 91       	pop	r29
    1e56:	cf 91       	pop	r28
    1e58:	1f 91       	pop	r17
    1e5a:	0f 91       	pop	r16
    1e5c:	08 95       	ret

00001e5e <vfprintf>:
    1e5e:	ac e0       	ldi	r26, 0x0C	; 12
    1e60:	b0 e0       	ldi	r27, 0x00	; 0
    1e62:	e5 e3       	ldi	r30, 0x35	; 53
    1e64:	ff e0       	ldi	r31, 0x0F	; 15
    1e66:	0c 94 ad 11 	jmp	0x235a	; 0x235a <__prologue_saves__>
    1e6a:	7c 01       	movw	r14, r24
    1e6c:	6b 01       	movw	r12, r22
    1e6e:	8a 01       	movw	r16, r20
    1e70:	fc 01       	movw	r30, r24
    1e72:	17 82       	std	Z+7, r1	; 0x07
    1e74:	16 82       	std	Z+6, r1	; 0x06
    1e76:	83 81       	ldd	r24, Z+3	; 0x03
    1e78:	81 ff       	sbrs	r24, 1
    1e7a:	bd c1       	rjmp	.+890    	; 0x21f6 <vfprintf+0x398>
    1e7c:	ce 01       	movw	r24, r28
    1e7e:	01 96       	adiw	r24, 0x01	; 1
    1e80:	4c 01       	movw	r8, r24
    1e82:	f7 01       	movw	r30, r14
    1e84:	93 81       	ldd	r25, Z+3	; 0x03
    1e86:	f6 01       	movw	r30, r12
    1e88:	93 fd       	sbrc	r25, 3
    1e8a:	85 91       	lpm	r24, Z+
    1e8c:	93 ff       	sbrs	r25, 3
    1e8e:	81 91       	ld	r24, Z+
    1e90:	6f 01       	movw	r12, r30
    1e92:	88 23       	and	r24, r24
    1e94:	09 f4       	brne	.+2      	; 0x1e98 <vfprintf+0x3a>
    1e96:	ab c1       	rjmp	.+854    	; 0x21ee <vfprintf+0x390>
    1e98:	85 32       	cpi	r24, 0x25	; 37
    1e9a:	39 f4       	brne	.+14     	; 0x1eaa <vfprintf+0x4c>
    1e9c:	93 fd       	sbrc	r25, 3
    1e9e:	85 91       	lpm	r24, Z+
    1ea0:	93 ff       	sbrs	r25, 3
    1ea2:	81 91       	ld	r24, Z+
    1ea4:	6f 01       	movw	r12, r30
    1ea6:	85 32       	cpi	r24, 0x25	; 37
    1ea8:	29 f4       	brne	.+10     	; 0x1eb4 <vfprintf+0x56>
    1eaa:	b7 01       	movw	r22, r14
    1eac:	90 e0       	ldi	r25, 0x00	; 0
    1eae:	0e 94 17 11 	call	0x222e	; 0x222e <fputc>
    1eb2:	e7 cf       	rjmp	.-50     	; 0x1e82 <vfprintf+0x24>
    1eb4:	51 2c       	mov	r5, r1
    1eb6:	31 2c       	mov	r3, r1
    1eb8:	20 e0       	ldi	r18, 0x00	; 0
    1eba:	20 32       	cpi	r18, 0x20	; 32
    1ebc:	a0 f4       	brcc	.+40     	; 0x1ee6 <vfprintf+0x88>
    1ebe:	8b 32       	cpi	r24, 0x2B	; 43
    1ec0:	69 f0       	breq	.+26     	; 0x1edc <vfprintf+0x7e>
    1ec2:	30 f4       	brcc	.+12     	; 0x1ed0 <vfprintf+0x72>
    1ec4:	80 32       	cpi	r24, 0x20	; 32
    1ec6:	59 f0       	breq	.+22     	; 0x1ede <vfprintf+0x80>
    1ec8:	83 32       	cpi	r24, 0x23	; 35
    1eca:	69 f4       	brne	.+26     	; 0x1ee6 <vfprintf+0x88>
    1ecc:	20 61       	ori	r18, 0x10	; 16
    1ece:	2c c0       	rjmp	.+88     	; 0x1f28 <vfprintf+0xca>
    1ed0:	8d 32       	cpi	r24, 0x2D	; 45
    1ed2:	39 f0       	breq	.+14     	; 0x1ee2 <vfprintf+0x84>
    1ed4:	80 33       	cpi	r24, 0x30	; 48
    1ed6:	39 f4       	brne	.+14     	; 0x1ee6 <vfprintf+0x88>
    1ed8:	21 60       	ori	r18, 0x01	; 1
    1eda:	26 c0       	rjmp	.+76     	; 0x1f28 <vfprintf+0xca>
    1edc:	22 60       	ori	r18, 0x02	; 2
    1ede:	24 60       	ori	r18, 0x04	; 4
    1ee0:	23 c0       	rjmp	.+70     	; 0x1f28 <vfprintf+0xca>
    1ee2:	28 60       	ori	r18, 0x08	; 8
    1ee4:	21 c0       	rjmp	.+66     	; 0x1f28 <vfprintf+0xca>
    1ee6:	27 fd       	sbrc	r18, 7
    1ee8:	27 c0       	rjmp	.+78     	; 0x1f38 <vfprintf+0xda>
    1eea:	30 ed       	ldi	r19, 0xD0	; 208
    1eec:	38 0f       	add	r19, r24
    1eee:	3a 30       	cpi	r19, 0x0A	; 10
    1ef0:	78 f4       	brcc	.+30     	; 0x1f10 <vfprintf+0xb2>
    1ef2:	26 ff       	sbrs	r18, 6
    1ef4:	06 c0       	rjmp	.+12     	; 0x1f02 <vfprintf+0xa4>
    1ef6:	fa e0       	ldi	r31, 0x0A	; 10
    1ef8:	5f 9e       	mul	r5, r31
    1efa:	30 0d       	add	r19, r0
    1efc:	11 24       	eor	r1, r1
    1efe:	53 2e       	mov	r5, r19
    1f00:	13 c0       	rjmp	.+38     	; 0x1f28 <vfprintf+0xca>
    1f02:	8a e0       	ldi	r24, 0x0A	; 10
    1f04:	38 9e       	mul	r3, r24
    1f06:	30 0d       	add	r19, r0
    1f08:	11 24       	eor	r1, r1
    1f0a:	33 2e       	mov	r3, r19
    1f0c:	20 62       	ori	r18, 0x20	; 32
    1f0e:	0c c0       	rjmp	.+24     	; 0x1f28 <vfprintf+0xca>
    1f10:	8e 32       	cpi	r24, 0x2E	; 46
    1f12:	21 f4       	brne	.+8      	; 0x1f1c <vfprintf+0xbe>
    1f14:	26 fd       	sbrc	r18, 6
    1f16:	6b c1       	rjmp	.+726    	; 0x21ee <vfprintf+0x390>
    1f18:	20 64       	ori	r18, 0x40	; 64
    1f1a:	06 c0       	rjmp	.+12     	; 0x1f28 <vfprintf+0xca>
    1f1c:	8c 36       	cpi	r24, 0x6C	; 108
    1f1e:	11 f4       	brne	.+4      	; 0x1f24 <vfprintf+0xc6>
    1f20:	20 68       	ori	r18, 0x80	; 128
    1f22:	02 c0       	rjmp	.+4      	; 0x1f28 <vfprintf+0xca>
    1f24:	88 36       	cpi	r24, 0x68	; 104
    1f26:	41 f4       	brne	.+16     	; 0x1f38 <vfprintf+0xda>
    1f28:	f6 01       	movw	r30, r12
    1f2a:	93 fd       	sbrc	r25, 3
    1f2c:	85 91       	lpm	r24, Z+
    1f2e:	93 ff       	sbrs	r25, 3
    1f30:	81 91       	ld	r24, Z+
    1f32:	6f 01       	movw	r12, r30
    1f34:	81 11       	cpse	r24, r1
    1f36:	c1 cf       	rjmp	.-126    	; 0x1eba <vfprintf+0x5c>
    1f38:	98 2f       	mov	r25, r24
    1f3a:	9f 7d       	andi	r25, 0xDF	; 223
    1f3c:	95 54       	subi	r25, 0x45	; 69
    1f3e:	93 30       	cpi	r25, 0x03	; 3
    1f40:	28 f4       	brcc	.+10     	; 0x1f4c <vfprintf+0xee>
    1f42:	0c 5f       	subi	r16, 0xFC	; 252
    1f44:	1f 4f       	sbci	r17, 0xFF	; 255
    1f46:	ff e3       	ldi	r31, 0x3F	; 63
    1f48:	f9 83       	std	Y+1, r31	; 0x01
    1f4a:	0d c0       	rjmp	.+26     	; 0x1f66 <vfprintf+0x108>
    1f4c:	83 36       	cpi	r24, 0x63	; 99
    1f4e:	31 f0       	breq	.+12     	; 0x1f5c <vfprintf+0xfe>
    1f50:	83 37       	cpi	r24, 0x73	; 115
    1f52:	71 f0       	breq	.+28     	; 0x1f70 <vfprintf+0x112>
    1f54:	83 35       	cpi	r24, 0x53	; 83
    1f56:	09 f0       	breq	.+2      	; 0x1f5a <vfprintf+0xfc>
    1f58:	5b c0       	rjmp	.+182    	; 0x2010 <vfprintf+0x1b2>
    1f5a:	22 c0       	rjmp	.+68     	; 0x1fa0 <vfprintf+0x142>
    1f5c:	f8 01       	movw	r30, r16
    1f5e:	80 81       	ld	r24, Z
    1f60:	89 83       	std	Y+1, r24	; 0x01
    1f62:	0e 5f       	subi	r16, 0xFE	; 254
    1f64:	1f 4f       	sbci	r17, 0xFF	; 255
    1f66:	44 24       	eor	r4, r4
    1f68:	43 94       	inc	r4
    1f6a:	51 2c       	mov	r5, r1
    1f6c:	54 01       	movw	r10, r8
    1f6e:	15 c0       	rjmp	.+42     	; 0x1f9a <vfprintf+0x13c>
    1f70:	38 01       	movw	r6, r16
    1f72:	f2 e0       	ldi	r31, 0x02	; 2
    1f74:	6f 0e       	add	r6, r31
    1f76:	71 1c       	adc	r7, r1
    1f78:	f8 01       	movw	r30, r16
    1f7a:	a0 80       	ld	r10, Z
    1f7c:	b1 80       	ldd	r11, Z+1	; 0x01
    1f7e:	26 ff       	sbrs	r18, 6
    1f80:	03 c0       	rjmp	.+6      	; 0x1f88 <vfprintf+0x12a>
    1f82:	65 2d       	mov	r22, r5
    1f84:	70 e0       	ldi	r23, 0x00	; 0
    1f86:	02 c0       	rjmp	.+4      	; 0x1f8c <vfprintf+0x12e>
    1f88:	6f ef       	ldi	r22, 0xFF	; 255
    1f8a:	7f ef       	ldi	r23, 0xFF	; 255
    1f8c:	c5 01       	movw	r24, r10
    1f8e:	2c 87       	std	Y+12, r18	; 0x0c
    1f90:	0e 94 0c 11 	call	0x2218	; 0x2218 <strnlen>
    1f94:	2c 01       	movw	r4, r24
    1f96:	83 01       	movw	r16, r6
    1f98:	2c 85       	ldd	r18, Y+12	; 0x0c
    1f9a:	2f 77       	andi	r18, 0x7F	; 127
    1f9c:	22 2e       	mov	r2, r18
    1f9e:	17 c0       	rjmp	.+46     	; 0x1fce <vfprintf+0x170>
    1fa0:	38 01       	movw	r6, r16
    1fa2:	f2 e0       	ldi	r31, 0x02	; 2
    1fa4:	6f 0e       	add	r6, r31
    1fa6:	71 1c       	adc	r7, r1
    1fa8:	f8 01       	movw	r30, r16
    1faa:	a0 80       	ld	r10, Z
    1fac:	b1 80       	ldd	r11, Z+1	; 0x01
    1fae:	26 ff       	sbrs	r18, 6
    1fb0:	03 c0       	rjmp	.+6      	; 0x1fb8 <vfprintf+0x15a>
    1fb2:	65 2d       	mov	r22, r5
    1fb4:	70 e0       	ldi	r23, 0x00	; 0
    1fb6:	02 c0       	rjmp	.+4      	; 0x1fbc <vfprintf+0x15e>
    1fb8:	6f ef       	ldi	r22, 0xFF	; 255
    1fba:	7f ef       	ldi	r23, 0xFF	; 255
    1fbc:	c5 01       	movw	r24, r10
    1fbe:	2c 87       	std	Y+12, r18	; 0x0c
    1fc0:	0e 94 01 11 	call	0x2202	; 0x2202 <strnlen_P>
    1fc4:	2c 01       	movw	r4, r24
    1fc6:	2c 85       	ldd	r18, Y+12	; 0x0c
    1fc8:	20 68       	ori	r18, 0x80	; 128
    1fca:	22 2e       	mov	r2, r18
    1fcc:	83 01       	movw	r16, r6
    1fce:	23 fc       	sbrc	r2, 3
    1fd0:	1b c0       	rjmp	.+54     	; 0x2008 <vfprintf+0x1aa>
    1fd2:	83 2d       	mov	r24, r3
    1fd4:	90 e0       	ldi	r25, 0x00	; 0
    1fd6:	48 16       	cp	r4, r24
    1fd8:	59 06       	cpc	r5, r25
    1fda:	b0 f4       	brcc	.+44     	; 0x2008 <vfprintf+0x1aa>
    1fdc:	b7 01       	movw	r22, r14
    1fde:	80 e2       	ldi	r24, 0x20	; 32
    1fe0:	90 e0       	ldi	r25, 0x00	; 0
    1fe2:	0e 94 17 11 	call	0x222e	; 0x222e <fputc>
    1fe6:	3a 94       	dec	r3
    1fe8:	f4 cf       	rjmp	.-24     	; 0x1fd2 <vfprintf+0x174>
    1fea:	f5 01       	movw	r30, r10
    1fec:	27 fc       	sbrc	r2, 7
    1fee:	85 91       	lpm	r24, Z+
    1ff0:	27 fe       	sbrs	r2, 7
    1ff2:	81 91       	ld	r24, Z+
    1ff4:	5f 01       	movw	r10, r30
    1ff6:	b7 01       	movw	r22, r14
    1ff8:	90 e0       	ldi	r25, 0x00	; 0
    1ffa:	0e 94 17 11 	call	0x222e	; 0x222e <fputc>
    1ffe:	31 10       	cpse	r3, r1
    2000:	3a 94       	dec	r3
    2002:	f1 e0       	ldi	r31, 0x01	; 1
    2004:	4f 1a       	sub	r4, r31
    2006:	51 08       	sbc	r5, r1
    2008:	41 14       	cp	r4, r1
    200a:	51 04       	cpc	r5, r1
    200c:	71 f7       	brne	.-36     	; 0x1fea <vfprintf+0x18c>
    200e:	e5 c0       	rjmp	.+458    	; 0x21da <vfprintf+0x37c>
    2010:	84 36       	cpi	r24, 0x64	; 100
    2012:	11 f0       	breq	.+4      	; 0x2018 <vfprintf+0x1ba>
    2014:	89 36       	cpi	r24, 0x69	; 105
    2016:	39 f5       	brne	.+78     	; 0x2066 <vfprintf+0x208>
    2018:	f8 01       	movw	r30, r16
    201a:	27 ff       	sbrs	r18, 7
    201c:	07 c0       	rjmp	.+14     	; 0x202c <vfprintf+0x1ce>
    201e:	60 81       	ld	r22, Z
    2020:	71 81       	ldd	r23, Z+1	; 0x01
    2022:	82 81       	ldd	r24, Z+2	; 0x02
    2024:	93 81       	ldd	r25, Z+3	; 0x03
    2026:	0c 5f       	subi	r16, 0xFC	; 252
    2028:	1f 4f       	sbci	r17, 0xFF	; 255
    202a:	08 c0       	rjmp	.+16     	; 0x203c <vfprintf+0x1de>
    202c:	60 81       	ld	r22, Z
    202e:	71 81       	ldd	r23, Z+1	; 0x01
    2030:	07 2e       	mov	r0, r23
    2032:	00 0c       	add	r0, r0
    2034:	88 0b       	sbc	r24, r24
    2036:	99 0b       	sbc	r25, r25
    2038:	0e 5f       	subi	r16, 0xFE	; 254
    203a:	1f 4f       	sbci	r17, 0xFF	; 255
    203c:	2f 76       	andi	r18, 0x6F	; 111
    203e:	72 2e       	mov	r7, r18
    2040:	97 ff       	sbrs	r25, 7
    2042:	09 c0       	rjmp	.+18     	; 0x2056 <vfprintf+0x1f8>
    2044:	90 95       	com	r25
    2046:	80 95       	com	r24
    2048:	70 95       	com	r23
    204a:	61 95       	neg	r22
    204c:	7f 4f       	sbci	r23, 0xFF	; 255
    204e:	8f 4f       	sbci	r24, 0xFF	; 255
    2050:	9f 4f       	sbci	r25, 0xFF	; 255
    2052:	20 68       	ori	r18, 0x80	; 128
    2054:	72 2e       	mov	r7, r18
    2056:	2a e0       	ldi	r18, 0x0A	; 10
    2058:	30 e0       	ldi	r19, 0x00	; 0
    205a:	a4 01       	movw	r20, r8
    205c:	0e 94 4f 11 	call	0x229e	; 0x229e <__ultoa_invert>
    2060:	a8 2e       	mov	r10, r24
    2062:	a8 18       	sub	r10, r8
    2064:	44 c0       	rjmp	.+136    	; 0x20ee <vfprintf+0x290>
    2066:	85 37       	cpi	r24, 0x75	; 117
    2068:	29 f4       	brne	.+10     	; 0x2074 <vfprintf+0x216>
    206a:	2f 7e       	andi	r18, 0xEF	; 239
    206c:	b2 2e       	mov	r11, r18
    206e:	2a e0       	ldi	r18, 0x0A	; 10
    2070:	30 e0       	ldi	r19, 0x00	; 0
    2072:	25 c0       	rjmp	.+74     	; 0x20be <vfprintf+0x260>
    2074:	f2 2f       	mov	r31, r18
    2076:	f9 7f       	andi	r31, 0xF9	; 249
    2078:	bf 2e       	mov	r11, r31
    207a:	8f 36       	cpi	r24, 0x6F	; 111
    207c:	c1 f0       	breq	.+48     	; 0x20ae <vfprintf+0x250>
    207e:	18 f4       	brcc	.+6      	; 0x2086 <vfprintf+0x228>
    2080:	88 35       	cpi	r24, 0x58	; 88
    2082:	79 f0       	breq	.+30     	; 0x20a2 <vfprintf+0x244>
    2084:	b4 c0       	rjmp	.+360    	; 0x21ee <vfprintf+0x390>
    2086:	80 37       	cpi	r24, 0x70	; 112
    2088:	19 f0       	breq	.+6      	; 0x2090 <vfprintf+0x232>
    208a:	88 37       	cpi	r24, 0x78	; 120
    208c:	21 f0       	breq	.+8      	; 0x2096 <vfprintf+0x238>
    208e:	af c0       	rjmp	.+350    	; 0x21ee <vfprintf+0x390>
    2090:	2f 2f       	mov	r18, r31
    2092:	20 61       	ori	r18, 0x10	; 16
    2094:	b2 2e       	mov	r11, r18
    2096:	b4 fe       	sbrs	r11, 4
    2098:	0d c0       	rjmp	.+26     	; 0x20b4 <vfprintf+0x256>
    209a:	8b 2d       	mov	r24, r11
    209c:	84 60       	ori	r24, 0x04	; 4
    209e:	b8 2e       	mov	r11, r24
    20a0:	09 c0       	rjmp	.+18     	; 0x20b4 <vfprintf+0x256>
    20a2:	24 ff       	sbrs	r18, 4
    20a4:	0a c0       	rjmp	.+20     	; 0x20ba <vfprintf+0x25c>
    20a6:	9f 2f       	mov	r25, r31
    20a8:	96 60       	ori	r25, 0x06	; 6
    20aa:	b9 2e       	mov	r11, r25
    20ac:	06 c0       	rjmp	.+12     	; 0x20ba <vfprintf+0x25c>
    20ae:	28 e0       	ldi	r18, 0x08	; 8
    20b0:	30 e0       	ldi	r19, 0x00	; 0
    20b2:	05 c0       	rjmp	.+10     	; 0x20be <vfprintf+0x260>
    20b4:	20 e1       	ldi	r18, 0x10	; 16
    20b6:	30 e0       	ldi	r19, 0x00	; 0
    20b8:	02 c0       	rjmp	.+4      	; 0x20be <vfprintf+0x260>
    20ba:	20 e1       	ldi	r18, 0x10	; 16
    20bc:	32 e0       	ldi	r19, 0x02	; 2
    20be:	f8 01       	movw	r30, r16
    20c0:	b7 fe       	sbrs	r11, 7
    20c2:	07 c0       	rjmp	.+14     	; 0x20d2 <vfprintf+0x274>
    20c4:	60 81       	ld	r22, Z
    20c6:	71 81       	ldd	r23, Z+1	; 0x01
    20c8:	82 81       	ldd	r24, Z+2	; 0x02
    20ca:	93 81       	ldd	r25, Z+3	; 0x03
    20cc:	0c 5f       	subi	r16, 0xFC	; 252
    20ce:	1f 4f       	sbci	r17, 0xFF	; 255
    20d0:	06 c0       	rjmp	.+12     	; 0x20de <vfprintf+0x280>
    20d2:	60 81       	ld	r22, Z
    20d4:	71 81       	ldd	r23, Z+1	; 0x01
    20d6:	80 e0       	ldi	r24, 0x00	; 0
    20d8:	90 e0       	ldi	r25, 0x00	; 0
    20da:	0e 5f       	subi	r16, 0xFE	; 254
    20dc:	1f 4f       	sbci	r17, 0xFF	; 255
    20de:	a4 01       	movw	r20, r8
    20e0:	0e 94 4f 11 	call	0x229e	; 0x229e <__ultoa_invert>
    20e4:	a8 2e       	mov	r10, r24
    20e6:	a8 18       	sub	r10, r8
    20e8:	fb 2d       	mov	r31, r11
    20ea:	ff 77       	andi	r31, 0x7F	; 127
    20ec:	7f 2e       	mov	r7, r31
    20ee:	76 fe       	sbrs	r7, 6
    20f0:	0b c0       	rjmp	.+22     	; 0x2108 <vfprintf+0x2aa>
    20f2:	37 2d       	mov	r19, r7
    20f4:	3e 7f       	andi	r19, 0xFE	; 254
    20f6:	a5 14       	cp	r10, r5
    20f8:	50 f4       	brcc	.+20     	; 0x210e <vfprintf+0x2b0>
    20fa:	74 fe       	sbrs	r7, 4
    20fc:	0a c0       	rjmp	.+20     	; 0x2112 <vfprintf+0x2b4>
    20fe:	72 fc       	sbrc	r7, 2
    2100:	08 c0       	rjmp	.+16     	; 0x2112 <vfprintf+0x2b4>
    2102:	37 2d       	mov	r19, r7
    2104:	3e 7e       	andi	r19, 0xEE	; 238
    2106:	05 c0       	rjmp	.+10     	; 0x2112 <vfprintf+0x2b4>
    2108:	ba 2c       	mov	r11, r10
    210a:	37 2d       	mov	r19, r7
    210c:	03 c0       	rjmp	.+6      	; 0x2114 <vfprintf+0x2b6>
    210e:	ba 2c       	mov	r11, r10
    2110:	01 c0       	rjmp	.+2      	; 0x2114 <vfprintf+0x2b6>
    2112:	b5 2c       	mov	r11, r5
    2114:	34 ff       	sbrs	r19, 4
    2116:	0d c0       	rjmp	.+26     	; 0x2132 <vfprintf+0x2d4>
    2118:	fe 01       	movw	r30, r28
    211a:	ea 0d       	add	r30, r10
    211c:	f1 1d       	adc	r31, r1
    211e:	80 81       	ld	r24, Z
    2120:	80 33       	cpi	r24, 0x30	; 48
    2122:	11 f4       	brne	.+4      	; 0x2128 <vfprintf+0x2ca>
    2124:	39 7e       	andi	r19, 0xE9	; 233
    2126:	09 c0       	rjmp	.+18     	; 0x213a <vfprintf+0x2dc>
    2128:	32 ff       	sbrs	r19, 2
    212a:	06 c0       	rjmp	.+12     	; 0x2138 <vfprintf+0x2da>
    212c:	b3 94       	inc	r11
    212e:	b3 94       	inc	r11
    2130:	04 c0       	rjmp	.+8      	; 0x213a <vfprintf+0x2dc>
    2132:	83 2f       	mov	r24, r19
    2134:	86 78       	andi	r24, 0x86	; 134
    2136:	09 f0       	breq	.+2      	; 0x213a <vfprintf+0x2dc>
    2138:	b3 94       	inc	r11
    213a:	33 fd       	sbrc	r19, 3
    213c:	13 c0       	rjmp	.+38     	; 0x2164 <vfprintf+0x306>
    213e:	30 ff       	sbrs	r19, 0
    2140:	06 c0       	rjmp	.+12     	; 0x214e <vfprintf+0x2f0>
    2142:	5a 2c       	mov	r5, r10
    2144:	b3 14       	cp	r11, r3
    2146:	18 f4       	brcc	.+6      	; 0x214e <vfprintf+0x2f0>
    2148:	53 0c       	add	r5, r3
    214a:	5b 18       	sub	r5, r11
    214c:	b3 2c       	mov	r11, r3
    214e:	b3 14       	cp	r11, r3
    2150:	68 f4       	brcc	.+26     	; 0x216c <vfprintf+0x30e>
    2152:	b7 01       	movw	r22, r14
    2154:	80 e2       	ldi	r24, 0x20	; 32
    2156:	90 e0       	ldi	r25, 0x00	; 0
    2158:	3c 87       	std	Y+12, r19	; 0x0c
    215a:	0e 94 17 11 	call	0x222e	; 0x222e <fputc>
    215e:	b3 94       	inc	r11
    2160:	3c 85       	ldd	r19, Y+12	; 0x0c
    2162:	f5 cf       	rjmp	.-22     	; 0x214e <vfprintf+0x2f0>
    2164:	b3 14       	cp	r11, r3
    2166:	10 f4       	brcc	.+4      	; 0x216c <vfprintf+0x30e>
    2168:	3b 18       	sub	r3, r11
    216a:	01 c0       	rjmp	.+2      	; 0x216e <vfprintf+0x310>
    216c:	31 2c       	mov	r3, r1
    216e:	34 ff       	sbrs	r19, 4
    2170:	12 c0       	rjmp	.+36     	; 0x2196 <vfprintf+0x338>
    2172:	b7 01       	movw	r22, r14
    2174:	80 e3       	ldi	r24, 0x30	; 48
    2176:	90 e0       	ldi	r25, 0x00	; 0
    2178:	3c 87       	std	Y+12, r19	; 0x0c
    217a:	0e 94 17 11 	call	0x222e	; 0x222e <fputc>
    217e:	3c 85       	ldd	r19, Y+12	; 0x0c
    2180:	32 ff       	sbrs	r19, 2
    2182:	17 c0       	rjmp	.+46     	; 0x21b2 <vfprintf+0x354>
    2184:	31 fd       	sbrc	r19, 1
    2186:	03 c0       	rjmp	.+6      	; 0x218e <vfprintf+0x330>
    2188:	88 e7       	ldi	r24, 0x78	; 120
    218a:	90 e0       	ldi	r25, 0x00	; 0
    218c:	02 c0       	rjmp	.+4      	; 0x2192 <vfprintf+0x334>
    218e:	88 e5       	ldi	r24, 0x58	; 88
    2190:	90 e0       	ldi	r25, 0x00	; 0
    2192:	b7 01       	movw	r22, r14
    2194:	0c c0       	rjmp	.+24     	; 0x21ae <vfprintf+0x350>
    2196:	83 2f       	mov	r24, r19
    2198:	86 78       	andi	r24, 0x86	; 134
    219a:	59 f0       	breq	.+22     	; 0x21b2 <vfprintf+0x354>
    219c:	31 ff       	sbrs	r19, 1
    219e:	02 c0       	rjmp	.+4      	; 0x21a4 <vfprintf+0x346>
    21a0:	8b e2       	ldi	r24, 0x2B	; 43
    21a2:	01 c0       	rjmp	.+2      	; 0x21a6 <vfprintf+0x348>
    21a4:	80 e2       	ldi	r24, 0x20	; 32
    21a6:	37 fd       	sbrc	r19, 7
    21a8:	8d e2       	ldi	r24, 0x2D	; 45
    21aa:	b7 01       	movw	r22, r14
    21ac:	90 e0       	ldi	r25, 0x00	; 0
    21ae:	0e 94 17 11 	call	0x222e	; 0x222e <fputc>
    21b2:	a5 14       	cp	r10, r5
    21b4:	38 f4       	brcc	.+14     	; 0x21c4 <vfprintf+0x366>
    21b6:	b7 01       	movw	r22, r14
    21b8:	80 e3       	ldi	r24, 0x30	; 48
    21ba:	90 e0       	ldi	r25, 0x00	; 0
    21bc:	0e 94 17 11 	call	0x222e	; 0x222e <fputc>
    21c0:	5a 94       	dec	r5
    21c2:	f7 cf       	rjmp	.-18     	; 0x21b2 <vfprintf+0x354>
    21c4:	aa 94       	dec	r10
    21c6:	f4 01       	movw	r30, r8
    21c8:	ea 0d       	add	r30, r10
    21ca:	f1 1d       	adc	r31, r1
    21cc:	80 81       	ld	r24, Z
    21ce:	b7 01       	movw	r22, r14
    21d0:	90 e0       	ldi	r25, 0x00	; 0
    21d2:	0e 94 17 11 	call	0x222e	; 0x222e <fputc>
    21d6:	a1 10       	cpse	r10, r1
    21d8:	f5 cf       	rjmp	.-22     	; 0x21c4 <vfprintf+0x366>
    21da:	33 20       	and	r3, r3
    21dc:	09 f4       	brne	.+2      	; 0x21e0 <vfprintf+0x382>
    21de:	51 ce       	rjmp	.-862    	; 0x1e82 <vfprintf+0x24>
    21e0:	b7 01       	movw	r22, r14
    21e2:	80 e2       	ldi	r24, 0x20	; 32
    21e4:	90 e0       	ldi	r25, 0x00	; 0
    21e6:	0e 94 17 11 	call	0x222e	; 0x222e <fputc>
    21ea:	3a 94       	dec	r3
    21ec:	f6 cf       	rjmp	.-20     	; 0x21da <vfprintf+0x37c>
    21ee:	f7 01       	movw	r30, r14
    21f0:	86 81       	ldd	r24, Z+6	; 0x06
    21f2:	97 81       	ldd	r25, Z+7	; 0x07
    21f4:	02 c0       	rjmp	.+4      	; 0x21fa <vfprintf+0x39c>
    21f6:	8f ef       	ldi	r24, 0xFF	; 255
    21f8:	9f ef       	ldi	r25, 0xFF	; 255
    21fa:	2c 96       	adiw	r28, 0x0c	; 12
    21fc:	e2 e1       	ldi	r30, 0x12	; 18
    21fe:	0c 94 c9 11 	jmp	0x2392	; 0x2392 <__epilogue_restores__>

00002202 <strnlen_P>:
    2202:	fc 01       	movw	r30, r24
    2204:	05 90       	lpm	r0, Z+
    2206:	61 50       	subi	r22, 0x01	; 1
    2208:	70 40       	sbci	r23, 0x00	; 0
    220a:	01 10       	cpse	r0, r1
    220c:	d8 f7       	brcc	.-10     	; 0x2204 <strnlen_P+0x2>
    220e:	80 95       	com	r24
    2210:	90 95       	com	r25
    2212:	8e 0f       	add	r24, r30
    2214:	9f 1f       	adc	r25, r31
    2216:	08 95       	ret

00002218 <strnlen>:
    2218:	fc 01       	movw	r30, r24
    221a:	61 50       	subi	r22, 0x01	; 1
    221c:	70 40       	sbci	r23, 0x00	; 0
    221e:	01 90       	ld	r0, Z+
    2220:	01 10       	cpse	r0, r1
    2222:	d8 f7       	brcc	.-10     	; 0x221a <strnlen+0x2>
    2224:	80 95       	com	r24
    2226:	90 95       	com	r25
    2228:	8e 0f       	add	r24, r30
    222a:	9f 1f       	adc	r25, r31
    222c:	08 95       	ret

0000222e <fputc>:
    222e:	0f 93       	push	r16
    2230:	1f 93       	push	r17
    2232:	cf 93       	push	r28
    2234:	df 93       	push	r29
    2236:	fb 01       	movw	r30, r22
    2238:	23 81       	ldd	r18, Z+3	; 0x03
    223a:	21 fd       	sbrc	r18, 1
    223c:	03 c0       	rjmp	.+6      	; 0x2244 <fputc+0x16>
    223e:	8f ef       	ldi	r24, 0xFF	; 255
    2240:	9f ef       	ldi	r25, 0xFF	; 255
    2242:	28 c0       	rjmp	.+80     	; 0x2294 <fputc+0x66>
    2244:	22 ff       	sbrs	r18, 2
    2246:	16 c0       	rjmp	.+44     	; 0x2274 <fputc+0x46>
    2248:	46 81       	ldd	r20, Z+6	; 0x06
    224a:	57 81       	ldd	r21, Z+7	; 0x07
    224c:	24 81       	ldd	r18, Z+4	; 0x04
    224e:	35 81       	ldd	r19, Z+5	; 0x05
    2250:	42 17       	cp	r20, r18
    2252:	53 07       	cpc	r21, r19
    2254:	44 f4       	brge	.+16     	; 0x2266 <fputc+0x38>
    2256:	a0 81       	ld	r26, Z
    2258:	b1 81       	ldd	r27, Z+1	; 0x01
    225a:	9d 01       	movw	r18, r26
    225c:	2f 5f       	subi	r18, 0xFF	; 255
    225e:	3f 4f       	sbci	r19, 0xFF	; 255
    2260:	31 83       	std	Z+1, r19	; 0x01
    2262:	20 83       	st	Z, r18
    2264:	8c 93       	st	X, r24
    2266:	26 81       	ldd	r18, Z+6	; 0x06
    2268:	37 81       	ldd	r19, Z+7	; 0x07
    226a:	2f 5f       	subi	r18, 0xFF	; 255
    226c:	3f 4f       	sbci	r19, 0xFF	; 255
    226e:	37 83       	std	Z+7, r19	; 0x07
    2270:	26 83       	std	Z+6, r18	; 0x06
    2272:	10 c0       	rjmp	.+32     	; 0x2294 <fputc+0x66>
    2274:	eb 01       	movw	r28, r22
    2276:	09 2f       	mov	r16, r25
    2278:	18 2f       	mov	r17, r24
    227a:	00 84       	ldd	r0, Z+8	; 0x08
    227c:	f1 85       	ldd	r31, Z+9	; 0x09
    227e:	e0 2d       	mov	r30, r0
    2280:	09 95       	icall
    2282:	89 2b       	or	r24, r25
    2284:	e1 f6       	brne	.-72     	; 0x223e <fputc+0x10>
    2286:	8e 81       	ldd	r24, Y+6	; 0x06
    2288:	9f 81       	ldd	r25, Y+7	; 0x07
    228a:	01 96       	adiw	r24, 0x01	; 1
    228c:	9f 83       	std	Y+7, r25	; 0x07
    228e:	8e 83       	std	Y+6, r24	; 0x06
    2290:	81 2f       	mov	r24, r17
    2292:	90 2f       	mov	r25, r16
    2294:	df 91       	pop	r29
    2296:	cf 91       	pop	r28
    2298:	1f 91       	pop	r17
    229a:	0f 91       	pop	r16
    229c:	08 95       	ret

0000229e <__ultoa_invert>:
    229e:	fa 01       	movw	r30, r20
    22a0:	aa 27       	eor	r26, r26
    22a2:	28 30       	cpi	r18, 0x08	; 8
    22a4:	51 f1       	breq	.+84     	; 0x22fa <__ultoa_invert+0x5c>
    22a6:	20 31       	cpi	r18, 0x10	; 16
    22a8:	81 f1       	breq	.+96     	; 0x230a <__ultoa_invert+0x6c>
    22aa:	e8 94       	clt
    22ac:	6f 93       	push	r22
    22ae:	6e 7f       	andi	r22, 0xFE	; 254
    22b0:	6e 5f       	subi	r22, 0xFE	; 254
    22b2:	7f 4f       	sbci	r23, 0xFF	; 255
    22b4:	8f 4f       	sbci	r24, 0xFF	; 255
    22b6:	9f 4f       	sbci	r25, 0xFF	; 255
    22b8:	af 4f       	sbci	r26, 0xFF	; 255
    22ba:	b1 e0       	ldi	r27, 0x01	; 1
    22bc:	3e d0       	rcall	.+124    	; 0x233a <__ultoa_invert+0x9c>
    22be:	b4 e0       	ldi	r27, 0x04	; 4
    22c0:	3c d0       	rcall	.+120    	; 0x233a <__ultoa_invert+0x9c>
    22c2:	67 0f       	add	r22, r23
    22c4:	78 1f       	adc	r23, r24
    22c6:	89 1f       	adc	r24, r25
    22c8:	9a 1f       	adc	r25, r26
    22ca:	a1 1d       	adc	r26, r1
    22cc:	68 0f       	add	r22, r24
    22ce:	79 1f       	adc	r23, r25
    22d0:	8a 1f       	adc	r24, r26
    22d2:	91 1d       	adc	r25, r1
    22d4:	a1 1d       	adc	r26, r1
    22d6:	6a 0f       	add	r22, r26
    22d8:	71 1d       	adc	r23, r1
    22da:	81 1d       	adc	r24, r1
    22dc:	91 1d       	adc	r25, r1
    22de:	a1 1d       	adc	r26, r1
    22e0:	20 d0       	rcall	.+64     	; 0x2322 <__ultoa_invert+0x84>
    22e2:	09 f4       	brne	.+2      	; 0x22e6 <__ultoa_invert+0x48>
    22e4:	68 94       	set
    22e6:	3f 91       	pop	r19
    22e8:	2a e0       	ldi	r18, 0x0A	; 10
    22ea:	26 9f       	mul	r18, r22
    22ec:	11 24       	eor	r1, r1
    22ee:	30 19       	sub	r19, r0
    22f0:	30 5d       	subi	r19, 0xD0	; 208
    22f2:	31 93       	st	Z+, r19
    22f4:	de f6       	brtc	.-74     	; 0x22ac <__ultoa_invert+0xe>
    22f6:	cf 01       	movw	r24, r30
    22f8:	08 95       	ret
    22fa:	46 2f       	mov	r20, r22
    22fc:	47 70       	andi	r20, 0x07	; 7
    22fe:	40 5d       	subi	r20, 0xD0	; 208
    2300:	41 93       	st	Z+, r20
    2302:	b3 e0       	ldi	r27, 0x03	; 3
    2304:	0f d0       	rcall	.+30     	; 0x2324 <__ultoa_invert+0x86>
    2306:	c9 f7       	brne	.-14     	; 0x22fa <__ultoa_invert+0x5c>
    2308:	f6 cf       	rjmp	.-20     	; 0x22f6 <__ultoa_invert+0x58>
    230a:	46 2f       	mov	r20, r22
    230c:	4f 70       	andi	r20, 0x0F	; 15
    230e:	40 5d       	subi	r20, 0xD0	; 208
    2310:	4a 33       	cpi	r20, 0x3A	; 58
    2312:	18 f0       	brcs	.+6      	; 0x231a <__ultoa_invert+0x7c>
    2314:	49 5d       	subi	r20, 0xD9	; 217
    2316:	31 fd       	sbrc	r19, 1
    2318:	40 52       	subi	r20, 0x20	; 32
    231a:	41 93       	st	Z+, r20
    231c:	02 d0       	rcall	.+4      	; 0x2322 <__ultoa_invert+0x84>
    231e:	a9 f7       	brne	.-22     	; 0x230a <__ultoa_invert+0x6c>
    2320:	ea cf       	rjmp	.-44     	; 0x22f6 <__ultoa_invert+0x58>
    2322:	b4 e0       	ldi	r27, 0x04	; 4
    2324:	a6 95       	lsr	r26
    2326:	97 95       	ror	r25
    2328:	87 95       	ror	r24
    232a:	77 95       	ror	r23
    232c:	67 95       	ror	r22
    232e:	ba 95       	dec	r27
    2330:	c9 f7       	brne	.-14     	; 0x2324 <__ultoa_invert+0x86>
    2332:	00 97       	sbiw	r24, 0x00	; 0
    2334:	61 05       	cpc	r22, r1
    2336:	71 05       	cpc	r23, r1
    2338:	08 95       	ret
    233a:	9b 01       	movw	r18, r22
    233c:	ac 01       	movw	r20, r24
    233e:	0a 2e       	mov	r0, r26
    2340:	06 94       	lsr	r0
    2342:	57 95       	ror	r21
    2344:	47 95       	ror	r20
    2346:	37 95       	ror	r19
    2348:	27 95       	ror	r18
    234a:	ba 95       	dec	r27
    234c:	c9 f7       	brne	.-14     	; 0x2340 <__ultoa_invert+0xa2>
    234e:	62 0f       	add	r22, r18
    2350:	73 1f       	adc	r23, r19
    2352:	84 1f       	adc	r24, r20
    2354:	95 1f       	adc	r25, r21
    2356:	a0 1d       	adc	r26, r0
    2358:	08 95       	ret

0000235a <__prologue_saves__>:
    235a:	2f 92       	push	r2
    235c:	3f 92       	push	r3
    235e:	4f 92       	push	r4
    2360:	5f 92       	push	r5
    2362:	6f 92       	push	r6
    2364:	7f 92       	push	r7
    2366:	8f 92       	push	r8
    2368:	9f 92       	push	r9
    236a:	af 92       	push	r10
    236c:	bf 92       	push	r11
    236e:	cf 92       	push	r12
    2370:	df 92       	push	r13
    2372:	ef 92       	push	r14
    2374:	ff 92       	push	r15
    2376:	0f 93       	push	r16
    2378:	1f 93       	push	r17
    237a:	cf 93       	push	r28
    237c:	df 93       	push	r29
    237e:	cd b7       	in	r28, 0x3d	; 61
    2380:	de b7       	in	r29, 0x3e	; 62
    2382:	ca 1b       	sub	r28, r26
    2384:	db 0b       	sbc	r29, r27
    2386:	0f b6       	in	r0, 0x3f	; 63
    2388:	f8 94       	cli
    238a:	de bf       	out	0x3e, r29	; 62
    238c:	0f be       	out	0x3f, r0	; 63
    238e:	cd bf       	out	0x3d, r28	; 61
    2390:	09 94       	ijmp

00002392 <__epilogue_restores__>:
    2392:	2a 88       	ldd	r2, Y+18	; 0x12
    2394:	39 88       	ldd	r3, Y+17	; 0x11
    2396:	48 88       	ldd	r4, Y+16	; 0x10
    2398:	5f 84       	ldd	r5, Y+15	; 0x0f
    239a:	6e 84       	ldd	r6, Y+14	; 0x0e
    239c:	7d 84       	ldd	r7, Y+13	; 0x0d
    239e:	8c 84       	ldd	r8, Y+12	; 0x0c
    23a0:	9b 84       	ldd	r9, Y+11	; 0x0b
    23a2:	aa 84       	ldd	r10, Y+10	; 0x0a
    23a4:	b9 84       	ldd	r11, Y+9	; 0x09
    23a6:	c8 84       	ldd	r12, Y+8	; 0x08
    23a8:	df 80       	ldd	r13, Y+7	; 0x07
    23aa:	ee 80       	ldd	r14, Y+6	; 0x06
    23ac:	fd 80       	ldd	r15, Y+5	; 0x05
    23ae:	0c 81       	ldd	r16, Y+4	; 0x04
    23b0:	1b 81       	ldd	r17, Y+3	; 0x03
    23b2:	aa 81       	ldd	r26, Y+2	; 0x02
    23b4:	b9 81       	ldd	r27, Y+1	; 0x01
    23b6:	ce 0f       	add	r28, r30
    23b8:	d1 1d       	adc	r29, r1
    23ba:	0f b6       	in	r0, 0x3f	; 63
    23bc:	f8 94       	cli
    23be:	de bf       	out	0x3e, r29	; 62
    23c0:	0f be       	out	0x3f, r0	; 63
    23c2:	cd bf       	out	0x3d, r28	; 61
    23c4:	ed 01       	movw	r28, r26
    23c6:	08 95       	ret

000023c8 <_exit>:
    23c8:	f8 94       	cli

000023ca <__stop_program>:
    23ca:	ff cf       	rjmp	.-2      	; 0x23ca <__stop_program>
